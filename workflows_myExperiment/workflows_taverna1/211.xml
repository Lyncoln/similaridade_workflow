<?xml version="1.0" encoding="UTF-8"?>
<s:scufl xmlns:s="http://org.embl.ebi.escience/xscufl/0.1alpha" version="0.2" log="0">
  <s:workflowdescription lsid="urn:lsid:net.sf.taverna:wfDefinition:51119a7e-5f92-4515-b018-a8970880289e" author="Hamish McWilliam" title="EBI_Phobius">The Phobius tool predicts transmembrane domains and signal peptide region from a protein sequence. This workflow uses the EBI's WSPhobius web service (see http://www.ebi.ac.uk/Tools/webservices/services/phobius) to access the tool. The predicted features are returned in a UniProtKB style feature listing.</s:workflowdescription>
  <s:processor name="Contents_list">
    <s:description>Wrap input data in a list.</s:description>
    <s:local>
      org.embl.ebi.escience.scuflworkers.java.XMLInputSplitter
      <s:extensions>
        <s:arraytype optional="false" unbounded="false" wrapped="false" typename="WSArrayofData" name="content" qname="{http://www.ebi.ac.uk/WSPhobius}WSArrayofData">
          <s:elementtype>
            <s:complextype optional="false" unbounded="false" typename="data" name="" qname="{http://www.ebi.ac.uk/WSPhobius}data">
              <s:elements>
                <s:basetype optional="false" unbounded="false" typename="string" name="type" qname="data&gt;type" />
                <s:basetype optional="false" unbounded="false" typename="string" name="content" qname="data&gt;content" />
              </s:elements>
            </s:complextype>
          </s:elementtype>
        </s:arraytype>
      </s:extensions>
    </s:local>
  </s:processor>
  <s:processor name="runPhobius">
    <s:description>Submit a Phobius analysis job
(see http://www.ebi.ac.uk/Tools/webservices/services/phobius#runphobius_params_content)</s:description>
    <s:arbitrarywsdl>
      <s:wsdl>http://www.ebi.ac.uk/Tools/webservices/wsdl/WSPhobius.wsdl</s:wsdl>
      <s:operation>runPhobius</s:operation>
    </s:arbitrarywsdl>
  </s:processor>
  <s:processor name="Job_params">
    <s:description>Parameters for the job. Set to give UniProtKB style features as output.</s:description>
    <s:defaults>
      <s:default name="outputformat">long</s:default>
      <s:default name="async">1</s:default>
    </s:defaults>
    <s:local>
      org.embl.ebi.escience.scuflworkers.java.XMLInputSplitter
      <s:extensions>
        <s:complextype optional="false" unbounded="false" typename="inputParams" name="params" qname="{http://www.ebi.ac.uk/WSPhobius}inputParams">
          <s:elements>
            <s:basetype optional="false" unbounded="false" typename="string" name="outputformat" qname="inputParams&gt;outputformat" />
            <s:basetype optional="false" unbounded="false" typename="string" name="email" qname="inputParams&gt;email" />
            <s:basetype optional="false" unbounded="false" typename="boolean" name="async" qname="inputParams&gt;async" />
          </s:elements>
        </s:complextype>
      </s:extensions>
    </s:local>
  </s:processor>
  <s:processor name="Input_data">
    <s:description>Add a type to the input data.</s:description>
    <s:defaults>
      <s:default name="type">sequence</s:default>
    </s:defaults>
    <s:local>
      org.embl.ebi.escience.scuflworkers.java.XMLInputSplitter
      <s:extensions>
        <s:complextype optional="false" unbounded="false" typename="data" name="" qname="{http://www.ebi.ac.uk/WSPhobius}data">
          <s:elements>
            <s:basetype optional="false" unbounded="false" typename="string" name="type" qname="data&gt;type" />
            <s:basetype optional="false" unbounded="false" typename="string" name="content" qname="data&gt;content" />
          </s:elements>
        </s:complextype>
      </s:extensions>
    </s:local>
  </s:processor>
  <s:processor name="Unpack_text_output">
    <s:description>Unpack byte[] recived into a string.</s:description>
    <s:local>org.embl.ebi.escience.scuflworkers.java.ByteArrayToString</s:local>
  </s:processor>
  <s:processor name="Get_text_result">
    <s:description>Wait until the job has finished and get the specified type of result data.
(see http://www.ebi.ac.uk/Tools/webservices/services/phobius#poll_jobid_type)</s:description>
    <s:defaults>
      <s:default name="type">tooloutput</s:default>
    </s:defaults>
    <s:arbitrarywsdl>
      <s:wsdl>http://www.ebi.ac.uk/Tools/webservices/wsdl/WSPhobius.wsdl</s:wsdl>
      <s:operation>poll</s:operation>
    </s:arbitrarywsdl>
  </s:processor>
  <s:processor name="EBI_Phobius_poll_job" boring="true">
    <s:description>Check for job completion.</s:description>
    <s:workflow maxretries="100" retrydelay="5000">
      <s:scufl version="0.2" log="0">
        <s:workflowdescription lsid="urn:lsid:net.sf.taverna:wfDefinition:4024c5e5-a4d5-46f6-b9ed-88e66d17da87" author="" title="EBI_Phobius_poll_job" />
        <s:processor name="Is_done">
          <s:beanshell>
            <s:scriptvalue>if(job_status.equals("DONE")) {
  is_done = "true";
} else {
  is_done = "false";
}</s:scriptvalue>
            <s:beanshellinputlist>
              <s:beanshellinput s:syntactictype="'text/plain'">job_status</s:beanshellinput>
            </s:beanshellinputlist>
            <s:beanshelloutputlist>
              <s:beanshelloutput s:syntactictype="'text/plain'">is_done</s:beanshelloutput>
            </s:beanshelloutputlist>
            <s:dependencies s:classloader="iteration" />
          </s:beanshell>
        </s:processor>
        <s:processor name="checkStatus">
          <s:description>Get the status of a submited job
(see http://www.ebi.ac.uk/Tools/webservices/services/phobius#checkstatus_jobid)</s:description>
          <s:arbitrarywsdl>
            <s:wsdl>http://www.ebi.ac.uk/Tools/webservices/wsdl/WSPhobius.wsdl</s:wsdl>
            <s:operation>checkStatus</s:operation>
          </s:arbitrarywsdl>
        </s:processor>
        <s:processor name="Success">
          <s:local critical="true">org.embl.ebi.escience.scuflworkers.java.FailIfFalse</s:local>
        </s:processor>
        <s:link source="Job_ID" sink="checkStatus:jobid" />
        <s:link source="Is_done:is_done" sink="Success:test" />
        <s:link source="checkStatus:status" sink="Is_done:job_status" />
        <s:link source="checkStatus:status" sink="Job_status" />
        <s:source name="Job_ID" />
        <s:sink name="Job_status" />
      </s:scufl>
    </s:workflow>
  </s:processor>
  <s:processor name="Format_as_GFF">
    <s:beanshell>
      <s:scriptvalue>import java.util.StringTokenizer;

// GFF format document
phobius_gff = "";
// Sequence ID
seqId = "";

// Break input into lines.
StringTokenizer tok1 = new StringTokenizer(phobius_output, "\n");
while(tok1.hasMoreElements()) {
  line = tok1.nextElement();
  if(line.startsWith("ID ")) {
    seqId = line.substring(5);
  }
  else if(line.startsWith("FT ")) {
    phobius_gff += seqId + "\tPhobius";
    StringTokenizer tok2 = new StringTokenizer(line);
    fieldCount = 0;
    while(tok2.hasMoreElements()) {
      fieldStr = tok2.nextElement();
      fieldCount++;
      if(fieldCount &gt; 1 &amp;&amp; fieldCount &lt; 4) {
        phobius_gff += "\t" + fieldStr;
      }
      else if(fieldCount == 4) { // Stop coord
        phobius_gff += "\t" + fieldStr + "\t.\t.\t.\t";
      }
      else if(fieldCount &gt; 4) {
        phobius_gff += fieldStr + " ";
      }
    }
    phobius_gff += "\n";
  }
}</s:scriptvalue>
      <s:beanshellinputlist>
        <s:beanshellinput s:syntactictype="'text/plain'">phobius_output</s:beanshellinput>
      </s:beanshellinputlist>
      <s:beanshelloutputlist>
        <s:beanshelloutput s:syntactictype="'text/plain'">phobius_gff</s:beanshelloutput>
      </s:beanshelloutputlist>
      <s:dependencies s:classloader="iteration" />
    </s:beanshell>
  </s:processor>
  <s:link source="Contents_list:output" sink="runPhobius:content" />
  <s:link source="Email" sink="Job_params:email" />
  <s:link source="Format_as_GFF:phobius_gff" sink="Phobius_GFF" />
  <s:link source="Get_text_result:output" sink="Unpack_text_output:bytes" />
  <s:link source="Input_data:output" sink="Contents_list:WSArrayofData" />
  <s:link source="Sequence_or_ID" sink="Input_data:content" />
  <s:link source="Job_params:output" sink="runPhobius:params" />
  <s:link source="Unpack_text_output:string" sink="Format_as_GFF:phobius_output" />
  <s:link source="Unpack_text_output:string" sink="Phobius_output" />
  <s:link source="runPhobius:jobid" sink="EBI_Phobius_poll_job:Job_ID" />
  <s:link source="runPhobius:jobid" sink="Get_text_result:jobid" />
  <s:link source="runPhobius:jobid" sink="Job_ID" />
  <s:source name="Email">
    <s:metadata>
      <s:description>User e-mail address.</s:description>
    </s:metadata>
  </s:source>
  <s:source name="Sequence_or_ID">
    <s:metadata>
      <s:description>Protein sequence to analyse. Either the actual sequence (fasta format recommended) or an entry identifer in database:identifer format (e.g. uniprot:LPHN2_RAT).</s:description>
    </s:metadata>
  </s:source>
  <s:sink name="Job_ID">
    <s:metadata>
      <s:description>EBI job identifier.</s:description>
    </s:metadata>
  </s:sink>
  <s:sink name="Phobius_output">
    <s:metadata>
      <s:description>Predicted features in a UniProtKB style format.</s:description>
    </s:metadata>
  </s:sink>
  <s:sink name="Phobius_GFF" />
  <s:coordination name="Get_text_result_BLOCKON_EBI_Phobius_poll_job">
    <s:condition>
      <s:state>Completed</s:state>
      <s:target>EBI_Phobius_poll_job</s:target>
    </s:condition>
    <s:action>
      <s:target>Get_text_result</s:target>
      <s:statechange>
        <s:from>Scheduled</s:from>
        <s:to>Running</s:to>
      </s:statechange>
    </s:action>
  </s:coordination>
</s:scufl>

