<?xml version="1.0" encoding="UTF-8"?>
<s:scufl xmlns:s="http://org.embl.ebi.escience/xscufl/0.1alpha" version="0.2" log="0">
  <s:workflowdescription lsid="urn:lsid:net.sf.taverna:wfDefinition:b4fac09e-60de-417a-ac75-7bc1a514cf13" author="" title="Identify_strain_and_phylogenetic_tree" />
  <s:processor name="Tree_View">
    <s:description>this is the comand processor to invoke the treeview software and display the phylip tree which generated by clustalw</s:description>
    <s:defaults>
      <s:default name="command">C:\Program Files\Rod Page\TreeView\treev32</s:default>
      <s:default name="args">C:\clustalw\pro_clustalw.dnd</s:default>
    </s:defaults>
    <s:local>net.sourceforge.taverna.scuflworkers.io.LocalCommand</s:local>
  </s:processor>
  <s:processor name="Write_Text_File">
    <s:defaults>
      <s:default name="outputFile">c:\clustalw\pro_clustalw.fna</s:default>
    </s:defaults>
    <s:local>net.sourceforge.taverna.scuflworkers.io.TextFileWriter</s:local>
  </s:processor>
  <s:processor name="mecASearch">
    <s:description>This processor is the local java code to parse the mecA gene from the EMBL file.</s:description>
    <s:arbitrarywsdl>
      <s:wsdl>http://wheel94:9000/SeqService?wsdl</s:wsdl>
      <s:operation>mecASearch</s:operation>
    </s:arbitrarywsdl>
  </s:processor>
  <s:processor name="strainRecognizer">
    <s:description>this is a local processor that recongnize the best hit of the blast result.</s:description>
    <s:arbitrarywsdl>
      <s:wsdl>http://wheel94:9000/SeqService?wsdl</s:wsdl>
      <s:operation>strainRecognizer</s:operation>
    </s:arbitrarywsdl>
  </s:processor>
  <s:processor name="Get_Protein_FASTA">
    <s:description>This retreive the protein sequence and generate as FASTA file</s:description>
    <s:workflow>
      <s:scufl version="0.2" log="0">
        <s:workflowdescription lsid="urn:lsid:net.sf.taverna:wfDefinition:7260dc17-b9a0-4aa2-a98d-c51b5fa1ff43" author="hang.zhao" title="get_protein_fasta" />
        <s:processor name="Get_Protein_FASTA">
          <s:local>net.sourceforge.taverna.scuflworkers.ncbi.ProteinFastaWorker</s:local>
        </s:processor>
        <s:link source="ProteinID" sink="Get_Protein_FASTA:id" />
        <s:link source="Get_Protein_FASTA:outputText" sink="Protein_Seq" />
        <s:source name="ProteinID" />
        <s:sink name="Protein_Seq" />
      </s:scufl>
    </s:workflow>
  </s:processor>
  <s:processor name="run_Clustalw">
    <s:description>This work flow is a simple comand of clustalw. To make it run , you need to install  clastalw to you local machine.</s:description>
    <s:workflow>
      <s:scufl version="0.2" log="0">
        <s:workflowdescription lsid="urn:lsid:net.sf.taverna:wfDefinition:d6115b6f-ff4d-4192-bf22-93d321c853ef" author="Bela Tiwari" title="Clustalw_alignment">This workflow allows you to configure a BioMart query to fetch sequences you want from Ensembl. These sequences are retrieved and a blast database of them is created (by default, in the directory you ran taverna from). 

Warning: This workflow assumes that you have blastall and formatdb installed on the machine, and that by default, these are both found or linked in /usr/local/bin. It also assumes that you have write permission to the directory you have run taverna from. The beanshells "create_blastall_cmdArgs" and "create_formatdb_cmdArgs" are what you need to edit if the default locations are not appropriate for you.

Shortcomings:
The names of all the files created and used is hard coded in this workflow. This means that if you run this workflow more than once without editing anything, you will overwrite files you have previously created.

All files created in the working directory are not yet coded to be deleted via the workflow. Ideally there would be an option that a user could choose that would set the files to be kept or deleted after use.</s:workflowdescription>
        <s:processor name="runClustalw">
          <s:description>This runs the blastall command (NCBI blast) on your local machine. This means you need to have blastall installed. The location provided is /usr/local/bin/blastall, so if your executable is not in that location, you will need to edit this. If you are working on a Bio-Linux machine, this should work for you without change.

Note that the blast results are written to your hard disk in the working directory by default. Edit the location indicated in the create_blastall_cmdArgs beanshell in the line after the one adding "-o" if you are not happy with this.</s:description>
          <s:defaults>
            <s:default name="command">c:\clustalw\clustalw</s:default>
            <s:default name="args">c:\clustalw\pro_clustalw.fna</s:default>
          </s:defaults>
          <s:local>net.sourceforge.taverna.scuflworkers.io.LocalCommand</s:local>
        </s:processor>
        <s:link source="runClustalw:result" sink="output" />
        <s:sink name="output" />
      </s:scufl>
    </s:workflow>
  </s:processor>
  <s:processor name="Get_Embl_File">
    <s:description>retrieve the emble file based on the strainX url</s:description>
    <s:workflow>
      <s:scufl version="0.2" log="0">
        <s:workflowdescription lsid="urn:lsid:net.sf.taverna:wfDefinition:2a963bbf-93e1-4bd6-afab-6158e2c1aed6" author="" title="Get_Embl_File" />
        <s:processor name="Get_web_page_from_URL">
          <s:defaults>
            <s:default name="url">http://www.ebi.ac.uk/cgi-bin/dbfetch?db=embl&amp;style=raw&amp;id=AJ938182</s:default>
          </s:defaults>
          <s:local>org.embl.ebi.escience.scuflworkers.java.WebPageFetcher</s:local>
        </s:processor>
        <s:link source="embl_url" sink="Get_web_page_from_URL:url" />
        <s:link source="Get_web_page_from_URL:contents" sink="Embl_File" />
        <s:source name="embl_url" />
        <s:sink name="Embl_File" />
      </s:scufl>
    </s:workflow>
  </s:processor>
  <s:processor name="Fetch_Seq">
    <s:description>This nested workflow is from my experiment. using fetchBatch to retreive a list of sequence</s:description>
    <s:defaults>
      <s:default name="Database">uniprot</s:default>
    </s:defaults>
    <s:workflow>
      <s:xscufllocation>file:/C:/Taverna-1.7.1/taverna-1.7.1/teambest/EBI_dbfetch_fetchBatch(good).xml</s:xscufllocation>
    </s:workflow>
  </s:processor>
  <s:processor name="Blast_localDB">
    <s:description>This workflow is using local blast and local database to get the blast result of query sequence</s:description>
    <s:workflow>
      <s:xscufllocation>file:/C:/Taverna-1.7.1/taverna-1.7.1/teambest/Genome_Blast(No.2).xml</s:xscufllocation>
    </s:workflow>
  </s:processor>
  <s:processor name="WUBlast_Protein">
    <s:description>This Nested workflow is come from my experiment. thanks the author here.

Perform a BLAST search using the EBI's WSWUBlast service (see http://www.ebi.ac.uk/Tools/webservices/services/wublast). The default parameters search UniProtKB using blastp. To change the job parameters see Job_params.</s:description>
    <s:defaults>
      <s:default name="Search Database">uniprot</s:default>
      <s:default name="E-mail Address">hagn@ee.com</s:default>
      <s:default name="BLAST Program">blastp</s:default>
    </s:defaults>
    <s:workflow>
      <s:scufl version="0.2" log="0">
        <s:workflowdescription lsid="urn:lsid:net.sf.taverna:wfDefinition:b7018d96-fb53-498b-9dff-d83e6f8e99ab" author="Hamish McWilliam" title="Get_Protein_runWUBlast">Perform a BLAST search using the EBI's WSWUBlast service (see http://www.ebi.ac.uk/Tools/webservices/services/wublast). The default parameters search UniProtKB using blastp. To change the job parameters see Job_params.</s:workflowdescription>
        <s:processor name="Content_List">
          <s:description>List of input data items for the job. In the case of WU-BLAST this is a list containing one input sequence.</s:description>
          <s:local>
            org.embl.ebi.escience.scuflworkers.java.XMLInputSplitter
            <s:extensions>
              <s:arraytype optional="false" unbounded="false" wrapped="false" typename="WSArrayofData" name="content" qname="{http://www.ebi.ac.uk/WSWUBlast}WSArrayofData">
                <s:elementtype>
                  <s:complextype optional="false" unbounded="false" typename="data" name="" qname="{http://www.ebi.ac.uk/WSWUBlast}data">
                    <s:elements>
                      <s:basetype optional="false" unbounded="false" typename="string" name="type" qname="data&gt;type" />
                      <s:basetype optional="false" unbounded="false" typename="string" name="content" qname="data&gt;content" />
                    </s:elements>
                  </s:complextype>
                </s:elementtype>
              </s:arraytype>
            </s:extensions>
          </s:local>
        </s:processor>
        <s:processor name="Input_Data">
          <s:description>Pack the input sequence into the structure required.</s:description>
          <s:defaults>
            <s:default name="type">sequence</s:default>
            <s:default name="content">uniprot:wap_rat</s:default>
          </s:defaults>
          <s:local>
            org.embl.ebi.escience.scuflworkers.java.XMLInputSplitter
            <s:extensions>
              <s:complextype optional="false" unbounded="false" typename="data" name="" qname="{http://www.ebi.ac.uk/WSWUBlast}data">
                <s:elements>
                  <s:basetype optional="false" unbounded="false" typename="string" name="type" qname="data&gt;type" />
                  <s:basetype optional="false" unbounded="false" typename="string" name="content" qname="data&gt;content" />
                </s:elements>
              </s:complextype>
            </s:extensions>
          </s:local>
        </s:processor>
        <s:processor name="Decode_XML_Result">
          <s:description>Unpack the byte[] into a string for display.</s:description>
          <s:local>org.embl.ebi.escience.scuflworkers.java.ByteArrayToString</s:local>
        </s:processor>
        <s:processor name="Get_Hit_ID_List">
          <s:description>Get the list of hit identifiers from the job.</s:description>
          <s:arbitrarywsdl>
            <s:wsdl>http://www.ebi.ac.uk/Tools/webservices/wsdl/WSWUBlast.wsdl</s:wsdl>
            <s:operation>getIds</s:operation>
          </s:arbitrarywsdl>
        </s:processor>
        <s:processor name="Get_XML_Result">
          <s:description>Get the XML result for the job.</s:description>
          <s:defaults>
            <s:default name="type">toolxml</s:default>
          </s:defaults>
          <s:arbitrarywsdl>
            <s:wsdl>http://www.ebi.ac.uk/Tools/webservices/wsdl/WSWUBlast.wsdl</s:wsdl>
            <s:operation>poll</s:operation>
          </s:arbitrarywsdl>
        </s:processor>
        <s:processor name="runWUBlast">
          <s:description>Submit the WU-BLAST job.</s:description>
          <s:arbitrarywsdl>
            <s:wsdl>http://www.ebi.ac.uk/Tools/webservices/wsdl/WSWUBlast.wsdl</s:wsdl>
            <s:operation>runWUBlast</s:operation>
          </s:arbitrarywsdl>
        </s:processor>
        <s:processor name="Job_params">
          <s:description>Parameters for the WU-BLAST job.

1. Expectation threshold set to 0.00001
2. Maximum number of hit reported set to 10.</s:description>
          <s:defaults>
            <s:default name="program">blastp</s:default>
            <s:default name="database">uniprot</s:default>
            <s:default name="exp">0.00001</s:default>
            <s:default name="numal">10</s:default>
            <s:default name="scores">10</s:default>
            <s:default name="async">1</s:default>
            <s:default name="email">your@email</s:default>
          </s:defaults>
          <s:local>
            org.embl.ebi.escience.scuflworkers.java.XMLInputSplitter
            <s:extensions>
              <s:complextype optional="false" unbounded="false" typename="inputParams" name="params" qname="{http://www.ebi.ac.uk/WSWUBlast}inputParams">
                <s:elements>
                  <s:basetype optional="false" unbounded="false" typename="string" name="program" qname="inputParams&gt;program" />
                  <s:basetype optional="false" unbounded="false" typename="string" name="database" qname="inputParams&gt;database" />
                  <s:basetype optional="false" unbounded="false" typename="string" name="matrix" qname="inputParams&gt;matrix" />
                  <s:basetype optional="false" unbounded="false" typename="float" name="exp" qname="inputParams&gt;exp" />
                  <s:basetype optional="false" unbounded="false" typename="boolean" name="echofilter" qname="inputParams&gt;echofilter" />
                  <s:basetype optional="false" unbounded="false" typename="string" name="filter" qname="inputParams&gt;filter" />
                  <s:basetype optional="false" unbounded="false" typename="int" name="numal" qname="inputParams&gt;numal" />
                  <s:basetype optional="false" unbounded="false" typename="int" name="scores" qname="inputParams&gt;scores" />
                  <s:basetype optional="false" unbounded="false" typename="string" name="sensitivity" qname="inputParams&gt;sensitivity" />
                  <s:basetype optional="false" unbounded="false" typename="string" name="sort" qname="inputParams&gt;sort" />
                  <s:basetype optional="false" unbounded="false" typename="string" name="stats" qname="inputParams&gt;stats" />
                  <s:basetype optional="false" unbounded="false" typename="string" name="strand" qname="inputParams&gt;strand" />
                  <s:basetype optional="false" unbounded="false" typename="string" name="outformat" qname="inputParams&gt;outformat" />
                  <s:basetype optional="false" unbounded="false" typename="int" name="topcombon" qname="inputParams&gt;topcombon" />
                  <s:basetype optional="false" unbounded="false" typename="boolean" name="async" qname="inputParams&gt;async" />
                  <s:basetype optional="false" unbounded="false" typename="string" name="email" qname="inputParams&gt;email" />
                </s:elements>
              </s:complextype>
            </s:extensions>
          </s:local>
        </s:processor>
        <s:processor name="Poll_Job">
          <s:description>Check if job has completed.</s:description>
          <s:workflow maxretries="100" retrydelay="5000">
            <s:scufl version="0.2" log="0">
              <s:workflowdescription lsid="urn:lsid:net.sf.taverna:wfDefinition:f67bf7d6-cd5e-4ac7-be1e-d8b97255889b" author="" title="Poll_Job" />
              <s:processor name="Success">
                <s:local critical="true">org.embl.ebi.escience.scuflworkers.java.FailIfFalse</s:local>
              </s:processor>
              <s:processor name="Is_Done">
                <s:beanshell>
                  <s:scriptvalue>if(job_status.equals("DONE")) {
  is_done = "true";
} else {
  is_done = "false";
}</s:scriptvalue>
                  <s:beanshellinputlist>
                    <s:beanshellinput s:syntactictype="'text/plain'">job_status</s:beanshellinput>
                  </s:beanshellinputlist>
                  <s:beanshelloutputlist>
                    <s:beanshelloutput s:syntactictype="'text/plain'">is_done</s:beanshelloutput>
                  </s:beanshelloutputlist>
                  <s:dependencies s:classloader="iteration" />
                </s:beanshell>
              </s:processor>
              <s:processor name="checkStatus">
                <s:description>Get the status of a submited job (see http://www.ebi.ac.uk/Tools/webservices/services/wublast#checkstatus_jobid)</s:description>
                <s:arbitrarywsdl>
                  <s:wsdl>http://www.ebi.ac.uk/Tools/webservices/wsdl/WSWUBlast.wsdl</s:wsdl>
                  <s:operation>checkStatus</s:operation>
                </s:arbitrarywsdl>
              </s:processor>
              <s:link source="Job_ID" sink="checkStatus:jobid" />
              <s:link source="Is_Done:is_done" sink="Success:test" />
              <s:link source="checkStatus:status" sink="Is_Done:job_status" />
              <s:link source="checkStatus:status" sink="Job_Status" />
              <s:source name="Job_ID" />
              <s:sink name="Job_Status" />
            </s:scufl>
          </s:workflow>
        </s:processor>
        <s:link source="BLAST Program" sink="Job_params:program" />
        <s:link source="Content_List:output" sink="runWUBlast:content" />
        <s:link source="E-mail Address" sink="Job_params:email" />
        <s:link source="Get_XML_Result:result" sink="Decode_XML_Result:bytes" />
        <s:link source="Input_Data:output" sink="Content_List:WSArrayofData" />
        <s:link source="Job_params:output" sink="runWUBlast:params" />
        <s:link source="Search Database" sink="Job_params:database" />
        <s:link source="Sequence" sink="Input_Data:content" />
        <s:link source="Decode_XML_Result:string" sink="XML Result" />
        <s:link source="Get_Hit_ID_List:result" sink="Hit ID list" />
        <s:link source="runWUBlast:jobid" sink="Get_Hit_ID_List:jobid" />
        <s:link source="runWUBlast:jobid" sink="Get_XML_Result:jobid" />
        <s:link source="runWUBlast:jobid" sink="Job_ID" />
        <s:link source="runWUBlast:jobid" sink="Poll_Job:Job_ID" />
        <s:source name="Search Database">
          <s:metadata>
            <s:description>The name of the database to search (e.g. uniprot).</s:description>
          </s:metadata>
        </s:source>
        <s:source name="E-mail Address">
          <s:metadata>
            <s:description>Your e-mail address.</s:description>
          </s:metadata>
        </s:source>
        <s:source name="BLAST Program">
          <s:metadata>
            <s:description>The BLAST program to use for the search (e.g. blastp).</s:description>
          </s:metadata>
        </s:source>
        <s:source name="Sequence" />
        <s:sink name="Hit ID list">
          <s:metadata>
            <s:description>List of the identifers of the hits found by the search.</s:description>
          </s:metadata>
        </s:sink>
        <s:sink name="XML Result">
          <s:metadata>
            <s:mimeTypes>
              <s:mimeType>application/octet-stream</s:mimeType>
            </s:mimeTypes>
            <s:description>XML version of the BLAST output.</s:description>
          </s:metadata>
        </s:sink>
        <s:sink name="Job_ID">
          <s:metadata>
            <s:description>Identifier of the job run.</s:description>
          </s:metadata>
        </s:sink>
        <s:coordination name="Get_XML_Result_BLOCKON_Poll_Job">
          <s:condition>
            <s:state>Completed</s:state>
            <s:target>Poll_Job</s:target>
          </s:condition>
          <s:action>
            <s:target>Get_XML_Result</s:target>
            <s:statechange>
              <s:from>Scheduled</s:from>
              <s:to>Running</s:to>
            </s:statechange>
          </s:action>
        </s:coordination>
        <s:coordination name="Get_Hit_ID_List_BLOCKON_Poll_Job">
          <s:condition>
            <s:state>Completed</s:state>
            <s:target>Poll_Job</s:target>
          </s:condition>
          <s:action>
            <s:target>Get_Hit_ID_List</s:target>
            <s:statechange>
              <s:from>Scheduled</s:from>
              <s:to>Running</s:to>
            </s:statechange>
          </s:action>
        </s:coordination>
      </s:scufl>
    </s:workflow>
  </s:processor>
  <s:link source="ProteinID" sink="Get_Protein_FASTA:ProteinID" />
  <s:link source="Blast_localDB:Blast_Result" sink="strainRecognizer:parameters" />
  <s:link source="Fetch_Seq:Sequences" sink="Write_Text_File:filecontents" />
  <s:link source="Get_Protein_FASTA:Protein_Seq" sink="WUBlast_Protein:Sequence" />
  <s:link source="StrainXID" sink="Blast_localDB:Embl_id" />
  <s:link source="StrainX_url" sink="Get_Embl_File:embl_url" />
  <s:link source="Get_Embl_File:Embl_File" sink="mecASearch:parameters" />
  <s:link source="Tree_View:result" sink="treeview" />
  <s:link source="WUBlast_Protein:Hit ID list" sink="Fetch_Seq:ID_list" />
  <s:link source="Write_Text_File:outputFile" sink="Hit_Seq" />
  <s:link source="mecASearch:parameters" sink="Is_MRSA" />
  <s:link source="run_Clustalw:output" sink="Clustalw_Result" />
  <s:link source="strainRecognizer:parameters" sink="Hit_Strain_Id" />
  <s:source name="ProteinID">
    <s:metadata>
      <s:description>Using housekeep gene code protein as parameter to build the phylip tree.</s:description>
    </s:metadata>
  </s:source>
  <s:source name="StrainXID" />
  <s:source name="StrainX_url" />
  <s:sink name="Hit_Seq" />
  <s:sink name="Clustalw_Result" />
  <s:sink name="treeview">
    <s:metadata>
      <s:mimeTypes>
        <s:mimeType>image/png</s:mimeType>
        <s:mimeType>image/gif</s:mimeType>
      </s:mimeTypes>
    </s:metadata>
  </s:sink>
  <s:sink name="Hit_Strain_Id" />
  <s:sink name="Is_MRSA" />
  <s:coordination name="run_Clustalw_BLOCKON_Write_Text_File">
    <s:condition>
      <s:state>Completed</s:state>
      <s:target>Write_Text_File</s:target>
    </s:condition>
    <s:action>
      <s:target>run_Clustalw</s:target>
      <s:statechange>
        <s:from>Scheduled</s:from>
        <s:to>Running</s:to>
      </s:statechange>
    </s:action>
  </s:coordination>
  <s:coordination name="Execute_cmd_line_app_BLOCKON_run_Clustalw">
    <s:condition>
      <s:state>Completed</s:state>
      <s:target>run_Clustalw</s:target>
    </s:condition>
    <s:action>
      <s:target>Tree_View</s:target>
      <s:statechange>
        <s:from>Scheduled</s:from>
        <s:to>Running</s:to>
      </s:statechange>
    </s:action>
  </s:coordination>
</s:scufl>

