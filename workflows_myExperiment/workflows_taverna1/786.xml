<?xml version="1.0" encoding="UTF-8"?>
<s:scufl xmlns:s="http://org.embl.ebi.escience/xscufl/0.1alpha" version="0.2" log="0">
  <s:workflowdescription lsid="urn:lsid:www.mygrid.org.uk:operation:P81DV9PQW02" author="Paul Fisher" title="NCBI Gi to Kegg Pathways">This workflow gets a series of information relating to a list of KEGG genes supplied to it. It also removes any null values from a list of strings.</s:workflowdescription>
  <s:processor name="regex" boring="true">
    <s:stringconstant>\n</s:stringconstant>
  </s:processor>
  <s:processor name="merge_pathways">
    <s:local>org.embl.ebi.escience.scuflworkers.java.StringListMerge</s:local>
  </s:processor>
  <s:processor name="merge_pathways_2">
    <s:local>org.embl.ebi.escience.scuflworkers.java.StringListMerge</s:local>
  </s:processor>
  <s:processor name="merge_descriptions">
    <s:local>org.embl.ebi.escience.scuflworkers.java.StringListMerge</s:local>
  </s:processor>
  <s:processor name="Remove_duplicate_pathways">
    <s:local>org.embl.ebi.escience.scuflworkers.java.StringStripDuplicates</s:local>
  </s:processor>
  <s:processor name="split_by_regex">
    <s:local>org.embl.ebi.escience.scuflworkers.java.SplitByRegex</s:local>
  </s:processor>
  <s:processor name="btit1">
    <s:arbitrarywsdl>
      <s:wsdl>http://soap.genome.jp/KEGG.wsdl</s:wsdl>
      <s:operation>btit</s:operation>
    </s:arbitrarywsdl>
  </s:processor>
  <s:processor name="get_pathways_by_genes">
    <s:arbitrarywsdl>
      <s:wsdl>http://soap.genome.jp/KEGG.wsdl</s:wsdl>
      <s:operation>get_pathways_by_genes</s:operation>
    </s:arbitrarywsdl>
  </s:processor>
  <s:processor name="btit">
    <s:arbitrarywsdl>
      <s:wsdl>http://soap.genome.jp/KEGG.wsdl</s:wsdl>
      <s:operation>btit</s:operation>
    </s:arbitrarywsdl>
  </s:processor>
  <s:processor name="remove_nulls_2">
    <s:beanshell>
      <s:scriptvalue>String[] split = input.split("\n");
Vector nonEmpty = new Vector();

for (int i = 0; i &lt; split.length; i++){
   if (!(split[i].equals("")))
   {
       nonEmpty.add(split[i].trim());
   }
}

String[] non_empty = new String[nonEmpty.size()];

for (int i = 0; i &lt; non_empty.length; i ++)
{
   non_empty[i] = nonEmpty.elementAt(i);
}

String output = "";

for (int i = 0; i &lt; non_empty.length; i++)
{
	output = output + (String) (non_empty[i] + "\n");
}</s:scriptvalue>
      <s:beanshellinputlist>
        <s:beanshellinput s:syntactictype="'text/plain'">input</s:beanshellinput>
      </s:beanshellinputlist>
      <s:beanshelloutputlist>
        <s:beanshelloutput s:syntactictype="'text/plain'">output</s:beanshelloutput>
      </s:beanshelloutputlist>
      <s:dependencies s:classloader="iteration" />
    </s:beanshell>
  </s:processor>
  <s:processor name="remove_Nulls">
    <s:beanshell>
      <s:scriptvalue>String[] split = input.split("\n");
Vector nonEmpty = new Vector();

for (int i = 0; i &lt; split.length; i++){
   if (!(split[i].equals("")))
   {
       nonEmpty.add(split[i].trim());
   }
}

String[] non_empty = new String[nonEmpty.size()];

for (int i = 0; i &lt; non_empty.length; i ++)
{
   non_empty[i] = nonEmpty.elementAt(i);
}

String output = "";

for (int i = 0; i &lt; non_empty.length; i++)
{
	output = output + (String) (non_empty[i] + "\n");
}</s:scriptvalue>
      <s:beanshellinputlist>
        <s:beanshellinput s:syntactictype="'text/plain'">input</s:beanshellinput>
      </s:beanshellinputlist>
      <s:beanshelloutputlist>
        <s:beanshelloutput s:syntactictype="'text/plain'">output</s:beanshelloutput>
      </s:beanshelloutputlist>
      <s:dependencies s:classloader="iteration" />
    </s:beanshell>
  </s:processor>
  <s:processor name="add_ncbi_to_string">
    <s:beanshell>
      <s:scriptvalue>String[] split = input.split("\n");
Vector nonEmpty = new Vector();

for (int i = 0; i &lt; split.length; i++) 
{		
	String trimmed = split[i].trim();
	nonEmpty.add(trimmed);	
}

String output = "";

for (int i = 0; i &lt; nonEmpty.size(); i++)
{
	output = output + "ncbi-gi:" + (String) (nonEmpty.elementAt(i) + "\n");
}</s:scriptvalue>
      <s:beanshellinputlist>
        <s:beanshellinput s:syntactictype="'text/plain'">input</s:beanshellinput>
      </s:beanshellinputlist>
      <s:beanshelloutputlist>
        <s:beanshelloutput s:syntactictype="'text/plain'">output</s:beanshelloutput>
      </s:beanshelloutputlist>
      <s:dependencies s:classloader="iteration" />
    </s:beanshell>
  </s:processor>
  <s:processor name="extract_gene_ids">
    <s:beanshell>
      <s:scriptvalue>String[] split = input.split("\n");
Vector nonEmpty = new Vector();

for (int i = 0; i &lt; split.length; i++) 
{		
	String trimmed = split[i].trim();
	String[] trimmedSplit = trimmed.split("\t");
	if (trimmedSplit.length &gt; 2)
	{
	    nonEmpty.add(trimmedSplit[1].trim());	
	}
}

String output = "";

for (int i = 0; i &lt; nonEmpty.size(); i++)
{
	output = output + (String) (nonEmpty.elementAt(i) + "\n");
}</s:scriptvalue>
      <s:beanshellinputlist>
        <s:beanshellinput s:syntactictype="'text/plain'">input</s:beanshellinput>
      </s:beanshellinputlist>
      <s:beanshelloutputlist>
        <s:beanshelloutput s:syntactictype="'text/plain'">output</s:beanshelloutput>
      </s:beanshelloutputlist>
      <s:dependencies s:classloader="iteration" />
    </s:beanshell>
  </s:processor>
  <s:processor name="bconv">
    <s:arbitrarywsdl>
      <s:wsdl>http://soap.genome.jp/KEGG.wsdl</s:wsdl>
      <s:operation>bconv</s:operation>
    </s:arbitrarywsdl>
  </s:processor>
  <s:link source="Gi_numbers" sink="add_ncbi_to_string:input" />
  <s:link source="Remove_duplicate_pathways:strippedlist" sink="merge_pathways_2:stringlist" />
  <s:link source="add_ncbi_to_string:output" sink="bconv:string" />
  <s:link source="bconv:return" sink="extract_gene_ids:input" />
  <s:link source="btit:return" sink="merge_descriptions:stringlist" />
  <s:link source="extract_gene_ids:output" sink="btit:string" />
  <s:link source="extract_gene_ids:output" sink="split_by_regex:string" />
  <s:link source="add_ncbi_to_string:output" sink="Kegg_strings" />
  <s:link source="get_pathways_by_genes:return" sink="merge_pathways:stringlist" />
  <s:link source="merge_descriptions:concatenated" sink="remove_Nulls:input" />
  <s:link source="merge_pathways:concatenated" sink="Remove_duplicate_pathways:stringlist" />
  <s:link source="merge_pathways:concatenated" sink="btit1:string" />
  <s:link source="merge_pathways_2:concatenated" sink="remove_nulls_2:input" />
  <s:link source="regex:value" sink="split_by_regex:regex" />
  <s:link source="btit1:return" sink="pathway_descriptions" />
  <s:link source="remove_Nulls:output" sink="gene_descriptions" />
  <s:link source="remove_nulls_2:output" sink="pathway_by_genes" />
  <s:link source="split_by_regex:split" sink="get_pathways_by_genes:genes_id_list" />
  <s:source name="Gi_numbers" />
  <s:sink name="gene_descriptions" />
  <s:sink name="pathway_by_genes" />
  <s:sink name="pathway_descriptions" />
  <s:sink name="Kegg_strings" />
</s:scufl>

