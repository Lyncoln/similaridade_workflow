<workflow xmlns="http://taverna.sf.net/2008/xml/t2flow" version="1" producedBy="taverna-2.1.0"><dataflow id="54b9d997-3b95-4c57-b265-a0cf8bd76992" role="top"><name>SBML_model_parameterisation</name><inputPorts><port><name>sbml</name><depth>0</depth><granularDepth>0</granularDepth><annotations><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.FreeTextDescription">
        <text>A qualitative SBML model generated by workflow 1</text>
      </annotationBean>
      <date>2010-03-25 17:13:54.158 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.ExampleValue">
        <text>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;sbml xmlns="http://www.sbml.org/sbml/level2/version3" level="2" version="3"&gt;
  &lt;model id="Taverna1" name="Test model"&gt;
    &lt;listOfUnitDefinitions&gt;
      &lt;unitDefinition id="U/mg" name="U/mg"&gt;
        &lt;listOfUnits&gt;
          &lt;unit kind="katal" scale="-9" multiplier="16.6669998168945"/&gt;
          &lt;unit kind="gram" exponent="-1" scale="-3"/&gt;
        &lt;/listOfUnits&gt;
      &lt;/unitDefinition&gt;
      &lt;unitDefinition id="U/ml" name="U/ml"&gt;
        &lt;listOfUnits&gt;
          &lt;unit kind="katal" scale="-9" multiplier="16.6669998168945"/&gt;
          &lt;unit kind="litre" exponent="-1" scale="-3"/&gt;
        &lt;/listOfUnits&gt;
      &lt;/unitDefinition&gt;
      &lt;unitDefinition id="mM" name="millimolar"&gt;
        &lt;listOfUnits&gt;
          &lt;unit kind="litre" exponent="-1"/&gt;
          &lt;unit kind="mole" scale="-3"/&gt;
        &lt;/listOfUnits&gt;
      &lt;/unitDefinition&gt;
      &lt;unitDefinition id="micromolar" name="micromolar"&gt;
        &lt;listOfUnits&gt;
          &lt;unit kind="litre" exponent="-1"/&gt;
          &lt;unit kind="mole" scale="-6"/&gt;
        &lt;/listOfUnits&gt;
      &lt;/unitDefinition&gt;
      &lt;unitDefinition id="per_second" name="per_second"&gt;
        &lt;listOfUnits&gt;
          &lt;unit kind="second" exponent="-1"/&gt;
        &lt;/listOfUnits&gt;
      &lt;/unitDefinition&gt;
    &lt;/listOfUnitDefinitions&gt;
    &lt;listOfCompartments&gt;
      &lt;compartment metaid="meta_C_1" id="C_1" name="Cytoplasm" size="1" outside="C_10" sboTerm="SBO:0000290"&gt;
        &lt;annotation&gt;
          &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:vCard="http://www.w3.org/2001/vcard-rdf/3.0#" xmlns:bqbiol="http://biomodels.net/biology-qualifiers/" xmlns:bqmodel="http://biomodels.net/model-qualifiers/"&gt;
            &lt;rdf:Description rdf:about="#meta_C_1"&gt;
              &lt;bqbiol:is&gt;
                &lt;rdf:Bag&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:obo.go:GO:0005737"/&gt;
                &lt;/rdf:Bag&gt;
              &lt;/bqbiol:is&gt;
            &lt;/rdf:Description&gt;
          &lt;/rdf:RDF&gt;
        &lt;/annotation&gt;
      &lt;/compartment&gt;
      &lt;compartment metaid="meta_C_10" id="C_10" name="Plasma membrane" size="1" outside="C_2" sboTerm="SBO:0000290"&gt;
        &lt;annotation&gt;
          &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:vCard="http://www.w3.org/2001/vcard-rdf/3.0#" xmlns:bqbiol="http://biomodels.net/biology-qualifiers/" xmlns:bqmodel="http://biomodels.net/model-qualifiers/"&gt;
            &lt;rdf:Description rdf:about="#meta_C_10"&gt;
              &lt;bqbiol:is&gt;
                &lt;rdf:Bag&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:obo.go:GO:0005886"/&gt;
                &lt;/rdf:Bag&gt;
              &lt;/bqbiol:is&gt;
            &lt;/rdf:Description&gt;
          &lt;/rdf:RDF&gt;
        &lt;/annotation&gt;
      &lt;/compartment&gt;
      &lt;compartment metaid="meta_C_2" id="C_2" name="Extracellular" size="1" sboTerm="SBO:0000290"&gt;
        &lt;annotation&gt;
          &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:vCard="http://www.w3.org/2001/vcard-rdf/3.0#" xmlns:bqbiol="http://biomodels.net/biology-qualifiers/" xmlns:bqmodel="http://biomodels.net/model-qualifiers/"&gt;
            &lt;rdf:Description rdf:about="#meta_C_2"&gt;
              &lt;bqbiol:is&gt;
                &lt;rdf:Bag&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:obo.go:GO:0005576"/&gt;
                &lt;/rdf:Bag&gt;
              &lt;/bqbiol:is&gt;
            &lt;/rdf:Description&gt;
          &lt;/rdf:RDF&gt;
        &lt;/annotation&gt;
      &lt;/compartment&gt;
    &lt;/listOfCompartments&gt;
    &lt;listOfSpecies&gt;
      &lt;species metaid="meta_M_276" id="M_276" name="D-Fructose 1,6-bisphosphate" compartment="C_1" initialConcentration="0" sboTerm="SBO:0000299"&gt;
        &lt;annotation&gt;
          &lt;in:inchi xmlns:in="http://biomodels.net/inchi" metaid="meta_M_276_inchi"&gt;InChI=1/C6H14O12P2/c7-3(1-17-19(11,12)13)5(9)6(10)4(8)2-18-20(14,15)16/h3,5-7,9-10H,1-2H2,(H2,11,12,13)(H2,14,15,16)/t3-,5-,6-/m1/s1&lt;/in:inchi&gt;
          &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:vCard="http://www.w3.org/2001/vcard-rdf/3.0#" xmlns:bqbiol="http://biomodels.net/biology-qualifiers/" xmlns:bqmodel="http://biomodels.net/model-qualifiers/"&gt;
            &lt;rdf:Description rdf:about="#meta_M_276"&gt;
              &lt;bqbiol:is&gt;
                &lt;rdf:Bag&gt;
                  &lt;rdf:li rdf:resource="#meta_M_276"/&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:obo.chebi:CHEBI:16905"/&gt;
                &lt;/rdf:Bag&gt;
              &lt;/bqbiol:is&gt;
            &lt;/rdf:Description&gt;
          &lt;/rdf:RDF&gt;
        &lt;/annotation&gt;
      &lt;/species&gt;
      &lt;species metaid="meta_M_172" id="M_172" name="ATP" compartment="C_1" initialConcentration="3.5" sboTerm="SBO:0000299"&gt;
        &lt;annotation&gt;
          &lt;in:inchi xmlns:in="http://biomodels.net/inchi" metaid="meta_M_172_inchi"&gt;InChI=1/C10H16N5O13P3/c11-8-5-9(13-2-12-8)15(3-14-5)10-7(17)6(16)4(26-10)1-25-30(21,22)28-31(23,24)27-29(18,19)20/h2-4,6-7,10,16-17H,1H2,(H,21,22)(H,23,24)(H2,11,12,13)(H2,18,19,20)/t4-,6-,7-,10-/m1/s1/f/h18-19,21,23H,11H2&lt;/in:inchi&gt;
          &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:vCard="http://www.w3.org/2001/vcard-rdf/3.0#" xmlns:bqbiol="http://biomodels.net/biology-qualifiers/" xmlns:bqmodel="http://biomodels.net/model-qualifiers/"&gt;
            &lt;rdf:Description rdf:about="#meta_M_172"&gt;
              &lt;bqbiol:is&gt;
                &lt;rdf:Bag&gt;
                  &lt;rdf:li rdf:resource="#meta_M_172"/&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:obo.chebi:CHEBI:15422"/&gt;
                &lt;/rdf:Bag&gt;
              &lt;/bqbiol:is&gt;
            &lt;/rdf:Description&gt;
          &lt;/rdf:RDF&gt;
        &lt;/annotation&gt;
      &lt;/species&gt;
      &lt;species metaid="meta_M_273" id="M_273" name="D-Fructose 6-phosphate" compartment="C_1" initialConcentration="0" sboTerm="SBO:0000299"&gt;
        &lt;annotation&gt;
          &lt;in:inchi xmlns:in="http://biomodels.net/inchi" metaid="meta_M_273_inchi"&gt;InChI=1/C6H13O9P/c7-1-3(8)5(10)6(11)4(9)2-15-16(12,13)14/h4-7,9-11H,1-2H2,(H2,12,13,14)/t4-,5-,6-/m1/s1&lt;/in:inchi&gt;
          &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:vCard="http://www.w3.org/2001/vcard-rdf/3.0#" xmlns:bqbiol="http://biomodels.net/biology-qualifiers/" xmlns:bqmodel="http://biomodels.net/model-qualifiers/"&gt;
            &lt;rdf:Description rdf:about="#meta_M_273"&gt;
              &lt;bqbiol:is&gt;
                &lt;rdf:Bag&gt;
                  &lt;rdf:li rdf:resource="#meta_M_273"/&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:obo.chebi:CHEBI:15946"/&gt;
                &lt;/rdf:Bag&gt;
              &lt;/bqbiol:is&gt;
            &lt;/rdf:Description&gt;
          &lt;/rdf:RDF&gt;
        &lt;/annotation&gt;
      &lt;/species&gt;
      &lt;species metaid="meta_M_292" id="M_292" name="D-Glucose 6-phosphate" compartment="C_1" initialConcentration="0" sboTerm="SBO:0000299"&gt;
        &lt;annotation&gt;
          &lt;in:inchi xmlns:in="http://biomodels.net/inchi" metaid="meta_M_292_inchi"&gt;InChI=1/C6H13O9P/c7-1-3(8)5(10)6(11)4(9)2-15-16(12,13)14/h1,3-6,8-11H,2H2,(H2,12,13,14)/t3-,4+,5+,6+/m0/s1&lt;/in:inchi&gt;
          &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:vCard="http://www.w3.org/2001/vcard-rdf/3.0#" xmlns:bqbiol="http://biomodels.net/biology-qualifiers/" xmlns:bqmodel="http://biomodels.net/model-qualifiers/"&gt;
            &lt;rdf:Description rdf:about="#meta_M_292"&gt;
              &lt;bqbiol:is&gt;
                &lt;rdf:Bag&gt;
                  &lt;rdf:li rdf:resource="#meta_M_292"/&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:obo.chebi:CHEBI:15954"/&gt;
                &lt;/rdf:Bag&gt;
              &lt;/bqbiol:is&gt;
            &lt;/rdf:Description&gt;
          &lt;/rdf:RDF&gt;
        &lt;/annotation&gt;
      &lt;/species&gt;
      &lt;species metaid="meta_M_4" id="M_4" name="3-Phospho-D-glyceroyl phosphate" compartment="C_1" initialConcentration="0" sboTerm="SBO:0000299"&gt;
        &lt;annotation&gt;
          &lt;in:inchi xmlns:in="http://biomodels.net/inchi" metaid="meta_M_4_inchi"&gt;InChI=1/C3H8O10P2/c4-2(1-12-14(6,7)8)3(5)13-15(9,10)11/h2,4H,1H2,(H2,6,7,8)(H2,9,10,11)/t2-/m1/s1&lt;/in:inchi&gt;
          &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:vCard="http://www.w3.org/2001/vcard-rdf/3.0#" xmlns:bqbiol="http://biomodels.net/biology-qualifiers/" xmlns:bqmodel="http://biomodels.net/model-qualifiers/"&gt;
            &lt;rdf:Description rdf:about="#meta_M_4"&gt;
              &lt;bqbiol:is&gt;
                &lt;rdf:Bag&gt;
                  &lt;rdf:li rdf:resource="#meta_M_4"/&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:obo.chebi:CHEBI:16001"/&gt;
                &lt;/rdf:Bag&gt;
              &lt;/bqbiol:is&gt;
            &lt;/rdf:Description&gt;
          &lt;/rdf:RDF&gt;
        &lt;/annotation&gt;
      &lt;/species&gt;
      &lt;species metaid="meta_M_135" id="M_135" name="ADP" compartment="C_1" initialConcentration="0" sboTerm="SBO:0000299"&gt;
        &lt;annotation&gt;
          &lt;in:inchi xmlns:in="http://biomodels.net/inchi" metaid="meta_M_135_inchi"&gt;InChI=1/C10H15N5O10P2/c11-8-5-9(13-2-12-8)15(3-14-5)10-7(17)6(16)4(24-10)1-23-27(21,22)25-26(18,19)20/h2-4,6-7,10,16-17H,1H2,(H,21,22)(H2,11,12,13)(H2,18,19,20)/t4-,6-,7-,10-/m1/s1/f/h18-19,21H,11H2&lt;/in:inchi&gt;
          &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:vCard="http://www.w3.org/2001/vcard-rdf/3.0#" xmlns:bqbiol="http://biomodels.net/biology-qualifiers/" xmlns:bqmodel="http://biomodels.net/model-qualifiers/"&gt;
            &lt;rdf:Description rdf:about="#meta_M_135"&gt;
              &lt;bqbiol:is&gt;
                &lt;rdf:Bag&gt;
                  &lt;rdf:li rdf:resource="#meta_M_135"/&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:obo.chebi:CHEBI:16761"/&gt;
                &lt;/rdf:Bag&gt;
              &lt;/bqbiol:is&gt;
            &lt;/rdf:Description&gt;
          &lt;/rdf:RDF&gt;
        &lt;/annotation&gt;
      &lt;/species&gt;
      &lt;species metaid="meta_M_36" id="M_36" name="D-Glycerate 2-phosphate" compartment="C_1" initialConcentration="0" sboTerm="SBO:0000299"&gt;
        &lt;annotation&gt;
          &lt;in:inchi xmlns:in="http://biomodels.net/inchi" metaid="meta_M_36_inchi"&gt;InChI=1/C3H7O7P/c4-1-2(3(5)6)10-11(7,8)9/h2,4H,1H2,(H,5,6)(H2,7,8,9)/t2-/m1/s1&lt;/in:inchi&gt;
          &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:vCard="http://www.w3.org/2001/vcard-rdf/3.0#" xmlns:bqbiol="http://biomodels.net/biology-qualifiers/" xmlns:bqmodel="http://biomodels.net/model-qualifiers/"&gt;
            &lt;rdf:Description rdf:about="#meta_M_36"&gt;
              &lt;bqbiol:is&gt;
                &lt;rdf:Bag&gt;
                  &lt;rdf:li rdf:resource="#meta_M_36"/&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:obo.chebi:CHEBI:17835"/&gt;
                &lt;/rdf:Bag&gt;
              &lt;/bqbiol:is&gt;
            &lt;/rdf:Description&gt;
          &lt;/rdf:RDF&gt;
        &lt;/annotation&gt;
      &lt;/species&gt;
      &lt;species metaid="meta_M_289" id="M_289" name="Glyceraldehyde 3-phosphate" compartment="C_1" initialConcentration="0" sboTerm="SBO:0000299"&gt;
        &lt;annotation&gt;
          &lt;in:inchi xmlns:in="http://biomodels.net/inchi" metaid="meta_M_289_inchi"&gt;InChI=1/C3H7O6P/c4-1-3(5)2-9-10(6,7)8/h1,3,5H,2H2,(H2,6,7,8)&lt;/in:inchi&gt;
          &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:vCard="http://www.w3.org/2001/vcard-rdf/3.0#" xmlns:bqbiol="http://biomodels.net/biology-qualifiers/" xmlns:bqmodel="http://biomodels.net/model-qualifiers/"&gt;
            &lt;rdf:Description rdf:about="#meta_M_289"&gt;
              &lt;bqbiol:is&gt;
                &lt;rdf:Bag&gt;
                  &lt;rdf:li rdf:resource="#meta_M_289"/&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:obo.chebi:CHEBI:29052"/&gt;
                &lt;/rdf:Bag&gt;
              &lt;/bqbiol:is&gt;
            &lt;/rdf:Description&gt;
          &lt;/rdf:RDF&gt;
        &lt;/annotation&gt;
      &lt;/species&gt;
      &lt;species metaid="meta_M_411" id="M_411" name="Nicotinamide adenine dinucleotide" compartment="C_1" initialConcentration="4" sboTerm="SBO:0000299"&gt;
        &lt;annotation&gt;
          &lt;in:inchi xmlns:in="http://biomodels.net/inchi" metaid="meta_M_411_inchi"&gt;InChI=1/C21H27N7O14P2/c22-17-12-19(25-7-24-17)28(8-26-12)21-16(32)14(30)11(41-21)6-39-44(36,37)42-43(34,35)38-5-10-13(29)15(31)20(40-10)27-3-1-2-9(4-27)18(23)33/h1-4,7-8,10-11,13-16,20-21,29-32H,5-6H2,(H5-,22,23,24,25,33,34,35,36,37)/p+1/t10-,11-,13-,14-,15-,16-,20-,21-/m1/s1/fC21H28N7O14P2/h34,36H,22-23H2/q+1&lt;/in:inchi&gt;
          &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:vCard="http://www.w3.org/2001/vcard-rdf/3.0#" xmlns:bqbiol="http://biomodels.net/biology-qualifiers/" xmlns:bqmodel="http://biomodels.net/model-qualifiers/"&gt;
            &lt;rdf:Description rdf:about="#meta_M_411"&gt;
              &lt;bqbiol:is&gt;
                &lt;rdf:Bag&gt;
                  &lt;rdf:li rdf:resource="#meta_M_411"/&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:obo.chebi:CHEBI:15846"/&gt;
                &lt;/rdf:Bag&gt;
              &lt;/bqbiol:is&gt;
            &lt;/rdf:Description&gt;
          &lt;/rdf:RDF&gt;
        &lt;/annotation&gt;
      &lt;/species&gt;
      &lt;species metaid="meta_M_454" id="M_454" name="Phosphate" compartment="C_1" initialConcentration="4" sboTerm="SBO:0000299"&gt;
        &lt;annotation&gt;
          &lt;in:inchi xmlns:in="http://biomodels.net/inchi" metaid="meta_M_454_inchi"&gt;InChI=1/H3O4P/c1-5(2,3)4/h(H3,1,2,3,4)/p-3/fO4P/q-3&lt;/in:inchi&gt;
          &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:vCard="http://www.w3.org/2001/vcard-rdf/3.0#" xmlns:bqbiol="http://biomodels.net/biology-qualifiers/" xmlns:bqmodel="http://biomodels.net/model-qualifiers/"&gt;
            &lt;rdf:Description rdf:about="#meta_M_454"&gt;
              &lt;bqbiol:is&gt;
                &lt;rdf:Bag&gt;
                  &lt;rdf:li rdf:resource="#meta_M_454"/&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:obo.chebi:CHEBI:18367"/&gt;
                &lt;/rdf:Bag&gt;
              &lt;/bqbiol:is&gt;
            &lt;/rdf:Description&gt;
          &lt;/rdf:RDF&gt;
        &lt;/annotation&gt;
      &lt;/species&gt;
      &lt;species metaid="meta_M_304" id="M_304" name="D-Glucose" compartment="C_1" initialConcentration="50" sboTerm="SBO:0000299"&gt;
        &lt;annotation&gt;
          &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:vCard="http://www.w3.org/2001/vcard-rdf/3.0#" xmlns:bqbiol="http://biomodels.net/biology-qualifiers/" xmlns:bqmodel="http://biomodels.net/model-qualifiers/"&gt;
            &lt;rdf:Description rdf:about="#meta_M_304"&gt;
              &lt;bqbiol:is&gt;
                &lt;rdf:Bag&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:obo.chebi:CHEBI:17634"/&gt;
                &lt;/rdf:Bag&gt;
              &lt;/bqbiol:is&gt;
            &lt;/rdf:Description&gt;
          &lt;/rdf:RDF&gt;
        &lt;/annotation&gt;
      &lt;/species&gt;
      &lt;species metaid="meta_M_57" id="M_57" name="3-Phospho-D-glycerate" compartment="C_1" initialConcentration="0" sboTerm="SBO:0000299"&gt;
        &lt;annotation&gt;
          &lt;in:inchi xmlns:in="http://biomodels.net/inchi" metaid="meta_M_57_inchi"&gt;InChI=1/C3H7O7P/c4-2(3(5)6)1-10-11(7,8)9/h2,4H,1H2,(H,5,6)(H2,7,8,9)/t2-/m1/s1&lt;/in:inchi&gt;
          &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:vCard="http://www.w3.org/2001/vcard-rdf/3.0#" xmlns:bqbiol="http://biomodels.net/biology-qualifiers/" xmlns:bqmodel="http://biomodels.net/model-qualifiers/"&gt;
            &lt;rdf:Description rdf:about="#meta_M_57"&gt;
              &lt;bqbiol:is&gt;
                &lt;rdf:Bag&gt;
                  &lt;rdf:li rdf:resource="#meta_M_57"/&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:obo.chebi:CHEBI:17794"/&gt;
                &lt;/rdf:Bag&gt;
              &lt;/bqbiol:is&gt;
            &lt;/rdf:Description&gt;
          &lt;/rdf:RDF&gt;
        &lt;/annotation&gt;
      &lt;/species&gt;
      &lt;species metaid="meta_M_329" id="M_329" name="H+" compartment="C_1" initialConcentration="4" sboTerm="SBO:0000299"&gt;
        &lt;annotation&gt;
          &lt;in:inchi xmlns:in="http://biomodels.net/inchi" metaid="meta_M_329_inchi"&gt;InChI=1/p+1/fH/q+1&lt;/in:inchi&gt;
          &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:vCard="http://www.w3.org/2001/vcard-rdf/3.0#" xmlns:bqbiol="http://biomodels.net/biology-qualifiers/" xmlns:bqmodel="http://biomodels.net/model-qualifiers/"&gt;
            &lt;rdf:Description rdf:about="#meta_M_329"&gt;
              &lt;bqbiol:is&gt;
                &lt;rdf:Bag&gt;
                  &lt;rdf:li rdf:resource="#meta_M_329"/&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:obo.chebi:CHEBI:15378"/&gt;
                &lt;/rdf:Bag&gt;
              &lt;/bqbiol:is&gt;
            &lt;/rdf:Description&gt;
          &lt;/rdf:RDF&gt;
        &lt;/annotation&gt;
      &lt;/species&gt;
      &lt;species metaid="meta_M_446" id="M_446" name="Phosphoenolpyruvate" compartment="C_1" initialConcentration="0" sboTerm="SBO:0000299"&gt;
        &lt;annotation&gt;
          &lt;in:inchi xmlns:in="http://biomodels.net/inchi" metaid="meta_M_446_inchi"&gt;InChI=1/C3H5O6P/c1-2(3(4)5)9-10(6,7)8/h1H2,(H,4,5)(H2,6,7,8)/p-1&lt;/in:inchi&gt;
          &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:vCard="http://www.w3.org/2001/vcard-rdf/3.0#" xmlns:bqbiol="http://biomodels.net/biology-qualifiers/" xmlns:bqmodel="http://biomodels.net/model-qualifiers/"&gt;
            &lt;rdf:Description rdf:about="#meta_M_446"&gt;
              &lt;bqbiol:is&gt;
                &lt;rdf:Bag&gt;
                  &lt;rdf:li rdf:resource="#meta_M_446"/&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:obo.chebi:CHEBI:18021"/&gt;
                &lt;/rdf:Bag&gt;
              &lt;/bqbiol:is&gt;
            &lt;/rdf:Description&gt;
          &lt;/rdf:RDF&gt;
        &lt;/annotation&gt;
      &lt;/species&gt;
      &lt;species metaid="meta_M_483" id="M_483" name="Pyruvate" compartment="C_1" initialConcentration="0" sboTerm="SBO:0000299"&gt;
        &lt;annotation&gt;
          &lt;in:inchi xmlns:in="http://biomodels.net/inchi" metaid="meta_M_483_inchi"&gt;InChI=1/C3H4O3/c1-2(4)3(5)6/h1H3,(H,5,6)/p-1/fC3H3O3/q-1&lt;/in:inchi&gt;
          &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:vCard="http://www.w3.org/2001/vcard-rdf/3.0#" xmlns:bqbiol="http://biomodels.net/biology-qualifiers/" xmlns:bqmodel="http://biomodels.net/model-qualifiers/"&gt;
            &lt;rdf:Description rdf:about="#meta_M_483"&gt;
              &lt;bqbiol:is&gt;
                &lt;rdf:Bag&gt;
                  &lt;rdf:li rdf:resource="#meta_M_483"/&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:obo.chebi:CHEBI:15361"/&gt;
                &lt;/rdf:Bag&gt;
              &lt;/bqbiol:is&gt;
            &lt;/rdf:Description&gt;
          &lt;/rdf:RDF&gt;
        &lt;/annotation&gt;
      &lt;/species&gt;
      &lt;species metaid="meta_M_234" id="M_234" name="Dihydroxyacetone phosphate" compartment="C_1" initialConcentration="0" sboTerm="SBO:0000299"&gt;
        &lt;annotation&gt;
          &lt;in:inchi xmlns:in="http://biomodels.net/inchi" metaid="meta_M_234_inchi"&gt;InChI=1/C3H7O6P/c4-1-3(5)2-9-10(6,7)8/h4H,1-2H2,(H2,6,7,8)/f/h6-7H&lt;/in:inchi&gt;
          &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:vCard="http://www.w3.org/2001/vcard-rdf/3.0#" xmlns:bqbiol="http://biomodels.net/biology-qualifiers/" xmlns:bqmodel="http://biomodels.net/model-qualifiers/"&gt;
            &lt;rdf:Description rdf:about="#meta_M_234"&gt;
              &lt;bqbiol:is&gt;
                &lt;rdf:Bag&gt;
                  &lt;rdf:li rdf:resource="#meta_M_234"/&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:obo.chebi:CHEBI:16108"/&gt;
                &lt;/rdf:Bag&gt;
              &lt;/bqbiol:is&gt;
            &lt;/rdf:Description&gt;
          &lt;/rdf:RDF&gt;
        &lt;/annotation&gt;
      &lt;/species&gt;
      &lt;species metaid="meta_M_330" id="M_330" name="H2O" compartment="C_1" initialConcentration="0" sboTerm="SBO:0000299"&gt;
        &lt;annotation&gt;
          &lt;in:inchi xmlns:in="http://biomodels.net/inchi" metaid="meta_M_330_inchi"&gt;InChI=1/H2O/h1H2&lt;/in:inchi&gt;
          &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:vCard="http://www.w3.org/2001/vcard-rdf/3.0#" xmlns:bqbiol="http://biomodels.net/biology-qualifiers/" xmlns:bqmodel="http://biomodels.net/model-qualifiers/"&gt;
            &lt;rdf:Description rdf:about="#meta_M_330"&gt;
              &lt;bqbiol:is&gt;
                &lt;rdf:Bag&gt;
                  &lt;rdf:li rdf:resource="#meta_M_330"/&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:obo.chebi:CHEBI:15377"/&gt;
                &lt;/rdf:Bag&gt;
              &lt;/bqbiol:is&gt;
            &lt;/rdf:Description&gt;
          &lt;/rdf:RDF&gt;
        &lt;/annotation&gt;
      &lt;/species&gt;
      &lt;species metaid="meta_M_412" id="M_412" name="Nicotinamide adenine dinucleotide - reduced" compartment="C_1" initialConcentration="0" sboTerm="SBO:0000299"&gt;
        &lt;annotation&gt;
          &lt;in:inchi xmlns:in="http://biomodels.net/inchi" metaid="meta_M_412_inchi"&gt;InChI=1/C21H29N7O14P2/c22-17-12-19(25-7-24-17)28(8-26-12)21-16(32)14(30)11(41-21)6-39-44(36,37)42-43(34,35)38-5-10-13(29)15(31)20(40-10)27-3-1-2-9(4-27)18(23)33/h1,3-4,7-8,10-11,13-16,20-21,29-32H,2,5-6H2,(H2,23,33)(H,34,35)(H,36,37)(H2,22,24,25)/t10-,11-,13-,14-,15-,16-,20-,21-/m1/s1/f/h34,36H,22-23H2&lt;/in:inchi&gt;
          &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:vCard="http://www.w3.org/2001/vcard-rdf/3.0#" xmlns:bqbiol="http://biomodels.net/biology-qualifiers/" xmlns:bqmodel="http://biomodels.net/model-qualifiers/"&gt;
            &lt;rdf:Description rdf:about="#meta_M_412"&gt;
              &lt;bqbiol:is&gt;
                &lt;rdf:Bag&gt;
                  &lt;rdf:li rdf:resource="#meta_M_412"/&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:obo.chebi:CHEBI:16908"/&gt;
                &lt;/rdf:Bag&gt;
              &lt;/bqbiol:is&gt;
            &lt;/rdf:Description&gt;
          &lt;/rdf:RDF&gt;
        &lt;/annotation&gt;
      &lt;/species&gt;
      &lt;species metaid="meta_M_121" id="M_121" name="Acetaldehyde" compartment="C_1" initialConcentration="0" sboTerm="SBO:0000299"&gt;
        &lt;annotation&gt;
          &lt;in:inchi xmlns:in="http://biomodels.net/inchi" metaid="meta_M_121_inchi"&gt;InChI=1/C2H4O/c1-2-3/h2H,1H3&lt;/in:inchi&gt;
          &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:vCard="http://www.w3.org/2001/vcard-rdf/3.0#" xmlns:bqbiol="http://biomodels.net/biology-qualifiers/" xmlns:bqmodel="http://biomodels.net/model-qualifiers/"&gt;
            &lt;rdf:Description rdf:about="#meta_M_121"&gt;
              &lt;bqbiol:is&gt;
                &lt;rdf:Bag&gt;
                  &lt;rdf:li rdf:resource="#meta_M_121"/&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:obo.chebi:CHEBI:15343"/&gt;
                &lt;/rdf:Bag&gt;
              &lt;/bqbiol:is&gt;
            &lt;/rdf:Description&gt;
          &lt;/rdf:RDF&gt;
        &lt;/annotation&gt;
      &lt;/species&gt;
      &lt;species metaid="meta_M_203" id="M_203" name="CO2" compartment="C_1" initialConcentration="0" sboTerm="SBO:0000299"&gt;
        &lt;annotation&gt;
          &lt;in:inchi xmlns:in="http://biomodels.net/inchi" metaid="meta_M_203_inchi"&gt;InChI=1/CO2/c2-1-3&lt;/in:inchi&gt;
          &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:vCard="http://www.w3.org/2001/vcard-rdf/3.0#" xmlns:bqbiol="http://biomodels.net/biology-qualifiers/" xmlns:bqmodel="http://biomodels.net/model-qualifiers/"&gt;
            &lt;rdf:Description rdf:about="#meta_M_203"&gt;
              &lt;bqbiol:is&gt;
                &lt;rdf:Bag&gt;
                  &lt;rdf:li rdf:resource="#meta_M_203"/&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:obo.chebi:CHEBI:16526"/&gt;
                &lt;/rdf:Bag&gt;
              &lt;/bqbiol:is&gt;
            &lt;/rdf:Description&gt;
          &lt;/rdf:RDF&gt;
        &lt;/annotation&gt;
      &lt;/species&gt;
      &lt;species metaid="meta_E_375" id="E_375" name="YKL060C" compartment="C_1" initialConcentration="0.189150466680615" sboTerm="SBO:0000014"&gt;
        &lt;annotation&gt;
          &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:vCard="http://www.w3.org/2001/vcard-rdf/3.0#" xmlns:bqbiol="http://biomodels.net/biology-qualifiers/" xmlns:bqmodel="http://biomodels.net/model-qualifiers/"&gt;
            &lt;rdf:Description rdf:about="#meta_E_375"&gt;
              &lt;bqbiol:is&gt;
                &lt;rdf:Bag&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:sgd:S000001543"/&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:uniprot:P14540"/&gt;
                &lt;/rdf:Bag&gt;
              &lt;/bqbiol:is&gt;
            &lt;/rdf:Description&gt;
          &lt;/rdf:RDF&gt;
        &lt;/annotation&gt;
      &lt;/species&gt;
      &lt;species metaid="meta_Cx_40" id="Cx_40" name="YGR240C:YMR205C" compartment="C_1" initialConcentration="0.00337856838202656" sboTerm="SBO:0000297"&gt;
        &lt;annotation&gt;
          &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:vCard="http://www.w3.org/2001/vcard-rdf/3.0#" xmlns:bqbiol="http://biomodels.net/biology-qualifiers/" xmlns:bqmodel="http://biomodels.net/model-qualifiers/"&gt;
            &lt;rdf:Description rdf:about="#meta_Cx_40"&gt;
              &lt;bqbiol:is&gt;
                &lt;rdf:Bag&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:uniprot:P16861"/&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:uniprot:P16862"/&gt;
                &lt;/rdf:Bag&gt;
              &lt;/bqbiol:is&gt;
            &lt;/rdf:Description&gt;
          &lt;/rdf:RDF&gt;
        &lt;/annotation&gt;
      &lt;/species&gt;
      &lt;species metaid="meta_E_417" id="E_417" name="YBR196C" compartment="C_1" initialConcentration="0.0110396686481593" sboTerm="SBO:0000014"&gt;
        &lt;annotation&gt;
          &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:vCard="http://www.w3.org/2001/vcard-rdf/3.0#" xmlns:bqbiol="http://biomodels.net/biology-qualifiers/" xmlns:bqmodel="http://biomodels.net/model-qualifiers/"&gt;
            &lt;rdf:Description rdf:about="#meta_E_417"&gt;
              &lt;bqbiol:is&gt;
                &lt;rdf:Bag&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:sgd:S000000400"/&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:uniprot:P12709"/&gt;
                &lt;/rdf:Bag&gt;
              &lt;/bqbiol:is&gt;
            &lt;/rdf:Description&gt;
          &lt;/rdf:RDF&gt;
        &lt;/annotation&gt;
      &lt;/species&gt;
      &lt;species metaid="meta_E_670" id="E_670" name="YCR012W" compartment="C_1" initialConcentration="0.055110250684886" sboTerm="SBO:0000014"&gt;
        &lt;annotation&gt;
          &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:vCard="http://www.w3.org/2001/vcard-rdf/3.0#" xmlns:bqbiol="http://biomodels.net/biology-qualifiers/" xmlns:bqmodel="http://biomodels.net/model-qualifiers/"&gt;
            &lt;rdf:Description rdf:about="#meta_E_670"&gt;
              &lt;bqbiol:is&gt;
                &lt;rdf:Bag&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:sgd:S000000605"/&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:uniprot:P00560"/&gt;
                &lt;/rdf:Bag&gt;
              &lt;/bqbiol:is&gt;
            &lt;/rdf:Description&gt;
          &lt;/rdf:RDF&gt;
        &lt;/annotation&gt;
      &lt;/species&gt;
      &lt;species metaid="meta_E_352" id="E_352" name="YGR254W" compartment="C_1" initialConcentration="0.0925997002145096" sboTerm="SBO:0000014"&gt;
        &lt;annotation&gt;
          &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:vCard="http://www.w3.org/2001/vcard-rdf/3.0#" xmlns:bqbiol="http://biomodels.net/biology-qualifiers/" xmlns:bqmodel="http://biomodels.net/model-qualifiers/"&gt;
            &lt;rdf:Description rdf:about="#meta_E_352"&gt;
              &lt;bqbiol:is&gt;
                &lt;rdf:Bag&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:sgd:S000003486"/&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:uniprot:P00924"/&gt;
                &lt;/rdf:Bag&gt;
              &lt;/bqbiol:is&gt;
            &lt;/rdf:Description&gt;
          &lt;/rdf:RDF&gt;
        &lt;/annotation&gt;
      &lt;/species&gt;
      &lt;species metaid="meta_E_426" id="E_426" name="YJL052W" compartment="C_1" initialConcentration="0.0345345244515535" sboTerm="SBO:0000014"&gt;
        &lt;annotation&gt;
          &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:vCard="http://www.w3.org/2001/vcard-rdf/3.0#" xmlns:bqbiol="http://biomodels.net/biology-qualifiers/" xmlns:bqmodel="http://biomodels.net/model-qualifiers/"&gt;
            &lt;rdf:Description rdf:about="#meta_E_426"&gt;
              &lt;bqbiol:is&gt;
                &lt;rdf:Bag&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:sgd:S000003588"/&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:uniprot:P00360"/&gt;
                &lt;/rdf:Bag&gt;
              &lt;/bqbiol:is&gt;
            &lt;/rdf:Description&gt;
          &lt;/rdf:RDF&gt;
        &lt;/annotation&gt;
      &lt;/species&gt;
      &lt;species metaid="meta_E_502" id="E_502" name="YFR053C" compartment="C_1" initialConcentration="0.00166468793544766" sboTerm="SBO:0000014"&gt;
        &lt;annotation&gt;
          &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:vCard="http://www.w3.org/2001/vcard-rdf/3.0#" xmlns:bqbiol="http://biomodels.net/biology-qualifiers/" xmlns:bqmodel="http://biomodels.net/model-qualifiers/"&gt;
            &lt;rdf:Description rdf:about="#meta_E_502"&gt;
              &lt;bqbiol:is&gt;
                &lt;rdf:Bag&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:sgd:S000001949"/&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:uniprot:P04806"/&gt;
                &lt;/rdf:Bag&gt;
              &lt;/bqbiol:is&gt;
            &lt;/rdf:Description&gt;
          &lt;/rdf:RDF&gt;
        &lt;/annotation&gt;
      &lt;/species&gt;
      &lt;species metaid="meta_E_336" id="E_336" name="YKL152C" compartment="C_1" initialConcentration="0.0632293930179762" sboTerm="SBO:0000014"&gt;
        &lt;annotation&gt;
          &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:vCard="http://www.w3.org/2001/vcard-rdf/3.0#" xmlns:bqbiol="http://biomodels.net/biology-qualifiers/" xmlns:bqmodel="http://biomodels.net/model-qualifiers/"&gt;
            &lt;rdf:Description rdf:about="#meta_E_336"&gt;
              &lt;bqbiol:is&gt;
                &lt;rdf:Bag&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:sgd:S000001635"/&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:uniprot:P00950"/&gt;
                &lt;/rdf:Bag&gt;
              &lt;/bqbiol:is&gt;
            &lt;/rdf:Description&gt;
          &lt;/rdf:RDF&gt;
        &lt;/annotation&gt;
      &lt;/species&gt;
      &lt;species metaid="meta_E_726" id="E_726" name="YAL038W" compartment="C_1" initialConcentration="0.297886720740557" sboTerm="SBO:0000014"&gt;
        &lt;annotation&gt;
          &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:vCard="http://www.w3.org/2001/vcard-rdf/3.0#" xmlns:bqbiol="http://biomodels.net/biology-qualifiers/" xmlns:bqmodel="http://biomodels.net/model-qualifiers/"&gt;
            &lt;rdf:Description rdf:about="#meta_E_726"&gt;
              &lt;bqbiol:is&gt;
                &lt;rdf:Bag&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:sgd:S000000036"/&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:uniprot:P00549"/&gt;
                &lt;/rdf:Bag&gt;
              &lt;/bqbiol:is&gt;
            &lt;/rdf:Description&gt;
          &lt;/rdf:RDF&gt;
        &lt;/annotation&gt;
      &lt;/species&gt;
      &lt;species metaid="meta_E_24" id="E_24" name="YLR044C" compartment="C_1" initialConcentration="0.0952086884800322" sboTerm="SBO:0000014"&gt;
        &lt;annotation&gt;
          &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:vCard="http://www.w3.org/2001/vcard-rdf/3.0#" xmlns:bqbiol="http://biomodels.net/biology-qualifiers/" xmlns:bqmodel="http://biomodels.net/model-qualifiers/"&gt;
            &lt;rdf:Description rdf:about="#meta_E_24"&gt;
              &lt;bqbiol:is&gt;
                &lt;rdf:Bag&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:sgd:S000004034"/&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:uniprot:P06169"/&gt;
                &lt;/rdf:Bag&gt;
              &lt;/bqbiol:is&gt;
            &lt;/rdf:Description&gt;
          &lt;/rdf:RDF&gt;
        &lt;/annotation&gt;
      &lt;/species&gt;
    &lt;/listOfSpecies&gt;
    &lt;listOfReactions&gt;
      &lt;reaction metaid="meta_R_555" id="R_555" name="fructose-bisphosphate aldolase" sboTerm="SBO:0000176"&gt;
        &lt;annotation&gt;
          &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:vCard="http://www.w3.org/2001/vcard-rdf/3.0#" xmlns:bqbiol="http://biomodels.net/biology-qualifiers/" xmlns:bqmodel="http://biomodels.net/model-qualifiers/"&gt;
            &lt;rdf:Description rdf:about="#meta_R_555"&gt;
              &lt;bqbiol:isDescribedBy&gt;
                &lt;rdf:Bag&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:pubmed:8435847"/&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:ec-code:4.1.2.13"/&gt;
                &lt;/rdf:Bag&gt;
              &lt;/bqbiol:isDescribedBy&gt;
            &lt;/rdf:Description&gt;
          &lt;/rdf:RDF&gt;
        &lt;/annotation&gt;
        &lt;listOfReactants&gt;
          &lt;speciesReference species="M_276"/&gt;
        &lt;/listOfReactants&gt;
        &lt;listOfProducts&gt;
          &lt;speciesReference species="M_234"/&gt;
          &lt;speciesReference species="M_289"/&gt;
        &lt;/listOfProducts&gt;
        &lt;listOfModifiers&gt;
          &lt;modifierSpeciesReference species="E_375"/&gt;
        &lt;/listOfModifiers&gt;
        &lt;kineticLaw&gt;
          &lt;math xmlns="http://www.w3.org/1998/Math/MathML"&gt;
            &lt;apply&gt;
              &lt;divide/&gt;
              &lt;apply&gt;
                &lt;times/&gt;
                &lt;ci&gt; kcat &lt;/ci&gt;
                &lt;ci&gt; Et &lt;/ci&gt;
                &lt;ci&gt; M_276 &lt;/ci&gt;
              &lt;/apply&gt;
              &lt;apply&gt;
                &lt;plus/&gt;
                &lt;ci&gt; Ks &lt;/ci&gt;
                &lt;ci&gt; M_276 &lt;/ci&gt;
              &lt;/apply&gt;
            &lt;/apply&gt;
          &lt;/math&gt;
          &lt;listOfParameters&gt;
            &lt;parameter id="kcat" value="4.1385594999"/&gt;
            &lt;parameter id="Ks" value="0.45070069095"/&gt;
            &lt;parameter id="Et" value="4.0625e-05"/&gt;
          &lt;/listOfParameters&gt;
        &lt;/kineticLaw&gt;
      &lt;/reaction&gt;
      &lt;reaction metaid="meta_R_1016" id="R_1016" name="phosphofructokinase" sboTerm="SBO:0000176"&gt;
        &lt;annotation&gt;
          &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:vCard="http://www.w3.org/2001/vcard-rdf/3.0#" xmlns:bqbiol="http://biomodels.net/biology-qualifiers/" xmlns:bqmodel="http://biomodels.net/model-qualifiers/"&gt;
            &lt;rdf:Description rdf:about="#meta_R_1016"&gt;
              &lt;bqbiol:isDescribedBy&gt;
                &lt;rdf:Bag&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:pubmed:3007939"/&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:ec-code:2.7.1.11"/&gt;
                &lt;/rdf:Bag&gt;
              &lt;/bqbiol:isDescribedBy&gt;
            &lt;/rdf:Description&gt;
          &lt;/rdf:RDF&gt;
        &lt;/annotation&gt;
        &lt;listOfReactants&gt;
          &lt;speciesReference species="M_172"/&gt;
          &lt;speciesReference species="M_273"/&gt;
        &lt;/listOfReactants&gt;
        &lt;listOfProducts&gt;
          &lt;speciesReference species="M_135"/&gt;
          &lt;speciesReference species="M_276"/&gt;
          &lt;speciesReference species="M_329"/&gt;
        &lt;/listOfProducts&gt;
        &lt;listOfModifiers&gt;
          &lt;modifierSpeciesReference species="Cx_40"/&gt;
        &lt;/listOfModifiers&gt;
        &lt;kineticLaw&gt;
          &lt;math xmlns="http://www.w3.org/1998/Math/MathML"&gt;
            &lt;apply&gt;
              &lt;times/&gt;
              &lt;ci&gt; k0 &lt;/ci&gt;
              &lt;ci&gt; M_172 &lt;/ci&gt;
              &lt;ci&gt; M_273 &lt;/ci&gt;
            &lt;/apply&gt;
          &lt;/math&gt;
          &lt;listOfParameters&gt;
            &lt;parameter id="k0" value="1"/&gt;
          &lt;/listOfParameters&gt;
        &lt;/kineticLaw&gt;
      &lt;/reaction&gt;
      &lt;reaction metaid="meta_R_1022" id="R_1022" name="glucose-6-phosphate isomerase" sboTerm="SBO:0000176"&gt;
        &lt;annotation&gt;
          &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:vCard="http://www.w3.org/2001/vcard-rdf/3.0#" xmlns:bqbiol="http://biomodels.net/biology-qualifiers/" xmlns:bqmodel="http://biomodels.net/model-qualifiers/"&gt;
            &lt;rdf:Description rdf:about="#meta_R_1022"&gt;
              &lt;bqbiol:isDescribedBy&gt;
                &lt;rdf:Bag&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:pubmed:8435847"/&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:ec-code:5.3.1.9"/&gt;
                &lt;/rdf:Bag&gt;
              &lt;/bqbiol:isDescribedBy&gt;
            &lt;/rdf:Description&gt;
          &lt;/rdf:RDF&gt;
        &lt;/annotation&gt;
        &lt;listOfReactants&gt;
          &lt;speciesReference species="M_292"/&gt;
        &lt;/listOfReactants&gt;
        &lt;listOfProducts&gt;
          &lt;speciesReference species="M_273"/&gt;
        &lt;/listOfProducts&gt;
        &lt;listOfModifiers&gt;
          &lt;modifierSpeciesReference species="E_417"/&gt;
        &lt;/listOfModifiers&gt;
        &lt;kineticLaw&gt;
          &lt;math xmlns="http://www.w3.org/1998/Math/MathML"&gt;
            &lt;apply&gt;
              &lt;divide/&gt;
              &lt;apply&gt;
                &lt;times/&gt;
                &lt;ci&gt; Vmax &lt;/ci&gt;
                &lt;ci&gt; M_292 &lt;/ci&gt;
              &lt;/apply&gt;
              &lt;apply&gt;
                &lt;plus/&gt;
                &lt;apply&gt;
                  &lt;times/&gt;
                  &lt;ci&gt; Km &lt;/ci&gt;
                  &lt;apply&gt;
                    &lt;plus/&gt;
                    &lt;cn type="integer"&gt; 1 &lt;/cn&gt;
                    &lt;apply&gt;
                      &lt;divide/&gt;
                      &lt;ci&gt; I &lt;/ci&gt;
                      &lt;ci&gt; Ki &lt;/ci&gt;
                    &lt;/apply&gt;
                  &lt;/apply&gt;
                &lt;/apply&gt;
                &lt;ci&gt; M_292 &lt;/ci&gt;
              &lt;/apply&gt;
            &lt;/apply&gt;
          &lt;/math&gt;
          &lt;listOfParameters&gt;
            &lt;parameter id="Ki" value="1.9"/&gt;
            &lt;parameter id="I" value="0"/&gt;
            &lt;parameter id="Vmax" value="0"/&gt;
            &lt;parameter id="Km" value="0.86"/&gt;
            &lt;parameter id="E" value="0.1"/&gt;
          &lt;/listOfParameters&gt;
        &lt;/kineticLaw&gt;
      &lt;/reaction&gt;
      &lt;reaction metaid="meta_R_1023" id="R_1023" name="phosphoglycerate kinase" sboTerm="SBO:0000176"&gt;
        &lt;annotation&gt;
          &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:vCard="http://www.w3.org/2001/vcard-rdf/3.0#" xmlns:bqbiol="http://biomodels.net/biology-qualifiers/" xmlns:bqmodel="http://biomodels.net/model-qualifiers/"&gt;
            &lt;rdf:Description rdf:about="#meta_R_1023"&gt;
              &lt;bqbiol:isDescribedBy&gt;
                &lt;rdf:Bag&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:pubmed:6347186"/&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:ec-code:2.7.2.3"/&gt;
                &lt;/rdf:Bag&gt;
              &lt;/bqbiol:isDescribedBy&gt;
            &lt;/rdf:Description&gt;
          &lt;/rdf:RDF&gt;
        &lt;/annotation&gt;
        &lt;listOfReactants&gt;
          &lt;speciesReference species="M_4"/&gt;
          &lt;speciesReference species="M_135"/&gt;
        &lt;/listOfReactants&gt;
        &lt;listOfProducts&gt;
          &lt;speciesReference species="M_57"/&gt;
          &lt;speciesReference species="M_172"/&gt;
        &lt;/listOfProducts&gt;
        &lt;listOfModifiers&gt;
          &lt;modifierSpeciesReference species="E_670"/&gt;
        &lt;/listOfModifiers&gt;
        &lt;kineticLaw&gt;
          &lt;math xmlns="http://www.w3.org/1998/Math/MathML"&gt;
            &lt;apply&gt;
              &lt;divide/&gt;
              &lt;apply&gt;
                &lt;times/&gt;
                &lt;ci&gt; E_670 &lt;/ci&gt;
                &lt;ci&gt; kcat &lt;/ci&gt;
                &lt;ci&gt; M_57 &lt;/ci&gt;
              &lt;/apply&gt;
              &lt;apply&gt;
                &lt;plus/&gt;
                &lt;ci&gt; Km &lt;/ci&gt;
                &lt;ci&gt; M_57 &lt;/ci&gt;
              &lt;/apply&gt;
            &lt;/apply&gt;
          &lt;/math&gt;
          &lt;listOfParameters&gt;
            &lt;parameter id="kcat" value="343.5"/&gt;
            &lt;parameter id="Km" value="0.77"/&gt;
          &lt;/listOfParameters&gt;
        &lt;/kineticLaw&gt;
      &lt;/reaction&gt;
      &lt;reaction metaid="meta_R_1445" id="R_1445" name="enolase" sboTerm="SBO:0000176"&gt;
        &lt;annotation&gt;
          &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:vCard="http://www.w3.org/2001/vcard-rdf/3.0#" xmlns:bqbiol="http://biomodels.net/biology-qualifiers/" xmlns:bqmodel="http://biomodels.net/model-qualifiers/"&gt;
            &lt;rdf:Description rdf:about="#meta_R_1445"&gt;
              &lt;bqbiol:isDescribedBy&gt;
                &lt;rdf:Bag&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:pubmed:7520111"/&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:ec-code:4.2.1.11"/&gt;
                &lt;/rdf:Bag&gt;
              &lt;/bqbiol:isDescribedBy&gt;
            &lt;/rdf:Description&gt;
          &lt;/rdf:RDF&gt;
        &lt;/annotation&gt;
        &lt;listOfReactants&gt;
          &lt;speciesReference species="M_36"/&gt;
        &lt;/listOfReactants&gt;
        &lt;listOfProducts&gt;
          &lt;speciesReference species="M_330"/&gt;
          &lt;speciesReference species="M_446"/&gt;
        &lt;/listOfProducts&gt;
        &lt;listOfModifiers&gt;
          &lt;modifierSpeciesReference species="E_352"/&gt;
        &lt;/listOfModifiers&gt;
        &lt;kineticLaw&gt;
          &lt;math xmlns="http://www.w3.org/1998/Math/MathML"&gt;
            &lt;apply&gt;
              &lt;divide/&gt;
              &lt;apply&gt;
                &lt;times/&gt;
                &lt;ci&gt; Vmax &lt;/ci&gt;
                &lt;ci&gt; M_36 &lt;/ci&gt;
              &lt;/apply&gt;
              &lt;apply&gt;
                &lt;plus/&gt;
                &lt;ci&gt; Km &lt;/ci&gt;
                &lt;ci&gt; M_36 &lt;/ci&gt;
              &lt;/apply&gt;
            &lt;/apply&gt;
          &lt;/math&gt;
          &lt;listOfParameters&gt;
            &lt;parameter id="Km" value="48"/&gt;
            &lt;parameter id="Vmax" value="42"/&gt;
            &lt;parameter id="B" value="1"/&gt;
          &lt;/listOfParameters&gt;
        &lt;/kineticLaw&gt;
      &lt;/reaction&gt;
      &lt;reaction metaid="meta_R_1501" id="R_1501" name="glyceraldehyde-3-phosphate dehydrogenase" sboTerm="SBO:0000176"&gt;
        &lt;annotation&gt;
          &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:vCard="http://www.w3.org/2001/vcard-rdf/3.0#" xmlns:bqbiol="http://biomodels.net/biology-qualifiers/" xmlns:bqmodel="http://biomodels.net/model-qualifiers/"&gt;
            &lt;rdf:Description rdf:about="#meta_R_1501"&gt;
              &lt;bqbiol:isDescribedBy&gt;
                &lt;rdf:Bag&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:pubmed:3905788"/&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:ec-code:1.2.1.12"/&gt;
                &lt;/rdf:Bag&gt;
              &lt;/bqbiol:isDescribedBy&gt;
            &lt;/rdf:Description&gt;
          &lt;/rdf:RDF&gt;
        &lt;/annotation&gt;
        &lt;listOfReactants&gt;
          &lt;speciesReference species="M_289"/&gt;
          &lt;speciesReference species="M_411"/&gt;
          &lt;speciesReference species="M_454"/&gt;
        &lt;/listOfReactants&gt;
        &lt;listOfProducts&gt;
          &lt;speciesReference species="M_4"/&gt;
          &lt;speciesReference species="M_329"/&gt;
          &lt;speciesReference species="M_412"/&gt;
        &lt;/listOfProducts&gt;
        &lt;listOfModifiers&gt;
          &lt;modifierSpeciesReference species="E_426"/&gt;
        &lt;/listOfModifiers&gt;
        &lt;kineticLaw&gt;
          &lt;math xmlns="http://www.w3.org/1998/Math/MathML"&gt;
            &lt;apply&gt;
              &lt;times/&gt;
              &lt;ci&gt; k1 &lt;/ci&gt;
              &lt;ci&gt; M_289 &lt;/ci&gt;
              &lt;ci&gt; M_411 &lt;/ci&gt;
              &lt;ci&gt; M_454 &lt;/ci&gt;
            &lt;/apply&gt;
          &lt;/math&gt;
          &lt;listOfParameters&gt;
            &lt;parameter id="k1" value="1"/&gt;
          &lt;/listOfParameters&gt;
        &lt;/kineticLaw&gt;
      &lt;/reaction&gt;
      &lt;reaction metaid="meta_R_1549" id="R_1549" name="hexokinase (D-glucose:ATP)" sboTerm="SBO:0000176"&gt;
        &lt;annotation&gt;
          &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:vCard="http://www.w3.org/2001/vcard-rdf/3.0#" xmlns:bqbiol="http://biomodels.net/biology-qualifiers/" xmlns:bqmodel="http://biomodels.net/model-qualifiers/"&gt;
            &lt;rdf:Description rdf:about="#meta_R_1549"&gt;
              &lt;bqbiol:isDescribedBy&gt;
                &lt;rdf:Bag&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:pubmed:6394965"/&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:ec-code:2.7.1.1"/&gt;
                &lt;/rdf:Bag&gt;
              &lt;/bqbiol:isDescribedBy&gt;
            &lt;/rdf:Description&gt;
          &lt;/rdf:RDF&gt;
        &lt;/annotation&gt;
        &lt;listOfReactants&gt;
          &lt;speciesReference species="M_172"/&gt;
          &lt;speciesReference species="M_304"/&gt;
        &lt;/listOfReactants&gt;
        &lt;listOfProducts&gt;
          &lt;speciesReference species="M_135"/&gt;
          &lt;speciesReference species="M_292"/&gt;
          &lt;speciesReference species="M_329"/&gt;
        &lt;/listOfProducts&gt;
        &lt;listOfModifiers&gt;
          &lt;modifierSpeciesReference species="E_502"/&gt;
        &lt;/listOfModifiers&gt;
        &lt;kineticLaw&gt;
          &lt;math xmlns="http://www.w3.org/1998/Math/MathML"&gt;
            &lt;apply&gt;
              &lt;times/&gt;
              &lt;ci&gt; k2 &lt;/ci&gt;
              &lt;ci&gt; M_172 &lt;/ci&gt;
              &lt;ci&gt; M_304 &lt;/ci&gt;
            &lt;/apply&gt;
          &lt;/math&gt;
          &lt;listOfParameters&gt;
            &lt;parameter id="k2" value="1"/&gt;
          &lt;/listOfParameters&gt;
        &lt;/kineticLaw&gt;
      &lt;/reaction&gt;
      &lt;reaction metaid="meta_R_1655" id="R_1655" name="phosphoglycerate mutase" sboTerm="SBO:0000176"&gt;
        &lt;annotation&gt;
          &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:vCard="http://www.w3.org/2001/vcard-rdf/3.0#" xmlns:bqbiol="http://biomodels.net/biology-qualifiers/" xmlns:bqmodel="http://biomodels.net/model-qualifiers/"&gt;
            &lt;rdf:Description rdf:about="#meta_R_1655"&gt;
              &lt;bqbiol:isDescribedBy&gt;
                &lt;rdf:Bag&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:pubmed:3033435"/&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:ec-code:5.4.2.1"/&gt;
                &lt;/rdf:Bag&gt;
              &lt;/bqbiol:isDescribedBy&gt;
            &lt;/rdf:Description&gt;
          &lt;/rdf:RDF&gt;
        &lt;/annotation&gt;
        &lt;listOfReactants&gt;
          &lt;speciesReference species="M_57"/&gt;
        &lt;/listOfReactants&gt;
        &lt;listOfProducts&gt;
          &lt;speciesReference species="M_36"/&gt;
        &lt;/listOfProducts&gt;
        &lt;listOfModifiers&gt;
          &lt;modifierSpeciesReference species="E_336"/&gt;
        &lt;/listOfModifiers&gt;
        &lt;kineticLaw&gt;
          &lt;math xmlns="http://www.w3.org/1998/Math/MathML"&gt;
            &lt;apply&gt;
              &lt;times/&gt;
              &lt;ci&gt; k3 &lt;/ci&gt;
              &lt;ci&gt; M_57 &lt;/ci&gt;
            &lt;/apply&gt;
          &lt;/math&gt;
          &lt;listOfParameters&gt;
            &lt;parameter id="k3" value="1"/&gt;
          &lt;/listOfParameters&gt;
        &lt;/kineticLaw&gt;
      &lt;/reaction&gt;
      &lt;reaction metaid="meta_R_1680" id="R_1680" name="pyruvate kinase" sboTerm="SBO:0000176"&gt;
        &lt;annotation&gt;
          &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:vCard="http://www.w3.org/2001/vcard-rdf/3.0#" xmlns:bqbiol="http://biomodels.net/biology-qualifiers/" xmlns:bqmodel="http://biomodels.net/model-qualifiers/"&gt;
            &lt;rdf:Description rdf:about="#meta_R_1680"&gt;
              &lt;bqbiol:isDescribedBy&gt;
                &lt;rdf:Bag&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:pubmed:6185493"/&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:ec-code:2.7.1.40"/&gt;
                &lt;/rdf:Bag&gt;
              &lt;/bqbiol:isDescribedBy&gt;
            &lt;/rdf:Description&gt;
          &lt;/rdf:RDF&gt;
        &lt;/annotation&gt;
        &lt;listOfReactants&gt;
          &lt;speciesReference species="M_135"/&gt;
          &lt;speciesReference species="M_329"/&gt;
          &lt;speciesReference species="M_446"/&gt;
        &lt;/listOfReactants&gt;
        &lt;listOfProducts&gt;
          &lt;speciesReference species="M_172"/&gt;
          &lt;speciesReference species="M_483"/&gt;
        &lt;/listOfProducts&gt;
        &lt;listOfModifiers&gt;
          &lt;modifierSpeciesReference species="E_726"/&gt;
        &lt;/listOfModifiers&gt;
        &lt;kineticLaw&gt;
          &lt;math xmlns="http://www.w3.org/1998/Math/MathML"&gt;
            &lt;apply&gt;
              &lt;times/&gt;
              &lt;ci&gt; k4 &lt;/ci&gt;
              &lt;ci&gt; M_135 &lt;/ci&gt;
              &lt;ci&gt; M_329 &lt;/ci&gt;
              &lt;ci&gt; M_446 &lt;/ci&gt;
            &lt;/apply&gt;
          &lt;/math&gt;
          &lt;listOfParameters&gt;
            &lt;parameter id="k4" value="1"/&gt;
          &lt;/listOfParameters&gt;
        &lt;/kineticLaw&gt;
      &lt;/reaction&gt;
      &lt;reaction metaid="meta_R_1681" id="R_1681" name="pyruvate decarboxylase" sboTerm="SBO:0000176"&gt;
        &lt;annotation&gt;
          &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:vCard="http://www.w3.org/2001/vcard-rdf/3.0#" xmlns:bqbiol="http://biomodels.net/biology-qualifiers/" xmlns:bqmodel="http://biomodels.net/model-qualifiers/"&gt;
            &lt;rdf:Description rdf:about="#meta_R_1681"&gt;
              &lt;bqbiol:isDescribedBy&gt;
                &lt;rdf:Bag&gt;
                  &lt;rdf:li rdf:resource="urn:miriam:ec-code:4.1.1.1"/&gt;
                &lt;/rdf:Bag&gt;
              &lt;/bqbiol:isDescribedBy&gt;
            &lt;/rdf:Description&gt;
          &lt;/rdf:RDF&gt;
        &lt;/annotation&gt;
        &lt;listOfReactants&gt;
          &lt;speciesReference species="M_329"/&gt;
          &lt;speciesReference species="M_483"/&gt;
        &lt;/listOfReactants&gt;
        &lt;listOfProducts&gt;
          &lt;speciesReference species="M_121"/&gt;
          &lt;speciesReference species="M_203"/&gt;
        &lt;/listOfProducts&gt;
        &lt;listOfModifiers&gt;
          &lt;modifierSpeciesReference species="E_24"/&gt;
        &lt;/listOfModifiers&gt;
        &lt;kineticLaw&gt;
          &lt;math xmlns="http://www.w3.org/1998/Math/MathML"&gt;
            &lt;apply&gt;
              &lt;times/&gt;
              &lt;ci&gt; k5 &lt;/ci&gt;
              &lt;ci&gt; M_329 &lt;/ci&gt;
              &lt;ci&gt; M_483 &lt;/ci&gt;
            &lt;/apply&gt;
          &lt;/math&gt;
          &lt;listOfParameters&gt;
            &lt;parameter id="k5" value="1"/&gt;
          &lt;/listOfParameters&gt;
        &lt;/kineticLaw&gt;
      &lt;/reaction&gt;
    &lt;/listOfReactions&gt;
  &lt;/model&gt;
&lt;/sbml&gt;
</text>
      </annotationBean>
      <date>2010-03-25 17:13:58.932 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain></annotations></port></inputPorts><outputPorts><port><name>parameterised_sbml</name><annotations><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.FreeTextDescription">
        <text>A SBML model with parameterised reaction kinetics, and protein and metabolite starting concentrations</text>
      </annotationBean>
      <date>2010-03-26 08:59:33.123 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain></annotations></port></outputPorts><processors><processor><name>createSysbioDataSource</name><inputPorts><port><name>sbml</name><depth>0</depth></port></inputPorts><outputPorts /><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="sbml" to="sbml" /></inputMap><outputMap /><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <script>import org.sbml.libsbml.*;
import java.sql.*;
import org.sqlite.JDBC;

String DATABASE_NAME = "taverna_sbml";
String databaseURL = "jdbc:sqlite:" + DATABASE_NAME + ".db";

//Set up database
try
{
  //System.loadLibrary("sbmlj");

  driver = "org.sqlite.JDBC";

  Class.forName(driver);
  Connection conn = DriverManager.getConnection(databaseURL);
  Statement stat = conn.createStatement();

  //Create compartment table
  stat.executeUpdate("drop table if exists compartment;");
  stat.executeUpdate("create table compartment (id, name, outside, sboTerm, goId, size);");

  //Create species table for holding metabolite and enzyme data
  stat.executeUpdate("drop table if exists species;");
  stat.executeUpdate("create table species (id, name, compartmentId, sboTerm, chebi, kegg, inchi, sgd, uniprot, sabioCompoundId, sabioCompoundName, initialConc);");

  //Create reaction table for holding reactants and products
  stat.executeUpdate("drop table if exists reaction;");
  stat.executeUpdate("create table reaction (id, name, sboTerm, subsystem, ec, pubmed, tag);");

  //Create reactionspecies table for holding associations between species and reaction
  stat.executeUpdate("drop table if exists reactionspecies;");
  stat.executeUpdate("create table reactionspecies (reactionId, speciesId, stoichiometry, role);");

  //====================
  //For storing kinetics
  //====================

  //Create kineticlaw table
  stat.executeUpdate("drop table if exists kineticlaw;");
  stat.executeUpdate("create table kineticlaw (id, reactionId, formula, generalId, reversible);");

  //Create kineticlawvariable table
  stat.executeUpdate("drop table if exists kineticlawvariable;");
  stat.executeUpdate("create table kineticlawvariable (kineticLawId, variableId, relFormula);");

  //Create parameter table
  stat.executeUpdate("drop table if exists parameter;");
  stat.executeUpdate("create table parameter (id, name, role, type, kineticLawId, speciesId, comment, stValue, stDeviation, endValue, unitId);");

  //Create unit table
  stat.executeUpdate("drop table if exists unit;");
  stat.executeUpdate("create table unit (id, description, sbmlUnitId, comment);");

  //Create sbmlunit table
  stat.executeUpdate("drop table if exists sbmlunit;");
  stat.executeUpdate("create table sbmlunit (id, kind, exponent, scale, multiplier, offset);");

  //Create envkineticlaw table
  stat.executeUpdate("drop table if exists envkineticlaw;");
  stat.executeUpdate("create table envkineticlaw (kineticLawId, environDataId);");

  //Create environmentaldata table
  stat.executeUpdate("drop table if exists environmentaldata;");
  stat.executeUpdate("create table environmentaldata (id, stValue, endValue, bufferDescription, description, unitId, comment);");

  //============================
  //Load compartments into table
  //============================
  PreparedStatement prep1 = conn.prepareStatement("insert into compartment values (?, ?, ?, ?, ?, ?);");
  SBMLReader reader = new SBMLReader();
  SBMLDocument doc  = reader.readSBMLFromString(sbml);
  Model m = doc.getModel();
  System.out.println("Creating sqlite data source for SBML model for model id: "+ m.getId());

  ListOfCompartments compList = m.getListOfCompartments();
  for (int i = 0; i &lt; compList.size(); i++)
  {
    Compartment comp = (Compartment) compList.get(i);
    String id = comp.getId();
    String name = comp.getName();
    String outside = comp.getOutside();
    int sboTerm = comp.getSBOTerm();

    String goId = "";
    for (int x = 0; x &lt; comp.getNumCVTerms(); x++)
    {
      CVTerm term = comp.getCVTerm(x);
      XMLAttributes att = term.getResources();
      for (int y = 0; y &lt; att.getLength(); y++)
      {
        String uri = att.getValue(y);
        if (uri.contains("obo.go"))
        {
          goId = uri;
        }
      }
    }

    prep1.setString(1, id);
    prep1.setString(2, name);
    prep1.setString(3, outside);
    prep1.setInt(4, sboTerm);
    prep1.setString(5, goId);
    prep1.setString(6, "1");
    prep1.addBatch();
  }

  //============================
  //Load species into table
  //============================
  PreparedStatement prep = conn.prepareStatement("insert into species values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);");
  ListOfSpecies spList = m.getListOfSpecies();
  System.out.println("Loading species");
  for (int i = 0; i &lt; spList.size(); i++)
  {
    Species sp = (Species) spList.get(i);
    String id = sp.getId();
    String name = sp.getName();
    String compartment = sp.getCompartment();
    int sboTerm = sp.getSBOTerm();

    String chebi = "";
    String kegg = "";
    String inchi = "";
    String sgd = "";
    String uniprot = "";

    try
    {
      XMLNode node = sp.getAnnotation();
      XMLNode node2 = node.getChild(0);
      XMLNode node3 = node2.getChild(0);
      if(XMLNode.convertXMLNodeToString(node3).contains("InChI"))
        inchi = node3.getCharacters();
    } catch (NullPointerException e) //Catch metabolites with no inchi codes
    {
      System.err.println("No inchi code for species id: " + id);
      inchi = "";
    }

    StringBuffer uniprotSb = new StringBuffer();
    for (int x = 0; x &lt; sp.getNumCVTerms(); x++)
    {
      CVTerm term = sp.getCVTerm(x);
      XMLAttributes att = term.getResources();
      for (int y = 0; y &lt; att.getLength(); y++)
      {
        String uri = att.getValue(y);
        if (uri.contains("chebi"))
        {
          chebi = uri;
        } else if (uri.contains("kegg"))
        {
          kegg = uri;
        } else if (uri.contains("sgd"))
        {
          sgd = uri;
        } else if (uri.contains("uniprot"))
        {
          uniprotSb.append("," + uri);
        }
      }
    }

    prep.setString(1, id);
    prep.setString(2, name);
    prep.setString(3, compartment);
    prep.setInt(4, sboTerm);
    prep.setString(5, chebi);
    prep.setString(6, kegg);
    prep.setString(7, inchi);
    prep.setString(8, sgd);
    uniprot = uniprotSb.toString();
    uniprot = uniprot.replaceFirst(",", "");
    prep.setString(9, uniprot);
    //For sabioCompoundId
    prep.setInt(10, 0);
    //For sabioCompoundName
    prep.setString(11, "");
    prep.setInt(12, 0);
    prep.addBatch();
  }

  //============================
  //Load reactions into table
  //============================
  PreparedStatement prep4 = conn.prepareStatement("insert into reaction values (?, ?, ?, ?, ?, ?, ?);");
  PreparedStatement prep2 = conn.prepareStatement("insert into reactionspecies values (?, ?, ?, ?);");
  ListOfReactions reactions = m.getListOfReactions();
  System.out.println("Loading reactions");
  for (int i = 0; i &lt; reactions.size(); i++)
  {
    Reaction r = (Reaction) reactions.get(i);
    String id = r.getId();
    String name = r.getName();
    int sboTerm = r.getSBOTerm();

    //Sort out subsystem
    String anno = r.getNotesString();
    int start = anno.indexOf("&lt;p&gt;");
    int end = anno.indexOf("&lt;/p&gt;");

    //No need for subsystem
    String subsystem = "";
    /*
    if (start != -1)
    {
      subsystem = anno.substring(start + 3, end);
      subsystem = subsystem.replaceAll("SUBSYSTEM: ", "");
    }
    System.out.println("subsystem: " + subsystem);
    */


    //Sort out pubmed annotations for reaction
    String ec = "";
    String pubmed = "";
    for (int x = 0; x &lt; r.getNumCVTerms(); x++)
    {
      CVTerm term = r.getCVTerm(x);
      XMLAttributes att = term.getResources();
      for (int y = 0; y &lt; att.getLength(); y++)
      {
        uri = att.getValue(y);
        if (uri.contains("ec-code"))
        {
          ec = uri;
        } else if (uri.contains("pubmed"))
        {
          pubmed = uri;
        }
      }
    }

    prep4.setString(1, id);
    prep4.setString(2, name);
    prep4.setInt(3, sboTerm);
    prep4.setString(4, subsystem);
    prep4.setString(5, ec);
    prep4.setString(6, pubmed);
    prep4.setString(7, "");
    prep4.addBatch();

    ListOfSpeciesReferences reactants = r.getListOfReactants();
    for (int x = 0; x &lt; reactants.size(); x++)
    {
      SpeciesReference spRef = (SpeciesReference) reactants.get(x);
      species = spRef.getSpecies();
      prep2.setString(1, id);
      prep2.setString(2, species);
      prep2.setDouble(3, spRef.getStoichiometry());
      prep2.setString(4, "reactant");
      prep2.addBatch();
    }

    ListOfSpeciesReferences products = r.getListOfProducts();
    for (int x = 0; x &lt; products.size(); x++)
    {
      SpeciesReference spRef = (SpeciesReference) products.get(x);
      species = spRef.getSpecies();
      prep2.setString(1, id);
      prep2.setString(2, species);
      prep2.setDouble(3, spRef.getStoichiometry());
      prep2.setString(4, "product");
      prep2.addBatch();
    }

    ListOfSpeciesReferences modifiers = r.getListOfModifiers();
    for (int x = 0; x &lt; modifiers.size(); x++)
    {
      ModifierSpeciesReference spRef = (ModifierSpeciesReference) modifiers.get(x);
      species = spRef.getSpecies();
      prep2.setString(1, id);
      prep2.setString(2, species);
      prep2.setDouble(3, 0);
      prep2.setString(4, "modifier");
      prep2.addBatch();
    }
  }

  conn.setAutoCommit(false);
  prep1.executeBatch();
  prep.executeBatch();
  prep2.executeBatch();
  prep4.executeBatch();
  conn.setAutoCommit(true);
  conn.close();

} catch (ClassNotFoundException e)
{
  e.printStackTrace();
} catch (SQLException e)
{
  e.printStackTrace();
}</script>
  <dependencies />
  <classLoaderSharing>system</classLoaderSharing>
  <localDependencies>
    <string>libsbmlj.jar</string>
  </localDependencies>
  <artifactDependencies />
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>sbml</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>0</granularDepth>
      <name>databaseURL</name>
      <depth>0</depth>
      <mimeTypes />
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="sbml" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>getChebiIds</name><inputPorts /><outputPorts><port><name>chebiIds</name><depth>1</depth><granularDepth>1</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap /><outputMap><map from="chebiIds" to="chebiIds" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <script>import java.sql.*;
import org.sqlite.JDBC;

String DATABASE_NAME = "taverna_sbml";
String databaseURL = "jdbc:sqlite:" + DATABASE_NAME + ".db";

sb = new StringBuffer();

try
{
  driver = "org.sqlite.JDBC";
  Class.forName(driver);
  Connection conn = DriverManager.getConnection(databaseURL);
  Statement stat = conn.createStatement();
  sql = "select chebi from species;";
  ResultSet rs = stat.executeQuery(sql);
  
  while (rs.next())
  {
    sb.append(";");
    id = rs.getString(1);
    id = id.replaceAll("urn:miriam:obo.chebi:CHEBI:", "");
    sb.append(id);
  }

  rs.close();
  conn.close();

} catch (ClassNotFoundException e)
{
  e.printStackTrace();
} catch (SQLException e)
{
  e.printStackTrace();
}

String str = sb.toString();
str = str.replaceFirst(";", "");
String[] chebiIds = str.split(";");</script>
  <dependencies />
  <classLoaderSharing>system</classLoaderSharing>
  <localDependencies>
    <string>sqlitejdbc-v053.jar</string>
  </localDependencies>
  <artifactDependencies />
  <inputs />
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>1</granularDepth>
      <name>chebiIds</name>
      <depth>1</depth>
      <mimeTypes />
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy /></iteration></iterationStrategyStack></processor><processor><name>getCompoundName</name><inputPorts><port><name>compoundId</name><depth>0</depth></port></inputPorts><outputPorts><port><name>compoundName</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>dataflow-activity</artifact><version>1.0.1</version></raven><class>net.sf.taverna.t2.activities.dataflow.DataflowActivity</class><inputMap><map from="compoundId" to="compoundId" /></inputMap><outputMap><map from="compoundName" to="compoundName" /></outputMap><configBean encoding="dataflow"><dataflow ref="40e3ff9a-a98c-4b99-8b11-d92e29dd98c2" /></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="compoundId" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>updateDataSource</name><inputPorts><port><name>chebiIds</name><depth>1</depth></port><port><name>sabioCompoundNames</name><depth>1</depth></port><port><name>sabioCompoundIds</name><depth>1</depth></port></inputPorts><outputPorts /><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="sabioCompoundIds" to="sabioCompoundIds" /><map from="chebiIds" to="chebiIds" /><map from="sabioCompoundNames" to="sabioCompoundNames" /></inputMap><outputMap /><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <script>import java.sql.*;
import org.sqlite.JDBC;

String DATABASE_NAME = "taverna_sbml";
String databaseURL = "jdbc:sqlite:" + DATABASE_NAME + ".db";

sb = new StringBuffer();

//Check
if(sabioCompoundIds.size() != sabioCompoundNames.size())
  System.err.println("Number of compound names does not equal compound ids!!!");

//Create sql statements
try
{
  System.out.println("Updating metabolites in sqlite data source with SABIO-RK compound ids and names");
  driver = "org.sqlite.JDBC";
  Class.forName(driver);
  Connection conn = DriverManager.getConnection(databaseURL);
  for(int i = 0 ; i &lt; sabioCompoundIds.size(); i++)
  {
    PreparedStatement prep = conn.prepareStatement("update species set sabioCompoundId = ?, sabioCompoundName = ? where chebi = ?;");
    prep.setString(1, sabioCompoundIds.get(i));
    prep.setString(2, sabioCompoundNames.get(i));
    prep.setString(3, "urn:miriam:obo.chebi:CHEBI:" + chebiIds.get(i));
    prep.addBatch();

    conn.setAutoCommit(false);
    prep.executeBatch();
    conn.setAutoCommit(true);
  }
  conn.close();

} catch (ClassNotFoundException e)
{
  e.printStackTrace();
} catch (SQLException e)
{
  e.printStackTrace();
}

String str = sb.toString();
str = str.replaceFirst(";", "");
str = str.replaceAll("urn:miriam:obo.chebi:CHEBI:", "");
String[] chebiIds = str.split(";");</script>
  <dependencies />
  <classLoaderSharing>system</classLoaderSharing>
  <localDependencies>
    <string>sqlitejdbc-v053.jar</string>
  </localDependencies>
  <artifactDependencies />
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>sabioCompoundIds</name>
      <depth>1</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>sabioCompoundNames</name>
      <depth>1</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>chebiIds</name>
      <depth>1</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs />
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><dot><port name="chebiIds" depth="1" /><port name="sabioCompoundNames" depth="1" /><port name="sabioCompoundIds" depth="1" /></dot></strategy></iteration></iterationStrategyStack></processor><processor><name>getReactionIds</name><inputPorts /><outputPorts><port><name>reactionIds</name><depth>1</depth><granularDepth>1</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap /><outputMap><map from="reactionIds" to="reactionIds" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <script>import java.sql.*;
import org.sqlite.JDBC;

String DATABASE_NAME = "taverna_sbml";
String databaseURL = "jdbc:sqlite:" + DATABASE_NAME + ".db";

sb = new StringBuffer();

try
{
  driver = "org.sqlite.JDBC";

  Class.forName(driver);
  Connection conn = DriverManager.getConnection(databaseURL);
  Statement stat = conn.createStatement();
  sql = "select id from reaction;";
  ResultSet rs = stat.executeQuery(sql);
  
  while (rs.next())
  {
    sb.append(";");
    id = rs.getString(1);
    sb.append(id);
  }

  rs.close();
  conn.close();

} catch (ClassNotFoundException e)
{
  e.printStackTrace();
} catch (SQLException e)
{
  e.printStackTrace();
}

String str = sb.toString();
str = str.replaceFirst(";", "");
String[] reactionIds = str.split(";");</script>
  <dependencies />
  <classLoaderSharing>system</classLoaderSharing>
  <localDependencies>
    <string>sqlitejdbc-v053.jar</string>
  </localDependencies>
  <artifactDependencies />
  <inputs />
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>1</granularDepth>
      <name>reactionIds</name>
      <depth>1</depth>
      <mimeTypes />
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy /></iteration></iterationStrategyStack></processor><processor><name>getReactantIds</name><inputPorts><port><name>reactionIds</name><depth>1</depth></port></inputPorts><outputPorts><port><name>reactantIds</name><depth>2</depth><granularDepth>2</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="reactionIds" to="reactionIds" /></inputMap><outputMap><map from="reactantIds" to="reactantIds" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <script>import java.sql.*;
import org.sqlite.JDBC;

String DATABASE_NAME = "taverna_sbml";
String databaseURL = "jdbc:sqlite:" + DATABASE_NAME + ".db";

//To hold reactant ids
ArrayList reactantIds = new ArrayList();

try
{
  driver = "org.sqlite.JDBC";
  Class.forName(driver);
  Connection conn = DriverManager.getConnection(databaseURL);
  Statement stat = conn.createStatement();
  ResultSet rs;
  
  for(int i = 0 ; i &lt; reactionIds.size(); i++)
  {
    sql = "select speciesId from reactionspecies where reactionId = '" + reactionIds.get(i) + "' and role = 'reactant';";
    rs = stat.executeQuery(sql);
  
    ArrayList al = new ArrayList();
    while (rs.next())
    {
      id = rs.getString(1);
      al.add(id);
    }

    reactantIds.add(al);
  }

  rs.close();
  conn.close();

} catch (ClassNotFoundException e)
{
  e.printStackTrace();
} catch (SQLException e)
{
  e.printStackTrace();
}</script>
  <dependencies />
  <classLoaderSharing>system</classLoaderSharing>
  <localDependencies>
    <string>sqlitejdbc-v053.jar</string>
  </localDependencies>
  <artifactDependencies />
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>reactionIds</name>
      <depth>1</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>2</granularDepth>
      <name>reactantIds</name>
      <depth>2</depth>
      <mimeTypes />
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="reactionIds" depth="1" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>getReactantSabioCompName</name><inputPorts><port><name>reactantIds</name><depth>2</depth></port></inputPorts><outputPorts><port><name>names</name><depth>2</depth><granularDepth>2</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="reactantIds" to="reactantIds" /></inputMap><outputMap><map from="names" to="names" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <script>import java.sql.*;
import org.sqlite.JDBC;

String DATABASE_NAME = "taverna_sbml";
String databaseURL = "jdbc:sqlite:" + DATABASE_NAME + ".db";

//To hold reactant ids
ArrayList names = new ArrayList();

try
{
  driver = "org.sqlite.JDBC";
  Class.forName(driver);
  Connection conn = DriverManager.getConnection(databaseURL);
  Statement stat = conn.createStatement();
  ResultSet rs;
  
  for(int i = 0 ; i &lt; reactantIds.size(); i++)
  {
    ArrayList al2 = new ArrayList();

    ArrayList al = reactantIds.get(i);
    for(int x = 0; x &lt; al.size(); x++)
    {
      sql = "select sabioCompoundName from species where id = '" + al.get(x) + "';";
      rs = stat.executeQuery(sql);
      
      while (rs.next())
      {
        id = rs.getString(1);
        al2.add(id);
      }
    }

    names.add(al2);
  }

  rs.close();
  conn.close();

} catch (ClassNotFoundException e)
{
  e.printStackTrace();
} catch (SQLException e)
{
  e.printStackTrace();
}</script>
  <dependencies />
  <classLoaderSharing>system</classLoaderSharing>
  <localDependencies>
    <string>sqlitejdbc-v053.jar</string>
  </localDependencies>
  <artifactDependencies />
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>reactantIds</name>
      <depth>2</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>2</granularDepth>
      <name>names</name>
      <depth>2</depth>
      <mimeTypes />
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="reactantIds" depth="2" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>getProductIds</name><inputPorts><port><name>reactionIds</name><depth>1</depth></port></inputPorts><outputPorts><port><name>productIds</name><depth>2</depth><granularDepth>2</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="reactionIds" to="reactionIds" /></inputMap><outputMap><map from="productIds" to="productIds" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <script>import java.sql.*;
import org.sqlite.JDBC;


String DATABASE_NAME = "taverna_sbml";
String databaseURL = "jdbc:sqlite:" + DATABASE_NAME + ".db";

//To hold product ids
ArrayList productIds = new ArrayList();

try
{
  driver = "org.sqlite.JDBC";
  Class.forName(driver);
  Connection conn = DriverManager.getConnection(databaseURL);
  Statement stat = conn.createStatement();
  ResultSet rs;
  
  for(int i = 0 ; i &lt; reactionIds.size(); i++)
  {
    sql = "select speciesId from reactionspecies where reactionId = '" + reactionIds.get(i) + "' and role = 'product';";
    rs = stat.executeQuery(sql);
  
    ArrayList al = new ArrayList();
    while (rs.next())
    {
      id = rs.getString(1);
      al.add(id);
    }
    productIds.add(al);
  }

  rs.close();
  conn.close();

} catch (ClassNotFoundException e)
{
  e.printStackTrace();
} catch (SQLException e)
{
  e.printStackTrace();
}</script>
  <dependencies />
  <classLoaderSharing>system</classLoaderSharing>
  <localDependencies>
    <string>sqlitejdbc-v053.jar</string>
  </localDependencies>
  <artifactDependencies />
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>reactionIds</name>
      <depth>1</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>2</granularDepth>
      <name>productIds</name>
      <depth>2</depth>
      <mimeTypes />
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="reactionIds" depth="1" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>getProductSabioCompName</name><inputPorts><port><name>productIds</name><depth>2</depth></port></inputPorts><outputPorts><port><name>names</name><depth>2</depth><granularDepth>2</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="productIds" to="productIds" /></inputMap><outputMap><map from="names" to="names" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <script>import java.sql.*;
import org.sqlite.JDBC;

String DATABASE_NAME = "taverna_sbml";
String databaseURL = "jdbc:sqlite:" + DATABASE_NAME + ".db";

//To hold reactant ids
ArrayList names = new ArrayList();

try
{
  driver = "org.sqlite.JDBC";
  Class.forName(driver);
  Connection conn = DriverManager.getConnection(databaseURL);
  Statement stat = conn.createStatement();
  ResultSet rs;
  
  for(int i = 0 ; i &lt; productIds.size(); i++)
  {
    ArrayList al2 = new ArrayList();

    ArrayList al = productIds.get(i);
    for(int x = 0; x &lt; al.size(); x++)
    {
      sql = "select sabioCompoundName from species where id = '" + al.get(x) + "';";
      rs = stat.executeQuery(sql);
      
      while (rs.next())
      {
        id = rs.getString(1);
        al2.add(id);
      }
    }

    names.add(al2);
  }

  rs.close();
  conn.close();

} catch (ClassNotFoundException e)
{
  e.printStackTrace();
} catch (SQLException e)
{
  e.printStackTrace();
}</script>
  <dependencies />
  <classLoaderSharing>system</classLoaderSharing>
  <localDependencies>
    <string>sqlitejdbc-v053.jar</string>
  </localDependencies>
  <artifactDependencies />
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>productIds</name>
      <depth>2</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>2</granularDepth>
      <name>names</name>
      <depth>2</depth>
      <mimeTypes />
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="productIds" depth="2" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>getReactionIdFromCompound1</name><inputPorts><port><name>compName</name><depth>0</depth></port></inputPorts><outputPorts><port><name>reactionId</name><depth>1</depth><granularDepth>1</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>dataflow-activity</artifact><version>1.0.1</version></raven><class>net.sf.taverna.t2.activities.dataflow.DataflowActivity</class><inputMap><map from="compName" to="compName" /></inputMap><outputMap><map from="reactionId" to="reactionId" /></outputMap><configBean encoding="dataflow"><dataflow ref="02208cf2-bddc-4354-a56f-e45d5a186e1f" /></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="compName" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>getReactionIdFromCompound2</name><inputPorts><port><name>compName</name><depth>0</depth></port></inputPorts><outputPorts><port><name>reactionId</name><depth>1</depth><granularDepth>1</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>dataflow-activity</artifact><version>1.0.1</version></raven><class>net.sf.taverna.t2.activities.dataflow.DataflowActivity</class><inputMap><map from="compName" to="compName" /></inputMap><outputMap><map from="reactionId" to="reactionId" /></outputMap><configBean encoding="dataflow"><dataflow ref="02208cf2-bddc-4354-a56f-e45d5a186e1f" /></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="compName" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>mergeReactionIds1</name><inputPorts><port><name>reactionIds</name><depth>2</depth></port></inputPorts><outputPorts><port><name>csv</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="reactionIds" to="reactionIds" /></inputMap><outputMap><map from="csv" to="csv" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <script>//Check
//System.out.println(reactionIds.size());

StringBuffer sb = new StringBuffer();
for(int i = 0; i &lt; reactionIds.size(); i++)
{
  ArrayList al = reactionIds.get(i);
  for(int x = 0; x &lt; al.size(); x ++)
  {
    sb.append(al.get(x) + ",");
  }
  sb.append("\n");
}

String csv = sb.toString();</script>
  <dependencies />
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>reactionIds</name>
      <depth>2</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>0</granularDepth>
      <name>csv</name>
      <depth>0</depth>
      <mimeTypes />
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="reactionIds" depth="2" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>mergeReactionIds2</name><inputPorts><port><name>reactionIds</name><depth>2</depth></port></inputPorts><outputPorts><port><name>csv</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="reactionIds" to="reactionIds" /></inputMap><outputMap><map from="csv" to="csv" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <script>StringBuffer sb = new StringBuffer();
for(int i = 0; i &lt; reactionIds.size(); i++)
{
  ArrayList al = reactionIds.get(i);
  for(int x = 0; x &lt; al.size(); x ++)
  {
    sb.append(al.get(x) + ",");
  }
  sb.append("\n");
}

String csv = sb.toString();</script>
  <dependencies />
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>reactionIds</name>
      <depth>2</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>0</granularDepth>
      <name>csv</name>
      <depth>0</depth>
      <mimeTypes />
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="reactionIds" depth="2" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>intersect1</name><inputPorts><port><name>inputCSV</name><depth>0</depth></port></inputPorts><outputPorts><port><name>outputCSV</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>rshell-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.rshell.RshellActivity</class><inputMap><map from="inputCSV" to="inputCSV" /></inputMap><outputMap><map from="outputCSV" to="outputCSV" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.rshell.RshellActivityConfigurationBean xmlns="">
  <rVersion>false</rVersion>
  <script>#Intersection of data
data &lt;- read.table(file=inputCSV,head=FALSE,sep=",", as.is=TRUE, fill=TRUE);
tdata &lt;- t(data);

#Check
if(ncol(tdata) == 1)
{
  write.csv(data, eol = "\n", row.names = FALSE, col.names= FALSE, file=outputCSV);
} else
{
  for (i in 1:ncol(tdata)) #Loop thru cols in x object
  {
    if(i == 1)
    {
      a &lt;- intersect(tdata[,i], tdata[,i+1]);
    }
    else
    {
      a &lt;- intersect(a, tdata[,i]);
    }
  }

  #Transpose
  a &lt;- t(a);
  #Write CSV file
  write.csv(a, eol = "\n", row.names = FALSE, col.names= FALSE, file=outputCSV);
}</script>
  <connectionSettings>
    <host>localhost</host>
    <port>6311</port>
    <username />
    <password />
    <keepSessionAlive>false</keepSessionAlive>
    <newRVersion>false</newRVersion>
  </connectionSettings>
  <inputSymanticTypes>
    <net.sf.taverna.t2.activities.rshell.RShellPortSymanticTypeBean>
      <name>inputCSV</name>
      <symanticType>TEXT_FILE</symanticType>
    </net.sf.taverna.t2.activities.rshell.RShellPortSymanticTypeBean>
  </inputSymanticTypes>
  <outputSymanticTypes>
    <net.sf.taverna.t2.activities.rshell.RShellPortSymanticTypeBean>
      <name>outputCSV</name>
      <symanticType reference="../../../inputSymanticTypes/net.sf.taverna.t2.activities.rshell.RShellPortSymanticTypeBean/symanticType" />
    </net.sf.taverna.t2.activities.rshell.RShellPortSymanticTypeBean>
  </outputSymanticTypes>
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <allowsLiteralValues>false</allowsLiteralValues>
      <name>inputCSV</name>
      <depth>0</depth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>0</granularDepth>
      <name>outputCSV</name>
      <depth>0</depth>
      <mimeTypes />
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.rshell.RshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="inputCSV" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>intersect2</name><inputPorts><port><name>inputCSV</name><depth>0</depth></port></inputPorts><outputPorts><port><name>outputCSV</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>rshell-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.rshell.RshellActivity</class><inputMap><map from="inputCSV" to="inputCSV" /></inputMap><outputMap><map from="outputCSV" to="outputCSV" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.rshell.RshellActivityConfigurationBean xmlns="">
  <rVersion>false</rVersion>
  <script>#Intersection of data
data &lt;- read.table(file=inputCSV,head=FALSE,sep=",", as.is=TRUE, fill=TRUE);
tdata &lt;- t(data);

#Check
if(ncol(tdata) == 1)
{
  write.csv(data, eol = "\n", row.names = FALSE, col.names= FALSE, file=outputCSV);
} else
{
  for (i in 1:ncol(tdata)) #Loop thru cols in x object
  {
    if(i == 1)
    {
      a &lt;- intersect(tdata[,i], tdata[,i+1]);
    }
    else
    {
      a &lt;- intersect(a, tdata[,i]);
    }
  }

  #Transpose
  a &lt;- t(a);
  #Write CSV file
  write.csv(a, eol = "\n", row.names = FALSE, col.names= FALSE, file=outputCSV);
}</script>
  <connectionSettings>
    <host>localhost</host>
    <port>6311</port>
    <username />
    <password />
    <keepSessionAlive>false</keepSessionAlive>
    <newRVersion>false</newRVersion>
  </connectionSettings>
  <inputSymanticTypes>
    <net.sf.taverna.t2.activities.rshell.RShellPortSymanticTypeBean>
      <name>inputCSV</name>
      <symanticType>TEXT_FILE</symanticType>
    </net.sf.taverna.t2.activities.rshell.RShellPortSymanticTypeBean>
  </inputSymanticTypes>
  <outputSymanticTypes>
    <net.sf.taverna.t2.activities.rshell.RShellPortSymanticTypeBean>
      <name>outputCSV</name>
      <symanticType reference="../../../inputSymanticTypes/net.sf.taverna.t2.activities.rshell.RShellPortSymanticTypeBean/symanticType" />
    </net.sf.taverna.t2.activities.rshell.RShellPortSymanticTypeBean>
  </outputSymanticTypes>
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <allowsLiteralValues>false</allowsLiteralValues>
      <name>inputCSV</name>
      <depth>0</depth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>0</granularDepth>
      <name>outputCSV</name>
      <depth>0</depth>
      <mimeTypes />
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.rshell.RshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="inputCSV" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>finalIntersect</name><inputPorts><port><name>intersectResults1</name><depth>0</depth></port><port><name>intersectResults2</name><depth>0</depth></port></inputPorts><outputPorts><port><name>outputCSV</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>rshell-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.rshell.RshellActivity</class><inputMap><map from="intersectResults1" to="intersectResults1" /><map from="intersectResults2" to="intersectResults2" /></inputMap><outputMap><map from="outputCSV" to="outputCSV" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.rshell.RshellActivityConfigurationBean xmlns="">
  <rVersion>false</rVersion>
  <script>#Perform final intersection between list of reaction ids from reactants and products

#Read data
reactants &lt;- read.table(file=intersectResults1,head=FALSE,sep=",", as.is=TRUE, fill=TRUE);
products &lt;- read.table(file=intersectResults2,head=FALSE,sep=",", as.is=TRUE, fill=TRUE);
#Transpose
treactants &lt;- t(reactants);
tproducts &lt;- t(products);
#Do intersect
a &lt;- intersect(treactants[,2], tproducts[,2]);
#Transpose
a &lt;- t(a);
#Write CSV file
write.csv(a, eol = "\n", row.names = FALSE, col.names= FALSE, file=outputCSV);</script>
  <connectionSettings>
    <host>localhost</host>
    <port>6311</port>
    <username />
    <password />
    <keepSessionAlive>false</keepSessionAlive>
    <newRVersion>false</newRVersion>
  </connectionSettings>
  <inputSymanticTypes>
    <net.sf.taverna.t2.activities.rshell.RShellPortSymanticTypeBean>
      <name>intersectResults1</name>
      <symanticType>TEXT_FILE</symanticType>
    </net.sf.taverna.t2.activities.rshell.RShellPortSymanticTypeBean>
    <net.sf.taverna.t2.activities.rshell.RShellPortSymanticTypeBean>
      <name>intersectResults2</name>
      <symanticType reference="../../net.sf.taverna.t2.activities.rshell.RShellPortSymanticTypeBean/symanticType" />
    </net.sf.taverna.t2.activities.rshell.RShellPortSymanticTypeBean>
  </inputSymanticTypes>
  <outputSymanticTypes>
    <net.sf.taverna.t2.activities.rshell.RShellPortSymanticTypeBean>
      <name>outputCSV</name>
      <symanticType reference="../../../inputSymanticTypes/net.sf.taverna.t2.activities.rshell.RShellPortSymanticTypeBean/symanticType" />
    </net.sf.taverna.t2.activities.rshell.RShellPortSymanticTypeBean>
  </outputSymanticTypes>
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <allowsLiteralValues>false</allowsLiteralValues>
      <name>intersectResults1</name>
      <depth>0</depth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <allowsLiteralValues>false</allowsLiteralValues>
      <name>intersectResults2</name>
      <depth>0</depth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>0</granularDepth>
      <name>outputCSV</name>
      <depth>0</depth>
      <mimeTypes />
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.rshell.RshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><dot><port name="intersectResults1" depth="0" /><port name="intersectResults2" depth="0" /></dot></strategy></iteration></iterationStrategyStack></processor><processor><name>clean</name><inputPorts><port><name>reactionIdsIn</name><depth>1</depth></port></inputPorts><outputPorts><port><name>reactionIdsOut</name><depth>1</depth><granularDepth>1</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="reactionIdsIn" to="reactionIdsIn" /></inputMap><outputMap><map from="reactionIdsOut" to="reactionIdsOut" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <script>//Output
reactionIdsOut = new ArrayList();

for(int i = 0;i &lt; reactionIdsIn.size(); i++)
{
  String str = reactionIdsIn.get(i);
  String[] lines = str.split("\n");
  String line = lines[1];
  line = line.replaceAll(",NA", "");
  line = line.replaceAll("NA", "");
  line = line.replaceAll("\"", "");
  reactionIdsOut.add(line);
}</script>
  <dependencies />
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>reactionIdsIn</name>
      <depth>1</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>1</granularDepth>
      <name>reactionIdsOut</name>
      <depth>1</depth>
      <mimeTypes />
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="reactionIdsIn" depth="1" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>split</name><inputPorts><port><name>regex</name><depth>0</depth></port><port><name>string</name><depth>0</depth></port></inputPorts><outputPorts><port><name>split</name><depth>1</depth><granularDepth>1</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>localworker-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.localworker.LocalworkerActivity</class><inputMap><map from="regex" to="regex" /><map from="string" to="string" /></inputMap><outputMap><map from="split" to="split" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean xmlns="">
  <localworkerName>org.embl.ebi.escience.scuflworkers.java.SplitByRegex</localworkerName>
  <script>List split = new ArrayList();
if (!string.equals("")) {
	String regexString = ",";
	if (regex != void) {
		regexString = regex;
	}
	String[] result = string.split(regexString);
	for (int i = 0; i &lt; result.length; i++) {
		split.add(result[i]);
	}
}
</script>
  <dependencies />
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>string</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/plain'</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>regex</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/plain'</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>1</granularDepth>
      <name>split</name>
      <depth>1</depth>
      <mimeTypes>
        <string>l('text/plain')</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="regex" depth="0" /><port name="string" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>regex1</name><inputPorts /><outputPorts><port><name>value</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>stringconstant-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.stringconstant.StringConstantActivity</class><inputMap /><outputMap><map from="value" to="value" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean xmlns="">
  <value>,</value>
</net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy /></iteration></iterationStrategyStack></processor><processor><name>getReactionInstanceIds</name><inputPorts><port><name>reactionId</name><depth>0</depth></port></inputPorts><outputPorts><port><name>instanceIds</name><depth>1</depth><granularDepth>1</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>dataflow-activity</artifact><version>1.0.1</version></raven><class>net.sf.taverna.t2.activities.dataflow.DataflowActivity</class><inputMap><map from="reactionId" to="reactionId" /></inputMap><outputMap><map from="instanceIds" to="instanceIds" /></outputMap><configBean encoding="dataflow"><dataflow ref="454f2134-fd5f-498c-8b37-3ae8705c5d69" /></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="reactionId" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>getModifierIds</name><inputPorts><port><name>reactionId</name><depth>0</depth></port></inputPorts><outputPorts><port><name>modifierId</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="reactionId" to="reactionId" /></inputMap><outputMap><map from="modifierId" to="modifierId" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <script>import java.sql.*;
import org.sqlite.JDBC;

String DATABASE_NAME = "taverna_sbml";
String databaseURL = "jdbc:sqlite:" + DATABASE_NAME + ".db";

try
{
  driver = "org.sqlite.JDBC";
  Class.forName(driver);
  Connection conn = DriverManager.getConnection(databaseURL);
  Statement stat = conn.createStatement();
  ResultSet rs;
  sql = "select speciesId from reactionspecies where reactionId = '" + reactionId + "' and role = 'modifier';";
  rs = stat.executeQuery(sql);
  
  ArrayList al = new ArrayList();
  while (rs.next())
  {
    modifierId = rs.getString(1);
  }

  rs.close();
  conn.close();

} catch (ClassNotFoundException e)
{
  e.printStackTrace();
} catch (SQLException e)
{
  e.printStackTrace();
}</script>
  <dependencies />
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>reactionId</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>0</granularDepth>
      <name>modifierId</name>
      <depth>0</depth>
      <mimeTypes />
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="reactionId" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>getUniprotIds</name><inputPorts><port><name>modifierId</name><depth>0</depth></port></inputPorts><outputPorts><port><name>uniprotIds</name><depth>1</depth><granularDepth>1</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="modifierId" to="modifierId" /></inputMap><outputMap><map from="uniprotIds" to="uniprotIds" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <script>import java.sql.*;
import org.sqlite.JDBC;

String DATABASE_NAME = "taverna_sbml";
String databaseURL = "jdbc:sqlite:" + DATABASE_NAME + ".db";

//To hold uniprotIds
uniprotIds = new ArrayList();

try
{
  driver = "org.sqlite.JDBC";
  Class.forName(driver);
  Connection conn = DriverManager.getConnection(databaseURL);
  Statement stat = conn.createStatement();
  ResultSet rs;
  sql = "select uniprot from species where id = '" + modifierId + "';";
  rs = stat.executeQuery(sql);

  while (rs.next())
  {
    id = rs.getString(1);
    //Clean up
    id = id.replaceAll("urn:miriam:uniprot:", "");
    String[] tokens = id.split(",");
    for(int i = 0; i &lt; tokens.length; i++)
    {
      uniprotIds.add(tokens[i]);
    }
  }

  rs.close();
  conn.close();

} catch (ClassNotFoundException e)
{
  e.printStackTrace();
} catch (SQLException e)
{
  e.printStackTrace();
}</script>
  <dependencies />
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>modifierId</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>1</granularDepth>
      <name>uniprotIds</name>
      <depth>1</depth>
      <mimeTypes />
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="modifierId" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>getReactionInstanceIdsFromProtein</name><inputPorts><port><name>uniprot</name><depth>0</depth></port></inputPorts><outputPorts><port><name>instanceIds</name><depth>1</depth><granularDepth>1</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>dataflow-activity</artifact><version>1.0.1</version></raven><class>net.sf.taverna.t2.activities.dataflow.DataflowActivity</class><inputMap><map from="uniprot" to="uniprot" /></inputMap><outputMap><map from="instanceIds" to="instanceIds" /></outputMap><configBean encoding="dataflow"><dataflow ref="04c14986-82e5-4481-bb50-a05434eb45f1" /></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="uniprot" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>flattenInstIds</name><inputPorts><port><name>inputIds</name><depth>3</depth></port></inputPorts><outputPorts><port><name>outputIds</name><depth>2</depth><granularDepth>2</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="inputIds" to="inputIds" /></inputMap><outputMap><map from="outputIds" to="outputIds" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <script>//Output
outputIds = new ArrayList();

for(int i = 0; i &lt; inputIds.size(); i++)
{
  al1 = inputIds.get(i);
  if(al1.size() &lt; 1)
  {
    outputIds.add(al1);
  }
  else
  {
    al2 = new ArrayList();
    for(int x = 0; x &lt; al1.size(); x++)
    {
      al3 = al1.get(x);
      for(int y = 0; y &lt; al3.size(); y++)
      {
        String str = al3.get(y);
        if(!al2.contains(str))
          al2.add(str);
      }
    }
    outputIds.add(al2);
  }
}</script>
  <dependencies />
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>inputIds</name>
      <depth>3</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>2</granularDepth>
      <name>outputIds</name>
      <depth>2</depth>
      <mimeTypes />
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="inputIds" depth="3" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>filter</name><inputPorts><port><name>metaboliteInstIds</name><depth>3</depth></port><port><name>enzymeInstIds</name><depth>2</depth></port></inputPorts><outputPorts><port><name>finalInstIds</name><depth>3</depth><granularDepth>3</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="metaboliteInstIds" to="metaboliteInstIds" /><map from="enzymeInstIds" to="enzymeInstIds" /></inputMap><outputMap><map from="finalInstIds" to="finalInstIds" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <script>//Output
ArrayList finalInstIds = new ArrayList();

//Iterate thru 1st level list
for(int x  = 0; x &lt; metaboliteInstIds.size(); x++)
{
  ArrayList al2 = metaboliteInstIds.get(x);
  ArrayList second = new ArrayList();

  //Sort out enzyme reaction instance ids
  ArrayList enzymeIds = enzymeInstIds.get(x);

  //Iterate thru 2nd level list
  for(int y = 0; y &lt; al2.size(); y++)
  {
    ArrayList al3 = al2.get(y);
    ArrayList third = new ArrayList();

    for(int z = 0; z &lt; al3.size(); z++)
    {
      String str = al3.get(z);
      if(enzymeIds.contains(str))
        third.add(str);
    }
    second.add(third);
  }

  finalInstIds.add(second);
}</script>
  <dependencies />
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>metaboliteInstIds</name>
      <depth>3</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>enzymeInstIds</name>
      <depth>2</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>3</granularDepth>
      <name>finalInstIds</name>
      <depth>3</depth>
      <mimeTypes />
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="metaboliteInstIds" depth="3" /><port name="enzymeInstIds" depth="2" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>getKineticLaw</name><inputPorts><port><name>instId</name><depth>0</depth></port></inputPorts><outputPorts><port><name>kineticLaw</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>dataflow-activity</artifact><version>1.0.1</version></raven><class>net.sf.taverna.t2.activities.dataflow.DataflowActivity</class><inputMap><map from="instId" to="instId" /></inputMap><outputMap><map from="kineticLaw" to="kineticLaw" /></outputMap><configBean encoding="dataflow"><dataflow ref="ae787a2c-0368-4dc2-a11d-5200653a725b" /></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="instId" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>insertKineticLaw</name><inputPorts><port><name>formula</name><depth>3</depth></port><port><name>instId</name><depth>3</depth></port><port><name>reactionId</name><depth>1</depth></port></inputPorts><outputPorts /><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="instId" to="instId" /><map from="reactionId" to="reactionId" /><map from="formula" to="formula" /></inputMap><outputMap /><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <script>import java.sql.*;
import org.sqlite.JDBC;

String DATABASE_NAME = "taverna_sbml";
String databaseURL = "jdbc:sqlite:" + DATABASE_NAME + ".db";

System.out.println("Loading kinetic laws into sqlite data source");
try
{
  driver = "org.sqlite.JDBC";
  Class.forName(driver);
  Connection conn = DriverManager.getConnection(databaseURL);
  Statement stat = conn.createStatement();
  
  for(int i = 0; i &lt; formula.size(); i++)
  {
    reactionIdStr = reactionId.get(i);
    instIdList1 = instId.get(i);
    formulaList1 = formula.get(i);
    for(int x = 0; x &lt; formulaList1.size(); x++)
    {
      instIdList2 = instIdList1.get(x);
      formulaList2 = formulaList1.get(x);
      for(int z = 0; z &lt; formulaList2.size(); z++)
      {
        instIdStr = instIdList2.get(z);
        formulaStr = formulaList2.get(z);
        //Get rid of unknown kinetic laws as we cannot do anything with them
        if(formulaStr.equals("unknown"))
        {
          continue;
        }         
        else
        {
          sql = "insert into kineticlaw (id, reactionId, formula) values ('kl_" + instIdStr + "','" + reactionIdStr + "','" + formulaStr + "');";
          stat.execute(sql);
        }
      }
    }
  }

  conn.close();

} catch (ClassNotFoundException e)
{
  e.printStackTrace();
} catch (SQLException e)
{
  e.printStackTrace();
}</script>
  <dependencies />
  <classLoaderSharing>system</classLoaderSharing>
  <localDependencies>
    <string>libsbmlj.jar</string>
  </localDependencies>
  <artifactDependencies />
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>reactionId</name>
      <depth>1</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>formula</name>
      <depth>3</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>instId</name>
      <depth>3</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs />
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="formula" depth="3" /><port name="instId" depth="3" /><port name="reactionId" depth="1" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>getExptConditions</name><inputPorts><port><name>instId</name><depth>0</depth></port></inputPorts><outputPorts><port><name>exptalCondition</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>dataflow-activity</artifact><version>1.0.1</version></raven><class>net.sf.taverna.t2.activities.dataflow.DataflowActivity</class><inputMap><map from="instId" to="instId" /></inputMap><outputMap><map from="exptalCondition" to="exptalCondition" /></outputMap><configBean encoding="dataflow"><dataflow ref="edfebb96-4639-484f-848d-10bb3ac5e24f" /></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="instId" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>reactionInstIdSelector</name><inputPorts><port><name>expConditionsList</name><depth>3</depth></port><port><name>reactionIds</name><depth>1</depth></port></inputPorts><outputPorts /><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="reactionIds" to="reactionIds" /><map from="expConditionsList" to="expConditionsList" /></inputMap><outputMap /><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <script>import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.ListSelectionEvent;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.Container;
import java.io.*;
import java.util.Hashtable;
import java.util.ArrayList;
import java.sql.*;

import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;

import org.sqlite.JDBC;

DATABASE_NAME = "taverna_sbml";
databaseURL = "jdbc:sqlite:" + DATABASE_NAME + ".db";

class ModelWriter
{
  File file;
  Model model;

  ModelWriter(Model model)
  {
    this.model = model;
  }

  String[][] toArrayFilterReactionsWithoutInstIds()
  {
    int numrows = model.getNumReactionsWithInstIds();
    int numcols = 4;
    String[][] data = new String[numrows][numcols];

    //Iterate thru reactions
    int count = 0;
    ArrayList reactions = model.getReactions();
    for (int i = 0; i &lt; reactions.size(); i++)
    {
      sb = new StringBuffer();
      Reaction reaction = reactions.get(i);

      if (reaction.hasReactionInstIds())
      {
        //Add reaction to array
        //Get reaction id
        data[count][0] = String.valueOf(reaction.getId());
        data[count][1] = reaction.getReactionString();

        //Add modifier to array
        //Iterate thru modifiers
        ArrayList modifiers = reaction.getModifiers();
        if (modifiers.size() != 0)
        {
          Iterator modifiersIt = modifiers.iterator();
          while (modifiersIt.hasNext())
          {
            String modifier = (String) modifiersIt.next();
            sb.append(modifier);
            if (modifiersIt.hasNext())
              sb.append(" + ");
          }
        }
        data[count][2] = sb.toString();

        sb.delete(0, sb.length());

        //Iterate thru instance ids
        ArrayList ids = reaction.getreactionInstanceIds();
        if (ids.size() != 0)
        {
          Iterator idsIt = ids.iterator();
          while (idsIt.hasNext())
          {
            String modifier = (String) idsIt.next();
            sb.append(modifier);
            if (idsIt.hasNext())
              sb.append(";");
          }
        }
        data[count][3] = sb.toString();
        count = count + 1;
      }
    }

    return data;
  }

  String[][] toArray(boolean includeInstanceIds)
  {
    int num_reactions = model.getReactions().size();
    int numcols;
    if (includeInstanceIds)
      numcols = 4;
    else
      numcols = 3;

    String[][] data = new String[num_reactions][numcols];

    //Iterate thru reactions
    ArrayList reactions = model.getReactions();
    for (int i = 0; i &lt; reactions.size(); i++)
    {
      sb = new StringBuffer();
      Reaction reaction = reactions.get(i);

      //Get reaction id
      sb.append(reaction.getId() + ",");
      data[i][0] = sb.toString();

      //Get reaction string
      sb.delete(0, sb.length());
      sb.append("\"" + reaction.getReactionString() + "\"");
      //Add reaction to array
      data[i][1] = sb.toString();

      //Add modifier to array
      //Iterate thru modifiers
      sb.delete(0, sb.length());
      ArrayList modifiers = reaction.getModifiers();
      if (modifiers.size() != 0)
      {
        Iterator modifiersIt = modifiers.iterator();
        while (modifiersIt.hasNext())
        {
          String modifier = (String) modifiersIt.next();
          sb.append(modifier);
          if (modifiersIt.hasNext())
            sb.append(" + ");
        }
      }
      data[i][2] = sb.toString();

      if (includeInstanceIds)
      {
        sb.delete(0, sb.length());

        //Iterate thru instance ids
        ArrayList ids = reaction.getreactionInstanceIds();
        if (ids.size() != 0)
        {
          Iterator idsIt = ids.iterator();
          while (idsIt.hasNext())
          {
            String modifier = (String) idsIt.next();
            sb.append(modifier);
            if (idsIt.hasNext())
              sb.append(";");
          }
        }
        data[i][3] = sb.toString();
      }

    }

  return data;
  }

  String write(boolean includeInstanceIds)
  {
    ArrayList reactions = model.getReactions();
    sb = new StringBuffer();

    //Iterate thru reactions
    for (Reaction reaction : reactions)
    {
      //Get reaction id
      sb.append(reaction.getId() + ";");

      //Get reaction string
      sb.append("\"" + reaction.getReactionString() + "\";\"");

      //Sort out modifiers
      ArrayList modifiers = reaction.getModifiers();
      Iterator modifiersIt = modifiers.iterator();
      while (modifiersIt.hasNext())
      {
        String modifier = (String) modifiersIt.next();
        sb.append(modifier);
        if (modifiersIt.hasNext())
          sb.append(" + ");
      }
      sb.append("\";");

      if (includeInstanceIds)
      {
        //Iterate thru instance ids
        ArrayList ids = reaction.getreactionInstanceIds();
        if (ids.size() == 1)
        {
          String id = ids.get(0);
          if(id.equals(""))
            sb.append("0");
          else
            sb.append(id);
        }
      }
      sb.append("\n");
    }

    return sb.toString();
  }
}


class ModelReader
{
  Model model;
  int count = 1;

  ModelReader()
  {
    model = new Model();
  }

  void parse()
  {
    try
    {
      //Set up access to database
      driver = "org.sqlite.JDBC";
      Class.forName(driver);
      Connection conn = DriverManager.getConnection(databaseURL);
      Statement stat = conn.createStatement();

      for(int x = 0; x &lt; reactionIds.size(); x++)
      {
        String id = reactionIds.get(x);
        Reaction r = new Reaction(id);
        //Sort out reactants for each reaction
        //sql = "select speciesId from reactionspecies where reactionId = '" + id + "' and role = 'reactant';";
        sql = "select name from species where id in (select speciesId from reactionspecies where reactionId = '" + id + "' and role = 'reactant');";
        rs = stat.executeQuery(sql);
        while (rs.next())
        {
          speciesId = rs.getString(1);
          r.setReactant(speciesId);
        }
     
        //Sort out products for each reaction
        //sql = "select speciesId from reactionspecies where reactionId = '" + id + "' and role = 'product';";
        sql = "select name from species where id in (select speciesId from reactionspecies where reactionId = '" + id + "' and role = 'product');";
        rs = stat.executeQuery(sql);
        while (rs.next())
        {
          speciesId = rs.getString(1);
          r.setProduct(speciesId);
        }

        //Sort out modifiers for each reaction
        //sql = "select speciesId from reactionspecies where reactionId = '" + id + "' and role = 'modifier';";
        sql = "select name from species where id in (select speciesId from reactionspecies where reactionId = '" + id + "' and role = 'modifier');";
        rs = stat.executeQuery(sql);
        while (rs.next())
        {
          speciesId = rs.getString(1);
          r.setModifier(speciesId);
        }

        //Sort out reaction instance id for each reaction
        sql = "select id from kineticlaw where reactionId = '" + id + "';";
        rs = stat.executeQuery(sql);
        while (rs.next())
        {
          instanceId = rs.getString(1);
          r.setInstanceId(instanceId);
        }

        model.setReaction(r);
      }

      rs.close();
      conn.close();

    } catch (ClassNotFoundException e)
    {
      e.printStackTrace();
    } catch (SQLException e)
    {
      e.printStackTrace();
    }
  }

  public Model getModel()
  {
    return model;
  }

}

/**
 * To read experimental conditions from file
 */
class ExpConditionsReader
{
  ArrayList conditions;  
  String xml;
  Hashtable ht;
 
  ExpConditionsReader(ArrayList econ)
  {
    //expConditions = new ExperimentalConditions();
    this.xml = xml;
    ht = new Hashtable();
    conditions = econ;
  }

  Hashtable read()
  {
    //experimentalConditionsList is now a list of lists of lists ie a 3-deep list!

    for(int x = 0 ; x &lt; conditions.size(); x++)
    {
      ArrayList al = conditions.get(x);

      for(int i = 0 ; i &lt; al.size(); i++)
      {
        ArrayList al2 = al.get(i);

        for(int z = 0; z &lt; al2.size(); z++)
        {
          String xml = al2.get(z); 
          SAXBuilder builder = new SAXBuilder();
          Reader in = new StringReader(xml);
          Document doc;
          Element root;
          try
          {
            doc = builder.build(in);
            root = doc.getRootElement();
            String kl = root.getChild("kineticLawID").getText().trim();
            String pH = root.getChild("pH").getChild("start_Value_pH").getText().trim();

            //Check if there is a temperature tag in XML
            String temp;
            String unit;
            String buffer;
            if(!xml.contains("temperature"))
            {
              temp = "";
              unit = "";
              buffer = root.getChild("buffer").getText().trim();
            }
            else
            { 
              temp = root.getChild("temperature").getChild("start_Value_Temperature").getText().trim();
              unit = root.getChild("temperature").getChild("unit").getText().trim();
              buffer = root.getChild("buffer").getText().trim();
            }

            expConditions = new ExperimentalConditions(kl, pH, "", temp, "", unit, buffer);
            //System.out.println("Processed in exp condition: " + kl);
            ht.put("kl_"+ kl, expConditions);

          } catch (JDOMException e)
          {
            System.out.println("jdom exception");
            e.printStackTrace();
            expConditions = new ExperimentalConditions();
          } catch (IOException e)
          {
            System.out.println("io exception");
            expConditions = new ExperimentalConditions();
          } 
          catch (Exception e)
          {
            System.out.println("exception");
            e.printStackTrace();
            expConditions = new ExperimentalConditions();
          }        
        }
      }
    }

    return ht;
  }

  ExperimentalConditions getExperimentalConditions()
  {
    return expConditions;
  }
}

class ExperimentalConditions
{
  String kineticLawId;
  String pHStartValue;
  String pHEndValue;
  String temperatureStart;
  String temperatureEnd;
  String unit;
  String buffer;

  ExperimentalConditions()
  {
    kineticLawId = "";
    pHStartValue = "";
    pHEndValue = "";
    temperatureStart = "";
    temperatureEnd = "";
    unit = "";
    buffer = "";
  }

  ExperimentalConditions(String klId, String pHStart, String pHEnd, String tempStart, String tempEnd, String unit, String buffer)
  {
    kineticLawId = klId;
    pHStartValue = pHStart;
    pHEndValue = pHEnd;
    this.temperatureStart = tempStart;
    this.temperatureEnd = tempEnd;
    this.unit = unit;
    this.buffer = buffer;
  }

  void setKineticLawId(String klId)
  {
    this.kineticLawId = klId;
  }

  String getKineticLawId()
  {
    return this.kineticLawId;
  }

  void setPHStartValue(String phStart)
  {
    this.pHStartValue = phStart;
  }

  String getPHStartValue()
  {
    return this.pHStartValue;
  }

  void setPHEndValue(String phEnd)
  {
    this.pHEndValue = phEnd;
  }

  String getPHEndValue()
  {
    return this.pHEndValue;
  }

  void setStartTemperature(String tempStart)
  {
    this.temperatureStart = tempStart;
  }

  String getStartTemperature()
  {
    return this.temperatureStart;
  }

  void setEndTemperature(String tempEnd)
  {
    this.temperatureEnd = tempEnd;
  }

  String getEndTemperature()
  {
    return this.temperatureEnd;
  }

  void setUnit(String unit)
  {
    this.unit = unit;
  }

  String getUnit()
  {
    return this.unit;
  }

  void setBuffer(String buffer)
  {
    this.buffer = buffer;
  }

  String getBuffer()
  {
    return this.buffer;
  }
}

/**
 * For information about a reaction
  */
class Reaction
{
  ArrayList reactants;
  ArrayList products;
  ArrayList modifiers;
  ArrayList reactionInstanceIds;
  String id;

  Reaction()
  {
    id = "";
    reactants = new ArrayList();
    products = new ArrayList();
    modifiers = new ArrayList();
    reactionInstanceIds = new ArrayList();
  }

  Reaction(String id)
  {
    this.id = id;
    reactants = new ArrayList();
    products = new ArrayList();
    modifiers = new ArrayList();
    reactionInstanceIds = new ArrayList();
  }

  Reaction(ArrayList reactants, ArrayList products, ArrayList modifiers, ArrayList instanceIds)
  {
    this.reactants = reactants;
    this.products = products;
    this.modifiers = modifiers;
    this.reactionInstanceIds = instanceIds;
  }

  String getId()
  {
    return id;
  }

  void setId(String id)
  {
    this.id = id;
  }

  void setReactants(ArrayList reactants)
  {
    this.reactants = reactants;
  }

  ArrayList getReactants()
  {
    return reactants;
  }

  void setProducts(ArrayList products)
  {
    this.products = products;
  }

  public ArrayList getProducts()
  {
    return products;
  }

  void setModifiers(ArrayList modifiers)
  {
    this.modifiers = modifiers;
  }

  ArrayList getModifiers()
  {
    return modifiers;
  }

  void setReactionInstanceIds(ArrayList reactionInstanceIds)
  {
    this.reactionInstanceIds = reactionInstanceIds;
  }

  ArrayList getreactionInstanceIds()
  {
    return reactionInstanceIds;
  }

  void setReactant(String reactant)
  {
    reactants.add(reactant);
  }

  void setProduct(String product)
  {
    products.add(product);
  }

  void setModifier(String modifier)
  {
    modifiers.add(modifier);
  }

  void setInstanceId(String id)
  {
    reactionInstanceIds.add(id);
  }

  void deleteInstanceIds()
  {
    reactionInstanceIds.clear();
  }

  boolean hasReactionInstIds()
  {
    if(reactionInstanceIds.size() == 0)
      return false;
    else if (reactionInstanceIds.get(0).equals(""))
      return false;
    else
      return true;
  }

  String getReactionString()
  {
    sb = new StringBuffer();

    //Iterate thru reactants
    Iterator reactantsIt = reactants.iterator();
    while (reactantsIt.hasNext())
    {
      String reactant = (String) reactantsIt.next();
      sb.append(reactant);
      if (reactantsIt.hasNext())
        sb.append(" + ");
    }

    sb.append(" -&gt; ");

    //Iterate thru products
    Iterator productsIt = products.iterator();
    while (productsIt.hasNext())
    {
      String product = (String) productsIt.next();
      sb.append(product);
      if (productsIt.hasNext())
        sb.append(" + ");
    }
        
    return sb.toString();
  }
}

/**
 * For holding a list of reactions
 */
class Model
{
  ArrayList reactions;

  Model()
  {
    reactions = new ArrayList();
  }

  Model(ArrayList reactions)
  {
    this.reactions = reactions;
  }

  Reaction getReaction(String id)
  {
    for (Reaction reaction : reactions)
    {
      if (id == reaction.getId())
        return reaction;
    }

      return new Reaction();
  }

  ArrayList getReactions()
  {
    return reactions;
  }

  void setReactions(ArrayList reactions)
  {
    this.reactions = reactions;
  }

  void setReaction(Reaction reaction)
  {
    reactions.add(reaction);
  }

  int getNumReactionsWithInstIds()
  {
    System.out.println("Invoking Model.getNumReactionsWithInstIds()...");
    int count = 0;
    for (Reaction r : reactions)
    {
      ArrayList ids = r.getreactionInstanceIds();
      if(ids.size() == 0)
        continue;

      if (!ids.get(0).equals(""))
        count += 1;
    }
      System.out.println("No. of reactions with reaction instance ids: " + count);
      return count;
  }

  void updateReaction(String id, String reactionInstId)
  {
    Reaction r = this.getReaction(id);
    r.deleteInstanceIds();
    r.setInstanceId(reactionInstId);
  }
}

/**
 * Class representing the CSV string of this beanshell processor
 */
class CSVString
{
  String csv;

  CSVString()
  {
    csv = "";
  }

  synchronized void setCSV(String string)
  {
    csv = string;

    notifyAll();
  }

  synchronized String getCSV()
  {
    while (csv.equals(""))
    {
      try
      {
        wait();
      }
      catch (InterruptedException e)
      {
        e.printStackTrace();
      }
    }

    return csv;
  }
}

/**
 * Class representing the GUI for selecting the values to be
 * processed by the remainder of the workflow.
 */
MultipleSelectWorkerGUI(ArrayList expCon, ArrayList reactionIds, CSVString csvStr)
{
  //New
  String rowSelected;
  int row;
  String reactionInstIdSelected;
  Model m;
  String selectedReactionId;

  JTable table;
  DefaultTableModel tablemodel;
  JSplitPane splitPane;
  JTextArea expCondition;
  JList list;
  JButton submitButton;

  Hashtable ht;

  CSVString csvString;
  
  System.out.println("Instantiating reaction instance selector wizard");
  void init()
  {
    super.frame = new JFrame("Select data for downstream analysis");
    //Place window in centre of the screen
    super.frame.setLocationRelativeTo(null);
    pane = new JPanel(); 
    super.frame.getContentPane().add(pane); 
    //pane.setLayout(new BorderLayout()); 
    pane.setLayout(new BoxLayout(pane, BoxLayout.PAGE_AXIS));

    csvString = csvStr;

    //Load data
    ModelReader reader = new ModelReader();
    reader.parse();
    m = reader.getModel();
    ModelWriter writer = new ModelWriter(m);
    String[][] data = writer.toArrayFilterReactionsWithoutInstIds();
    String[] colnames = {"Id", "Reaction", "Modifier"};

    tablemodel = new DefaultTableModel();
    tablemodel.setDataVector(data, colnames);
    table = new JTable(tablemodel);

    //Disable auto resizing
    table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
    TableColumn col0 = table.getColumnModel().getColumn(0);
    col0.setPreferredWidth(100);
    TableColumn col = table.getColumnModel().getColumn(1);
    col.setPreferredWidth(600);
    TableColumn col2 = table.getColumnModel().getColumn(2);
    col2.setPreferredWidth(100);
    table.setPreferredScrollableViewportSize(new Dimension(800, 100));

    rowListener = new ListSelectionListener()
    {
      void valueChanged(ListSelectionEvent event)
      {
        if (event.getValueIsAdjusting())
        {
          return;
        }
        //Selected row changed, do something...
        showReactionInstIds();
      }
    };

    table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    DefaultListSelectionModel lst = table.getSelectionModel();
    lst.addListSelectionListener(rowListener);

    JScrollPane tableScrollPane = new JScrollPane(table);
    pane.add(tableScrollPane);

    //Create the list of images and put it in a scroll pane
    list = new JList();
    list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    list.setSelectedIndex(0);
    list.addListSelectionListener(this);
    JScrollPane listScrollPane = new JScrollPane(list);

    expCondition = new JTextArea();
    JScrollPane expConScrollPane = new JScrollPane(expCondition);

    //Create a split pane with the two scroll panes in it.
    splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, listScrollPane, expConScrollPane);
    splitPane.setOneTouchExpandable(true);
    splitPane.setDividerLocation(300);
    pane.add(splitPane);

    //Provide minimum sizes for the two components in the split pane
    Dimension minimumSize = new Dimension(100, 50);
    listScrollPane.setMinimumSize(minimumSize);
    expConScrollPane.setMinimumSize(minimumSize);

    //Create a panel
    JPanel buttonPane = new JPanel();
    submitButton = new JButton("Submit");
    submitButton.setActionCommand("submit");
    submitButton.addActionListener(this);
    submitButton.setEnabled(false);
    buttonPane.add(submitButton);
    buttonPane.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
    pane.add(submitButton);

    ExpConditionsReader conditionsReader = new ExpConditionsReader(expCon);
    ht = conditionsReader.read();

    //frame.setSize(800,500);
    frame.setVisible(true); 
    frame.pack(); 

    //Check if table has no rows
    if(tablemodel.getRowCount() == 0)
    {
      System.out.println("No kinetics were found in SABIO-RK for reactions in the SBML model!");      
      csvString.setCSV("No kinetics found");
      super.frame.dispose();
    }  
  }

  //This method is required by ListSelectionListener.
  void valueChanged(ListSelectionEvent e)
  {
    JList list = (JList) e.getSource();
    ListModel m = list.getModel();
    reactionInstIdSelected = (String) list.getSelectedValue();
    updateLabel(reactionInstIdSelected);
    submitButton.setEnabled(true);
  }

  //Renders the selected image
  void updateLabel(String value)
  {
    //Check if value is null as it will cause a null pointer exception message in the console
    if(value != null)
    {
      ExperimentalConditions c = ht.get(value);
      expCondition.setText("kl id:" + c.getKineticLawId() + "\nStart pH:" + c.getPHStartValue() + "\nStart temp: " + c.getStartTemperature() + "\nUnit: " + c.getUnit() + "\nBuffer:" + c.getBuffer());
    }
  }

  // This method is called only if there is a valid selection
  void actionPerformed(ActionEvent e)
  {
    //New
    String command = e.getActionCommand();

    if("submit".equals(command))
    {
      tablemodel.removeRow(row);

      //Now need to update model data
      m.updateReaction(selectedReactionId, reactionInstIdSelected);

      //Reset
      submitButton.setEnabled(false);

      //Check if table has no rows
      if(tablemodel.getRowCount() == 0)
      {
        //Output new CSV file
        ModelWriter writer = new ModelWriter(m);
        String output = writer.write(true);
        String[] lines = output.split("\n");
        for(int i = 0; i &lt; lines.length; i++)
        {
          String[] tokens = lines[i].split(";");
          if(tokens.length &lt; 4)
            continue;
          else
            selectedKLIds.add(tokens[3]);
        }
        
        csvString.setCSV(reactionInstIdSelected);
        super.frame.dispose();
      }  
    }
  }

  void showReactionInstIds()
  {
    for (int c : table.getSelectedRows())
    {
      rowSelected = "Row selected: " + c;
      row = c;
      selectedReactionId = (String) tablemodel.getValueAt(c, 0);

      //Get reactionsInstIds from data
      Reaction r = m.getReaction(selectedReactionId);
      ArrayList reactionsInstIds = r.getreactionInstanceIds();
      list.setListData(reactionsInstIds.toArray());
    }
  }

  init(); 
  return this; 
}


/**
 * Wrapper for MultipleSelectWorkerGUI
 */ 
class WorkerWrapper extends Thread
{
  ArrayList eConditions;
  ArrayList rIds;
  CSVString csvString; 

  WorkerWrapper(ArrayList expConditionsList, ArrayList reactionIds, CSVString csvStr)
  {
    eConditions = expConditionsList;
    rIds = reactionIds;
    csvString = csvStr;
  }

  void run()
  {
    msw = MultipleSelectWorkerGUI(eConditions, rIds, csvString);
  }
}

selectedKLIds = new ArrayList();
csvString = new CSVString();
wrapper = new WorkerWrapper(expConditionsList, reactionIds, csvString);
wrapper.start();
String csv = csvString.getCSV();

if(csv.equals("No kinetics found"))
{
}
else
{
  //Contains unwanted kinetic law ids
  unwantedKLIds = new ArrayList();

  //Need to update kinetic law table so that it only contains the reaction instance ids selected
  try
  {
    //Set up access to database
    driver = "org.sqlite.JDBC";
    Class.forName(driver);
    Connection conn = DriverManager.getConnection(databaseURL);
    Statement stat = conn.createStatement();
    sql = "select id from kineticlaw;";
    rs = stat.executeQuery(sql);
  
    while (rs.next())
    {
      instId = rs.getString(1);
      if(!selectedKLIds.contains(instId))
      {
        unwantedKLIds.add(instId);   
      }
    }
    rs.close();
    conn.setAutoCommit(false);
    conn.setAutoCommit(true);
    conn.close();
  
  } catch (ClassNotFoundException e)
  {
    e.printStackTrace();
  } catch (SQLException e)
  {
    e.printStackTrace();
  }


  try
  {
    //Set up access to database
    driver = "org.sqlite.JDBC";
    Class.forName(driver);
    Connection conn = DriverManager.getConnection(databaseURL);
    Statement stat = conn.createStatement();
  
    System.out.println("Removing unwanted kinetic law ids from sqlite data source");
    for(int i = 0 ; i &lt; unwantedKLIds.size(); i++)
    {
      //Delete
      sql2 = "delete from kineticlaw where id = '" + unwantedKLIds.get(i) + "';";
      stat.execute(sql2);
    }
    conn.setAutoCommit(false);
    conn.setAutoCommit(true);
    conn.close();
  
  } catch (ClassNotFoundException e)
  {
    e.printStackTrace();
  } catch (SQLException e)
  {
    e.printStackTrace();
  }
}</script>
  <dependencies />
  <classLoaderSharing>system</classLoaderSharing>
  <localDependencies>
    <string>sqlitejdbc-v053.jar</string>
  </localDependencies>
  <artifactDependencies />
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>expConditionsList</name>
      <depth>3</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>reactionIds</name>
      <depth>1</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>0</granularDepth>
      <name>csv</name>
      <depth>0</depth>
      <mimeTypes />
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="expConditionsList" depth="3" /><port name="reactionIds" depth="1" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>getKineticLawIds</name><inputPorts /><outputPorts><port><name>kineticLawIds</name><depth>1</depth><granularDepth>1</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap /><outputMap><map from="kineticLawIds" to="kineticLawIds" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <script>import java.sql.*;
import org.sqlite.JDBC;

String DATABASE_NAME = "taverna_sbml";
String databaseURL = "jdbc:sqlite:" + DATABASE_NAME + ".db";

kineticLawIds = new ArrayList();

try
{
  driver = "org.sqlite.JDBC";
  Class.forName(driver);
  Connection conn = DriverManager.getConnection(databaseURL);
  Statement stat = conn.createStatement();
  
  sql = "select id from kineticlaw;";
  ResultSet rs = stat.executeQuery(sql);
  
  while (rs.next())
  {
    kineticLawIds.add(rs.getString(1).replaceAll("kl_", ""));
  }

  rs.close();
  conn.close();

} catch (ClassNotFoundException e)
{
  e.printStackTrace();
} catch (SQLException e)
{
  e.printStackTrace();
}</script>
  <dependencies />
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies>
    <string>sqlitejdbc-v053.jar</string>
  </localDependencies>
  <artifactDependencies />
  <inputs />
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>1</granularDepth>
      <name>kineticLawIds</name>
      <depth>1</depth>
      <mimeTypes />
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy /></iteration></iterationStrategyStack></processor><processor><name>getParameters</name><inputPorts><port><name>instId</name><depth>0</depth></port></inputPorts><outputPorts><port><name>parameters</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>dataflow-activity</artifact><version>1.0.1</version></raven><class>net.sf.taverna.t2.activities.dataflow.DataflowActivity</class><inputMap><map from="instId" to="instId" /></inputMap><outputMap><map from="parameters" to="parameters" /></outputMap><configBean encoding="dataflow"><dataflow ref="ff360581-6252-4541-bfd0-4091d5c8eaad" /></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="instId" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>insertParameters</name><inputPorts><port><name>paramsList</name><depth>1</depth></port></inputPorts><outputPorts><port><name>units</name><depth>1</depth><granularDepth>1</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="paramsList" to="paramsList" /></inputMap><outputMap><map from="units" to="units" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <script>import java.util.ArrayList;
import org.jdom.input.SAXBuilder;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;

import java.io.Reader;
import java.io.StringReader;
import java.io.IOException;
import java.util.List;

import java.sql.*;
import org.sqlite.JDBC;

class Parameter
{
  String parameterID;
  String parameterName;
  String species;
  String parameterType;
  String startValue;
  String deviation;
  String endValue;
  String unit;

  Parameter()
  {
    parameterID = "";
    parameterName = "";
    species = "";
    parameterType = "";
    startValue = "";
    deviation = "";
    endValue = "";
    unit = "";
  }

  Parameter(String parameterID, String parameterName, String species, String parameterType, String startValue, String deviation, String endValue, String unit)
  {
    this.parameterID = parameterID;
    this.parameterName = parameterName;
    this.species = species;
    this.parameterType = parameterType;
    this.startValue = startValue;
    this.deviation = deviation;
    this.endValue = endValue;
    this.unit = unit;
  }

  String getParameterID()
  {
    return parameterID;
  }

  void setParameterID(String paramId)
  {
    parameterID = paramId;
  }

  String getParameterName()
  {
      return parameterName;
  }

  void setParameterName(String paramName)
  {
    parameterName = paramName;
  }

  String getSpecies()
  {
    return species;
  }

  void setSpecies(String species)
  {
    this.species = species;
  }

  String getParameterType()
  {
    return parameterType;
  }

  void setParameterType(String paramType)
  {
    this.parameterType = paramType;
  }

  String getStartValue()
  {
    return startValue;
  }

  void setStartValue(String startValue)
  {
    this.startValue = startValue;
  }

  String getDeviation()
  { 
    return deviation;
  }

  void setDeviation(String deviation)
  {
    this.deviation = deviation;
  }

  String getEndValue()
  {
    return endValue;
  }

  void setEndValue(String endValue)
  {
    this.endValue = endValue;
  }

  String getUnit()
  { 
    return unit;
  }

  void setUnit(String unit)
  {
    this.unit = unit;
  }
}

class Parameters
{
  String kineticLawId;
  ArrayList parameters;

  Parameters()
  {
    kineticLawId = "";
    parameters = new ArrayList();
  }

  Parameters(String klId, ArrayList parameters)
  {
    kineticLawId = klId;
    this.parameters = parameters;
  }

  String getKineticLawId()
  {
    return kineticLawId;
  }

  void setKineticLawId(String klId)
  {
        kineticLawId = klId;
  }

  ArrayList getParameters()
  {
    return parameters;
  }

  void setParameters(ArrayList params)
  {
    parameters = params;
  }
}

ArrayList units = new ArrayList();

System.out.println("Loading selected parameters into sqlite data source");
DATABASE_NAME = "taverna_sbml";
databaseURL = "jdbc:sqlite:" + DATABASE_NAME + ".db";

for(int i = 0; i &lt; paramsList.size(); i++)
{
  String param = paramsList.get(i);
  //Read parameters xml file
  SAXBuilder builder = new SAXBuilder();
  Reader in = new StringReader(param);
  Document doc;
  Element root;

  Parameters params;

  //To hold species parameters for editing kinetic law formula
  bad_params = new Hashtable();
  try
  {
    ArrayList paramList = new ArrayList();

    doc = builder.build(in);
    root = doc.getRootElement();
    String kl = root.getChild("kineticLawID").getText().trim();
    List elements = root.getChildren("Parameter");
    for(int i = 0; i &lt; elements.size(); i++)
    {
      Element e = (Element) elements.get(i);
      String paramId = e.getChild("ParameterID").getTextTrim();
      String paramName = e.getChild("ParameterName").getTextTrim();
      String sp = e.getChild("Species").getTextTrim();
      String paramType = e.getChild("ParameterType").getTextTrim();
      String start = e.getChild("StartValue").getTextTrim();
      String dev = e.getChild("Deviation").getTextTrim();
      String end = e.getChild("EndValue").getTextTrim();
      String u = e.getChild("Unit").getTextTrim();

      //Check if parameter is a concentration of a species in the SBML model
      if(paramType.equals("concentration"))
      {
        //Need to check if parameter is an enzyme
        if(paramName.equals("E") &amp;&amp; sp.equals("Enzyme"))
        {

          //Get SBML species id for the enzyme
          try
          {
            driver = "org.sqlite.JDBC";
            Class.forName(driver);
            Connection conn = DriverManager.getConnection(databaseURL);
            Statement stat = conn.createStatement();
            enzymeSql = "select speciesId from reactionspecies where role = 'modifier' and reactionId in (select reactionId from kineticlaw where id = 'kl_" + kl + "');";
            rs = stat.executeQuery(enzymeSql);
            while (rs.next())
            {
              bad_params.put(paramName, rs.getString(1));
              paramName = paramName + "_"; //Hack so enzyme parameter is not added into list of parameters in SBML model
            }

            conn.close();

          } catch (ClassNotFoundException e)
          {
            e.printStackTrace();
          } catch (SQLException e)
          {
            e.printStackTrace();
          }  

        }

        //Map parameter name with species name in SBML model
        try
        {
          driver = "org.sqlite.JDBC";
          Class.forName(driver);
          Connection conn = DriverManager.getConnection(databaseURL);
          Statement stat = conn.createStatement();
          sql = "select id from species where sabioCompoundName = '" + sp + "';";
          rs = stat.executeQuery(sql);
          while (rs.next())
          {
            bad_params.put(paramName, rs.getString(1));
            paramName = rs.getString(1);
          }

          conn.close();

        } catch (ClassNotFoundException e)
        {
          e.printStackTrace();
        } catch (SQLException e)
        {
          e.printStackTrace();
        }  
      }
      
      //Don't need to create parameter object if the parameter is a species in the model
      //Currently a hack by checking if the species name contains an underscore
      if(!paramName.contains("_"))
      {  
        Parameter param = new Parameter(paramId, paramName, sp, paramType, start, dev, end, u);
        paramList.add(param);
      }
    }

    params = new Parameters();
    params.setKineticLawId("kl_" + kl);
    params.setParameters(paramList);

    //Fix kinetic law formula
    if(bad_params.size() &gt; 0)
    {
      String formula = "";
      //Get formula
      try
      {
        driver = "org.sqlite.JDBC";
        Class.forName(driver);
        Connection conn = DriverManager.getConnection(databaseURL);
        Statement stat = conn.createStatement();
        sql = "select formula from kineticlaw where id = 'kl_" + kl + "';";
        rs = stat.executeQuery(sql);
        while (rs.next())
        {
          formula = rs.getString(1);
        }
        conn.close();

      } catch (ClassNotFoundException e)
      {
        e.printStackTrace();
      } catch (SQLException e)
      {
        e.printStackTrace();
      }  
      
      //Fix formula
      Iterator it = bad_params.keys();
      while(it.hasNext())
      {
        String key = it.nextElement();
        formula = formula.replaceAll(key, bad_params.get(key));
      }

      //Change formula in sqlite database
      try
      {
        driver = "org.sqlite.JDBC";
        Class.forName(driver);
        Connection conn = DriverManager.getConnection(databaseURL);
        Statement stat = conn.createStatement();
        sql = "update kineticlaw set formula = '" + formula + "' where id = 'kl_" + kl + "';";
        stat.execute(sql);
        conn.close();

      } catch (ClassNotFoundException e)
      {
        e.printStackTrace();
      } catch (SQLException e)
      {
        e.printStackTrace();
      }  
    }


  } catch (JDOMException e)
  {
    System.out.println("jdom exception");
    e.printStackTrace();
  } catch (IOException e)
  {
    System.out.println("io exception");
  } catch (Exception e)
  {
    System.out.println("exception");
    e.printStackTrace();
  }

  //Load data into database
  try
  {
    driver = "org.sqlite.JDBC";
    Class.forName(driver);
    Connection conn = DriverManager.getConnection(databaseURL);
    Statement stat = conn.createStatement();
    ArrayList al = params.getParameters();
    for(int i = 0; i &lt; al.size(); i++)
    {
      Parameter p = al.get(i);
      /*
        Problematic parameter units
        s^(-1) per_second
        mM^(-1)*s^(-1) per_millimolar_per_second
        µM^(-1)*s^(-1) per_micromolar_per_second
        min^(-1) per_minute
        mg^(-1)*min^(-1) per_milligram_per_minute
        M^(-1)*s^(-1) per_molar_per_second
      */
      //Sort out problematic parameter units
      String unit = p.getUnit();
      if(unit.equals("s^(-1)"))
        unit = "per_second";
      else if(unit.equals("mM^(-1)*s^(-1)"))
        unit = "per_millimolar_per_second";
      else if(unit.equals("µM^(-1)*s^(-1)"))
        unit = "per_micromolar_per_second";
      else if(unit.equals("min^(-1)"))
        unit = "per_minute";
      else if(unit.equals("mg^(-1)*min^(-1)"))
        unit = "per_milligram_per_minute";
      else if(unit.equals("M^(-1)*s^(-1)"))
      {
        unit = "per_molar_per_second";

        //Convert to per_millimolar_per_second
        unit = "per_millimolar_per_second";
        double stValue = Double.parseDouble(p.getStartValue());
        stValue = stValue*1000;
        p.setStartValue(Double.toString(stValue));
      }

      sql = "insert into parameter (id, name, type, kineticLawId, speciesId, stValue, stDeviation, endValue, unitId) values ('" 
        + p.getParameterID() + "','"
        + p.getParameterName() + "','" 
        + p.getParameterType() + "','"
        + params.getKineticLawId() + "','"
        + p.getSpecies() + "','"
        + p.getStartValue() + "','"
        + p.getDeviation() + "','"
        + p.getEndValue() + "','"
        + unit + "');";
      stat.execute(sql);

      //Add to unit if not present
      if(!units.contains(unit))
        units.add(unit);
    }

    conn.close();

  } catch (ClassNotFoundException e)
  {
    e.printStackTrace();
  } catch (SQLException e)
  {
    e.printStackTrace();
  }
}</script>
  <dependencies />
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies>
    <string>sqlitejdbc-v053.jar</string>
  </localDependencies>
  <artifactDependencies />
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>paramsList</name>
      <depth>1</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>1</granularDepth>
      <name>units</name>
      <depth>1</depth>
      <mimeTypes />
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="paramsList" depth="1" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>insertUnits</name><inputPorts><port><name>units</name><depth>1</depth></port></inputPorts><outputPorts /><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="units" to="units" /></inputMap><outputMap /><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <script>import java.sql.*;
import org.sqlite.JDBC;

DATABASE_NAME = "taverna_sbml";
databaseURL = "jdbc:sqlite:" + DATABASE_NAME + ".db";

unitsStore = new ArrayList();

System.out.println("Loading units into sqlite data source");

driver = "org.sqlite.JDBC";
Class.forName(driver);
Connection conn = DriverManager.getConnection(databaseURL);
Statement stat = conn.createStatement();

for(int i = 0 ; i &lt; units.size(); i++)
{ 
    String u = units.get(i);
    if(u.equals("mM")  &amp;&amp; !unitsStore.contains("mM"))
    {
      try
      {
        sql = "insert into unit (id, description, sbmlUnitId) values ('" + u + "', 'millimolar', '1');";
        stat.execute(sql);
        sql = "insert into unit (id, description, sbmlUnitId) values ('" + u + "', 'millimolar', '2');";
	stat.execute(sql);
        sql = "insert into sbmlunit (id, kind, exponent, scale, multiplier, offset) values ('1', 'litre', '-1', '', '', '');";
	stat.execute(sql);
        sql = "insert into sbmlunit (id, kind, exponent, scale, multiplier, offset) values ('2', 'mole', '',  '-3', '', '');";
	stat.execute(sql); 

      } catch (ClassNotFoundException e)
      {
        e.printStackTrace();
      } catch (SQLException e)
      {
        e.printStackTrace();
      }    
      unitsStore.add("mM");
    }
   
    else if(u.equals("µM")  &amp;&amp; !unitsStore.contains("µM"))
    {
      try
      {
        //sql = "insert into unit (id, description, sbmlUnitId) values ('" + u + "', 'micromolar', '3');";
        sql = "insert into unit (id, description, sbmlUnitId) values ('micromolar', 'micromolar', '3');";
	stat.execute(sql);
        //sql = "insert into unit (id, description, sbmlUnitId) values ('" + u + "', 'micromolar', '4');";
        sql = "insert into unit (id, description, sbmlUnitId) values ('micromolar', 'micromolar', '4');";
	stat.execute(sql);
        sql = "insert into sbmlunit (id, kind, exponent, scale, multiplier, offset) values ('3', 'litre', '-1', '', '', '');";
	stat.execute(sql);
        sql = "insert into sbmlunit (id, kind, exponent, scale, multiplier, offset) values ('4', 'mole', '', '-6', '', '');";
	stat.execute(sql); 

      } catch (ClassNotFoundException e)
      {
        e.printStackTrace();
      } catch (SQLException e)
      {
        e.printStackTrace();
      }    
      unitsStore.add("µM");
    }

    else if(u.equals("nM")  &amp;&amp; !unitsStore.contains("nM"))
    {
      try
      {
        sql = "insert into unit (id, description, sbmlUnitId) values ('" + u + "', 'nanomolar', '5');";
	stat.execute(sql);
        sql = "insert into unit (id, description, sbmlUnitId) values ('" + u + "', 'nanomolar', '6');";
	stat.execute(sql);
        sql = "insert into sbmlunit (id, kind, exponent, scale, multiplier, offset) values ('5', 'litre', '-1', '', '', '');";
	stat.execute(sql);
        sql = "insert into sbmlunit (id, kind, exponent, scale, multiplier, offset) values ('6', 'mole', '', '-9', '', '');";
	stat.execute(sql); 

      } catch (ClassNotFoundException e)
      {
        e.printStackTrace();
      } catch (SQLException e)
      {
        e.printStackTrace();
      }    
      unitsStore.add("nM");
    }

    else if(u.equals("U/ml")  &amp;&amp; !unitsStore.contains("U/ml"))
    {
      //Set up database
      try
      {
        sql = "insert into unit (id, description, sbmlUnitId) values ('" + u + "', '" + u + "', '7');";
	stat.execute(sql);
        sql = "insert into unit (id, description, sbmlUnitId) values ('" + u + "', '" + u + "', '8');";
	stat.execute(sql);
        sql = "insert into sbmlunit (id, kind, exponent, scale, multiplier, offset) values ('7', 'katal', '', '-9', '16.6669998168945', '');";
	stat.execute(sql);
        sql = "insert into sbmlunit (id, kind, exponent, scale, multiplier, offset) values ('8', 'litre', '-1', '-3', '1', '');";
	stat.execute(sql); 

      } catch (ClassNotFoundException e)
      {
        e.printStackTrace();
      } catch (SQLException e)
      {
        e.printStackTrace();
      }    
      unitsStore.add("U/ml");
    }

    else if(u.equals("microM")  &amp;&amp; !unitsStore.contains("microM"))
    {
      //Set up database
      try
      {
        sql = "insert into unit (id, description, sbmlUnitId) values ('" + u + "', 'micromolar', '9');";
	stat.execute(sql);
        sql = "insert into unit (id, description, sbmlUnitId) values ('" + u + "', 'micromolar', '10');";
	stat.execute(sql);
        sql = "insert into sbmlunit (id, kind, exponent, scale, multiplier, offset) values ('9', 'litre', '-1', '', '1', '');";
	stat.execute(sql);
        sql = "insert into sbmlunit (id, kind, exponent, scale, multiplier, offset) values ('10', 'mole', '', '-6', '1', '');";
	stat.execute(sql); 

      } catch (ClassNotFoundException e)
      {
        e.printStackTrace();
      } catch (SQLException e)
      {
        e.printStackTrace();
      }    
      unitsStore.add("microM");
    }

    else if(u.equals("per_second")  &amp;&amp; !unitsStore.contains("per_second"))
    {
      //Cannot have caret characters in sbml id attributes
      u = "per_second";
      //Set up database
      try
      {
        sql = "insert into unit (id, description, sbmlUnitId) values ('" + u + "', '" + u + "', '11');";
	stat.execute(sql);
        sql = "insert into sbmlunit (id, kind, exponent, scale, multiplier, offset) values ('11', 'second', '-1', '', '1', '');";
	stat.execute(sql); 

      } catch (ClassNotFoundException e)
      {
        e.printStackTrace();
      } catch (SQLException e)
      {
        e.printStackTrace();
      }    
      //unitsStore.add("s^(-1)");
      unitsStore.add(u);
    }

    else if(u.equals("U/mg")  &amp;&amp; !unitsStore.contains("U/mg"))
    {
      //Set up database
      try
      {
        sql = "insert into unit (id, description, sbmlUnitId) values ('" + u + "', '" + u + "', '12');";
	stat.execute(sql);
        sql = "insert into unit (id, description, sbmlUnitId) values ('" + u + "', '" + u + "', '13');";
	stat.execute(sql);
        sql = "insert into sbmlunit (id, kind, exponent, scale, multiplier, offset) values ('12', 'katal', '', '-9', '16.6669998168945', '');";
	stat.execute(sql); 
        sql = "insert into sbmlunit (id, kind, exponent, scale, multiplier, offset) values ('13', 'gram', '-1', '-3', '1', '');";
	stat.execute(sql); 

      } catch (ClassNotFoundException e)
      {
        e.printStackTrace();
      } catch (SQLException e)
      {
        e.printStackTrace();
      }    
      unitsStore.add("U/mg");
    }

    else if(u.equals("M")  &amp;&amp; !unitsStore.contains("M"))
    {
      //Set up database
      try
      {
        sql = "insert into unit (id, description, sbmlUnitId) values ('" + u + "', 'molar', '14');";
	stat.execute(sql);
        sql = "insert into unit (id, description, sbmlUnitId) values ('" + u + "', 'molar', '15');";
	stat.execute(sql);
        sql = "insert into sbmlunit (id, kind, exponent, scale, multiplier, offset) values ('14', 'mole', '', '', '1', '');";
	stat.execute(sql); 
        sql = "insert into sbmlunit (id, kind, exponent, scale, multiplier, offset) values ('15', 'litre', '-1', '', '1', '');";
	stat.execute(sql); 

      } catch (ClassNotFoundException e)
      {
        e.printStackTrace();
      } catch (SQLException e)
      {
        e.printStackTrace();
      }    
      unitsStore.add("M");
    }

    //else if(u.equals("mM^(-1)*s^(-1)")  &amp;&amp; !unitsStore.contains("mM^(-1)*s^(-1)"))
    else if(u.equals("per_millimolar_per_second")  &amp;&amp; !unitsStore.contains("per_millimolar_per_second"))
    {
      //Cannot have caret characters in sbml id attributes
      u = "per_millimolar_per_second";
      //Set up database
      try
      {
        sql = "insert into unit (id, description, sbmlUnitId) values ('" + u + "', '" + u + "', '16');";
	stat.execute(sql);
        sql = "insert into unit (id, description, sbmlUnitId) values ('" + u + "', '" + u + "', '17');";
	stat.execute(sql);
        sql = "insert into unit (id, description, sbmlUnitId) values ('" + u + "', '" + u + "', '18');";
	stat.execute(sql);
        sql = "insert into sbmlunit (id, kind, exponent, scale, multiplier, offset) values ('16', 'litre', '', '', '1', '');";
	stat.execute(sql); 
        sql = "insert into sbmlunit (id, kind, exponent, scale, multiplier, offset) values ('17', 'mole', '-1', '-3', '1', '');";
	stat.execute(sql); 
        sql = "insert into sbmlunit (id, kind, exponent, scale, multiplier, offset) values ('18', 'second', '-1', '', '1', '');";
	stat.execute(sql); 

      } catch (ClassNotFoundException e)
      {
        e.printStackTrace();
      } catch (SQLException e)
      {
        e.printStackTrace();
      }    
      //unitsStore.add("mM^(-1)*s^(-1)");
      unitsStore.add(u);
    }

    //else if(u.equals("µM^(-1)*s^(-1)")  &amp;&amp; !unitsStore.contains("µM^(-1)*s^(-1)"))
    else if(u.equals("per_micromolar_per_second")  &amp;&amp; !unitsStore.contains("per_micromolar_per_second"))
    {
      //Cannot have caret characters in sbml id attributes
      u = "per_micromolar_per_second";
      //Set up database
      try
      {
        sql = "insert into unit (id, description, sbmlUnitId) values ('" + u + "', '" + u + "', '19');";
	stat.execute(sql);
        sql = "insert into unit (id, description, sbmlUnitId) values ('" + u + "', '" + u + "', '20');";
	stat.execute(sql);
        sql = "insert into unit (id, description, sbmlUnitId) values ('" + u + "', '" + u + "', '21');";
	stat.execute(sql);
        sql = "insert into sbmlunit (id, kind, exponent, scale, multiplier, offset) values ('19', 'litre', '', '', '1', '');";
	stat.execute(sql); 
        sql = "insert into sbmlunit (id, kind, exponent, scale, multiplier, offset) values ('20', 'mole', '-1', '-6', '1', '');";
	stat.execute(sql); 
        sql = "insert into sbmlunit (id, kind, exponent, scale, multiplier, offset) values ('21', 'second', '-1', '', '1', '');";
	stat.execute(sql); 

      } catch (ClassNotFoundException e)
      {
        e.printStackTrace();
      } catch (SQLException e)
      {
        e.printStackTrace();
      }    
      //unitsStore.add("µM^(-1)*s^(-1)");
      unitsStore.add(u);
    }

    //else if(u.equals("min^(-1)")  &amp;&amp; !unitsStore.contains("min^(-1)"))
    else if(u.equals("per_minute")  &amp;&amp; !unitsStore.contains("per_minute"))
    {
      //Cannot have caret characters in sbml id attributes
      u = "per_minute";
      //Set up database
      try
      {
        sql = "insert into unit (id, description, sbmlUnitId) values ('" + u + "', '" + u + "', '22');";
	stat.execute(sql); 
        sql = "insert into sbmlunit (id, kind, exponent, scale, multiplier, offset) values ('22', 'second', '-1', '', '60', '');";
	stat.execute(sql); 

      } catch (ClassNotFoundException e)
      {
        e.printStackTrace();
      } catch (SQLException e)
      {
        e.printStackTrace();
      }    
      //unitsStore.add("min^(-1)");
      unitsStore.add(u);
    }

    else if(u.equals("µg/ml")  &amp;&amp; !unitsStore.contains("µg/ml"))
    {
      //Set up database
      try
      {
        sql = "insert into unit (id, description, sbmlUnitId) values ('micrograms_per_millilitre', 'micrograms_per_millilitre', '23');";
	stat.execute(sql); 
        sql = "insert into unit (id, description, sbmlUnitId) values ('micrograms_per_millilitre', 'micrograms_per_millilitre', '24');";
	stat.execute(sql); 
        sql = "insert into sbmlunit (id, kind, exponent, scale, multiplier, offset) values ('23', 'gram', '', '-6', '1', '');";
	stat.execute(sql); 
        sql = "insert into sbmlunit (id, kind, exponent, scale, multiplier, offset) values ('24', 'litre', '-1', '-3', '1', '');";
	stat.execute(sql); 

      } catch (ClassNotFoundException e)
      {
        e.printStackTrace();
      } catch (SQLException e)
      {
        e.printStackTrace();
      }    
      unitsStore.add("µg/ml");
    }

    //else if(u.equals("mg^(-1)*min^(-1)")  &amp;&amp; !unitsStore.contains("mg^(-1)*min^(-1)"))
    else if(u.equals("per_milligram_per_minute")  &amp;&amp; !unitsStore.contains("per_milligram_per_minute"))
    {
      //Cannot have caret characters in sbml id attributes
      u = "per_milligram_per_minute";
      //Set up database
      try
      {
        sql = "insert into unit (id, description, sbmlUnitId) values ('" + u + "', '" + u + "', '25');";
	stat.execute(sql);
        sql = "insert into unit (id, description, sbmlUnitId) values ('" + u + "', '" + u + "', '26');";
	stat.execute(sql);
        sql = "insert into sbmlunit (id, kind, exponent, scale, multiplier, offset) values ('25', 'gram', '-1', '-3', '1', '');";
	stat.execute(sql); 
        sql = "insert into sbmlunit (id, kind, exponent, scale, multiplier, offset) values ('26', 'second', '-1', '', '60', '');";
	stat.execute(sql); 

      } catch (ClassNotFoundException e)
      {
        e.printStackTrace();
      } catch (SQLException e)
      {
        e.printStackTrace();
      }    
      //unitsStore.add("mg^(-1)*min^(-1)");
      unitsStore.add(u);
    }

    else if(u.equals("g/l")  &amp;&amp; !unitsStore.contains("g/l"))
    {
      try
      {
        sql = "insert into unit (id, description, sbmlUnitId) values ('" + u + "', '" + u + "', '27');";
	stat.execute(sql);
        sql = "insert into unit (id, description, sbmlUnitId) values ('" + u + "', '" + u + "', '28');";
	stat.execute(sql);
        sql = "insert into sbmlunit (id, kind, exponent, scale, multiplier, offset) values ('27', 'gram', '', '', '1', '');";
	stat.execute(sql); 
        sql = "insert into sbmlunit (id, kind, exponent, scale, multiplier, offset) values ('28', 'litre', '-1', '', '1', '');";
	stat.execute(sql); 

      } catch (ClassNotFoundException e)
      {
        e.printStackTrace();
      } catch (SQLException e)
      {
        e.printStackTrace();
      }    
      unitsStore.add("g/l");
    }

    else if(u.equals("mU/ml")  &amp;&amp; !unitsStore.contains("mU/ml"))
    {
      try
      {
        sql = "insert into unit (id, description, sbmlUnitId) values ('" + u + "', '" + u + "', '29');";
	stat.execute(sql);
        sql = "insert into unit (id, description, sbmlUnitId) values ('" + u + "', '" + u + "', '30');";
	stat.execute(sql);
        sql = "insert into sbmlunit (id, kind, exponent, scale, multiplier, offset) values ('29', 'gram', '', '', '1', '');";
	stat.execute(sql); 
        sql = "insert into sbmlunit (id, kind, exponent, scale, multiplier, offset) values ('30', 'litre', '-1', '-3', '1', '');";
	stat.execute(sql); 

      } catch (ClassNotFoundException e)
      {
        e.printStackTrace();
      } catch (SQLException e)
      {
        e.printStackTrace();
      }    
      unitsStore.add("mU/ml");
    }

    //else if(u.equals("M^(-1)*s^(-1)")  &amp;&amp; !unitsStore.contains("M^(-1)*s^(-1)"))
    else if(u.equals("per_molar_per_second")  &amp;&amp; !unitsStore.contains("per_molar_per_second"))
    {
      //Cannot have caret characters in sbml id attributes
      u = "per_molar_per_second";
      try
      {
        sql = "insert into unit (id, description, sbmlUnitId) values ('" + u + "', '" + u + "', '31');";
	stat.execute(sql);
        sql = "insert into unit (id, description, sbmlUnitId) values ('" + u + "', '" + u + "', '32');";
	stat.execute(sql);
        sql = "insert into unit (id, description, sbmlUnitId) values ('" + u + "', '" + u + "', '33');";
	stat.execute(sql);
        sql = "insert into sbmlunit (id, kind, exponent, scale, multiplier, offset) values ('31', 'mole', '', '1', '', '');";
	stat.execute(sql); 
        sql = "insert into sbmlunit (id, kind, exponent, scale, multiplier, offset) values ('32', 'litre', '-1', '', '', '');";
	stat.execute(sql); 
        sql = "insert into sbmlunit (id, kind, exponent, scale, multiplier, offset) values ('33', 'second', '-1', '', '1', '');";
	stat.execute(sql);

      } catch (ClassNotFoundException e)
      {
        e.printStackTrace();
      } catch (SQLException e)
      {
        e.printStackTrace();
      }    
      //unitsStore.add("M^(-1)*s^(-1)");
      unitsStore.add(u);
    }

    else if(u.equals("-"))
    {
      continue;
    }

}

conn.close();</script>
  <dependencies />
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies>
    <string>sqlitejdbc-v053.jar</string>
  </localDependencies>
  <artifactDependencies />
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>units</name>
      <depth>1</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs />
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="units" depth="1" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>addMassActionKinetics</name><inputPorts /><outputPorts /><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap /><outputMap /><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <script>import java.sql.*;
import org.sqlite.JDBC;

DATABASE_NAME = "taverna_sbml";
databaseURL = "jdbc:sqlite:" + DATABASE_NAME + ".db";

reactionIdsWithKinetics = new ArrayList();
theReactionIds = new ArrayList();

System.out.println("Adding mass action kinetics...");

try
{
  driver = "org.sqlite.JDBC";
  Class.forName(driver);
  Connection conn = DriverManager.getConnection(databaseURL);
  Statement stat = conn.createStatement();
  
  //Need to get list of reaction ids with kinetic laws
  sql = "select reactionId from kineticLaw;";
  ResultSet rs = stat.executeQuery(sql);
  while (rs.next())
  {
    reactionIdsWithKinetics.add(rs.getString(1));
  }

  //Need to get list of reaction ids and
  //do a diff on the above 2 lists of kinetic laws
  sql = "select id from reaction;";
  rs = stat.executeQuery(sql);
  while (rs.next())
  {
    String str = rs.getString(1);
    if(!reactionIdsWithKinetics.contains(str))
      theReactionIds.add(str);
  }

  for(int i= 0 ; i &lt; theReactionIds.size(); i++)
  {
    //Get list of reactant species
    sql = "select speciesId from reactionspecies where reactionId = '" + theReactionIds.get(i) + "' and role = 'reactant';";
    rs = stat.executeQuery(sql);
    StringBuffer sb = new StringBuffer();
    ArrayList reactants = new ArrayList();
    while (rs.next())
    {
      sb.append("*" + rs.getString(1));
      reactants.add(rs.getString(1));
    }
    //Create kinetic laws for these reactions
    sql = "insert into kineticlaw (id, reactionId, formula) values ('kl_" + theReactionIds.get(i) + "', '" + theReactionIds.get(i) + "', 'k" + i + sb.toString() + "');";
    stat.execute(sql);
 
    //Create rate constant parameter for above kinetic law
    //unit depends on number of reactants
    sql = "insert into parameter (id, name, type, kineticLawId, stValue) values ('k" + i + "', 'k" + i + "', 'mass action rate constant','kl_"+ theReactionIds.get(i) + "', '1');";
    stat.execute(sql);
  }
  rs.close();
  conn.close();

} catch (ClassNotFoundException e)
{
  e.printStackTrace();
} catch (SQLException e)
{
  e.printStackTrace();
}</script>
  <dependencies />
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies>
    <string>sqlitejdbc-v053.jar</string>
  </localDependencies>
  <artifactDependencies />
  <inputs />
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>1</granularDepth>
      <name>theReactionIds</name>
      <depth>1</depth>
      <mimeTypes />
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy /></iteration></iterationStrategyStack></processor><processor><name>addEnzymeConcsToDataSource</name><inputPorts /><outputPorts /><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>dataflow-activity</artifact><version>1.0.1</version></raven><class>net.sf.taverna.t2.activities.dataflow.DataflowActivity</class><inputMap /><outputMap /><configBean encoding="dataflow"><dataflow ref="efddf733-a2c3-45fd-b93d-d31105fd6929" /></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy /></iteration></iterationStrategyStack></processor><processor><name>addMetaboliteConcsToDataSource</name><inputPorts><port><name>SourceMetaboliteConcentrations</name><depth>0</depth></port></inputPorts><outputPorts /><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>dataflow-activity</artifact><version>1.0.1</version></raven><class>net.sf.taverna.t2.activities.dataflow.DataflowActivity</class><inputMap><map from="SourceMetaboliteConcentrations" to="SourceMetaboliteConcentrations" /></inputMap><outputMap /><configBean encoding="dataflow"><dataflow ref="1fd16d52-87ad-44f0-9ac3-4f5f7db51c39" /></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="SourceMetaboliteConcentrations" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>sourceMetaboliteConcs</name><inputPorts /><outputPorts><port><name>value</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>stringconstant-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.stringconstant.StringConstantActivity</class><inputMap /><outputMap><map from="value" to="value" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean xmlns="">
  <value>CHEBI:15422,3.5;CHEBI:17634,50;CHEBI:15846,4;CHEBI:18367,4;CHEBI:15378,4</value>
</net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy /></iteration></iterationStrategyStack></processor><processor><name>outputSBML</name><inputPorts /><outputPorts><port><name>sbml</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap /><outputMap><map from="sbml" to="sbml" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <script>import org.sbml.libsbml.*;

import java.sql.*;
import org.sqlite.JDBC;

String DATABASE_NAME = "taverna_sbml";
String databaseURL = "jdbc:sqlite:" + DATABASE_NAME + ".db";

System.out.println("Generating SBML file...");

ArrayList executeSQL(String sql, String[] colnames)
{
  try
  {
    driver = "org.sqlite.JDBC";
    Class.forName(driver);
    Connection conn = DriverManager.getConnection(databaseURL);
    ArrayList al = new ArrayList();
    Statement stat = conn.createStatement();
    ResultSet rs = stat.executeQuery(sql);
    while (rs.next())
    {
      Hashtable ht = new Hashtable();
      for (i = 0; i &lt; colnames.length; i++)
      {
        item = rs.getString(colnames[i]);
        if(item.equals(null) || item.equals("") || item.equals("null"))
        {
          //System.out.println(colnames[i] + " item is empty or null!");
          item = "";
        }
        ht.put(colnames[i], item);
      }
      al.add(ht);
    }

    rs.close();
    conn.close();

    return al;

  } catch (ClassNotFoundException e)
  {
    e.printStackTrace();
  } catch (SQLException e)
  {
    e.printStackTrace();
  }
}


//System.loadLibrary("sbmlj");

Model model = new Model();
model.setId("Taverna1");
model.setName("Test model");

//Create compartments
String sql = "select * from compartment;";
String[] colnames = { "id", "name", "outside", "sboTerm", "goId", "size" };
ArrayList al = executeSQL(sql, colnames);
for(int i = 0; i &lt; al.size(); i++)
{
  Hashtable ht = al.get(i);
  Compartment c = model.createCompartment();
  c.setMetaId("meta_" + ht.get("id"));
  c.setId(ht.get("id"));
  c.setName(ht.get("name"));
  c.setOutside(ht.get("outside"));
  int sbo = Integer.parseInt(ht.get("sboTerm"));
  c.setSBOTerm(sbo);

  //Set GO id
  CVTerm term = new CVTerm(libsbmlConstants.BIOLOGICAL_QUALIFIER);
  term.setBiologicalQualifierType(libsbmlConstants.BQB_IS);
  term.addResource(ht.get("goId"));
  c.addCVTerm(term);

  double size = Double.parseDouble(ht.get("size"));
  c.setSize(size);
}

//Create species
String sql = "select * from species;";
String[] colnames = { "id", "name", "compartmentId", "sboTerm", "chebi", "kegg", "inchi", "sgd", "uniprot", "initialConc" };
ArrayList al = executeSQL(sql, colnames);
for(int i = 0; i &lt; al.size(); i++)
{
  Hashtable ht = al.get(i);
  Species s = model.createSpecies();
  s.setMetaId("meta_" + ht.get("id"));
  s.setId(ht.get("id"));
  s.setName(ht.get("name"));
  s.setCompartment(ht.get("compartmentId"));
  int sbo = Integer.parseInt(ht.get("sboTerm"));
  s.setSBOTerm(sbo);
  double initConc = Double.parseDouble(ht.get("initialConc"));
  s.setInitialConcentration(initConc);

  //Set Inchi string
  String inchi = ht.get("inchi"); //Check
  if(!inchi.equals(""))
  {
    //Construct inchi XML node
    inchi = "&lt;in:inchi xmlns:in=\"http://biomodels.net/inchi\" metaid=\"" + s.getMetaId() + "_inchi\"&gt;" + inchi + "&lt;/in:inchi&gt;";
    XMLNode node = XMLNode.convertStringToXMLNode(inchi);

    //Add reference in RDF bag to inchi string
    String resource = "#" + s.getMetaId();

    CVTerm cvTerm = new CVTerm(libsbmlConstants.BIOLOGICAL_QUALIFIER);
    cvTerm.setBiologicalQualifierType(libsbmlConstants.BQB_IS);
    cvTerm.addResource(resource);
    s.appendAnnotation(node);
    s.addCVTerm(cvTerm);
  }

  //Set chebi id
  String chebiId = ht.get("chebi"); //Check
  if(!chebiId.equals(""))
  {
    CVTerm cvTerm = new CVTerm(libsbmlConstants.BIOLOGICAL_QUALIFIER);
    cvTerm.setBiologicalQualifierType(libsbmlConstants.BQB_IS);
    cvTerm.addResource(chebiId);
    s.addCVTerm(cvTerm);
  }

  //Set kegg id
  String kegg = ht.get("kegg"); //Check
  if(!kegg.equals(""))
  {
    CVTerm cvTerm = new CVTerm(libsbmlConstants.BIOLOGICAL_QUALIFIER);
    cvTerm.setBiologicalQualifierType(libsbmlConstants.BQB_IS);
    cvTerm.addResource(kegg);
    s.addCVTerm(cvTerm);
  }

  //Set sgd id
  String sgd = ht.get("sgd"); //Check
  if(!sgd.equals(""))
  {
    CVTerm cvTerm = new CVTerm(libsbmlConstants.BIOLOGICAL_QUALIFIER);
    cvTerm.setBiologicalQualifierType(libsbmlConstants.BQB_IS);
    cvTerm.addResource(sgd);
    s.addCVTerm(cvTerm);
  }

  //Set uniprot id
  String uniprot = ht.get("uniprot"); //Check
  if(!uniprot.equals(""))
  {
    if (uniprot.contains(","))
    {
      String[] ids = uniprot.split(",");
      for(int i = 0 ; i &lt; ids.length; i++)
      {
        CVTerm cvTerm = new CVTerm(libsbmlConstants.BIOLOGICAL_QUALIFIER);
        cvTerm.setBiologicalQualifierType(libsbmlConstants.BQB_IS);
        cvTerm.addResource(ids[i]);
        s.addCVTerm(cvTerm);
      }
    } else
    {
      CVTerm cvTerm = new CVTerm(libsbmlConstants.BIOLOGICAL_QUALIFIER);
      cvTerm.setBiologicalQualifierType(libsbmlConstants.BQB_IS);
      cvTerm.addResource(uniprot);
      s.addCVTerm(cvTerm);
    }
  }
}

//Create reactions
String sql = "select * from reaction;";
String[] colnames = { "id", "name", "sboTerm", "subsystem", "ec", "pubmed" };
ArrayList al = executeSQL(sql, colnames);
for(int i = 0; i &lt; al.size(); i++)
{
  Hashtable ht = al.get(i);
  Reaction r = model.createReaction();
  r.setMetaId("meta_" + ht.get("id"));
  r.setId(ht.get("id"));
  r.setName(ht.get("name"));
  int sbo = Integer.parseInt(ht.get("sboTerm"));
  r.setSBOTerm(sbo);

  //Set pubmed id
  String pubmed = ht.get("pubmed"); //Check
  if(!pubmed.equals(""))
  {
    CVTerm cvTerm = new CVTerm(libsbmlConstants.BIOLOGICAL_QUALIFIER);
    cvTerm.setBiologicalQualifierType(libsbmlConstants.BQB_IS_DESCRIBED_BY);
    cvTerm.addResource(pubmed);
    r.addCVTerm(cvTerm);
  }

  //Set EC Id
  String ec = ht.get("ec"); //Check
  if(!ec.equals(""))
  {
    CVTerm cvTerm = new CVTerm(libsbmlConstants.BIOLOGICAL_QUALIFIER);
    cvTerm.setBiologicalQualifierType(libsbmlConstants.BQB_IS_DESCRIBED_BY);
    cvTerm.addResource(ec);
    r.addCVTerm(cvTerm);
  }

  //Add reactant species references
  String sql = "select speciesId, stoichiometry from reactionspecies where reactionId = '" + ht.get("id") + "' and role = 'reactant';";
  String[] colnames = { "speciesId", "stoichiometry" };
  ArrayList al = executeSQL(sql, colnames);
  for(int i = 0; i &lt; al.size(); i++)
  {
    Hashtable ht = al.get(i);
    SpeciesReference spref = new SpeciesReference();
    spref.setSpecies(ht.get("speciesId"));
    double stoich = Double.parseDouble(ht.get("stoichiometry"));
    spref.setStoichiometry(stoich);
    r.addReactant(spref);
  }

  //Add product species references
  String sql = "select speciesId, stoichiometry from reactionspecies where reactionId = '" + ht.get("id") + "' and role = 'product';";
  String[] colnames = { "speciesId", "stoichiometry" };
  ArrayList al = executeSQL(sql, colnames);
  for(int i = 0; i &lt; al.size(); i++)
  {
    Hashtable ht = al.get(i);
    SpeciesReference spref = new SpeciesReference();
    spref.setSpecies(ht.get("speciesId"));
    double stoich = Double.parseDouble(ht.get("stoichiometry"));
    spref.setStoichiometry(stoich);
    r.addProduct(spref);
  }

  //Add modifier species references
  String sql = "select speciesId, stoichiometry from reactionspecies where reactionId = '" + ht.get("id") + "' and role = 'modifier';";
  String[] colnames = { "speciesId", "stoichiometry" };
  ArrayList al = executeSQL(sql, colnames);
  for(int i = 0; i &lt; al.size(); i++)
  {
    Hashtable ht = al.get(i);
    ModifierSpeciesReference mspref = new ModifierSpeciesReference();
    mspref.setSpecies(ht.get("speciesId"));
    r.addModifier(mspref);
  }

  //Add kinetic law
  String sql = "select id, formula from kineticlaw where reactionId = '" + ht.get("id") + "';";
  String[] colnames = { "id", "formula" };
  ArrayList klList = executeSQL(sql, colnames);
  for(int i = 0; i &lt; klList.size(); i++)
  {
    Hashtable ht = klList.get(i);
    KineticLaw kl = new KineticLaw();
    kl.setFormula(ht.get("formula"));

    String sql = "select id, name, stValue from parameter where kineticLawId = '" + ht.get("id") + "';";
    String[] colnames = { "id", "name", "stValue" };
    ArrayList paramList = executeSQL(sql, colnames);
    for(int x = 0; x &lt; paramList.size(); x++)
    {
      Hashtable ht2 = paramList.get(x);
      Parameter param = new Parameter();
      param.setId(ht2.get("name"));
      double val;
      if(ht2.get("stValue").equals("null") || ht2.get("stValue").equals(null) || ht2.get("stValue").equals(""))
        val = 0;
      else
        val = Double.parseDouble(ht2.get("stValue"));
      param.setValue(val);

      kl.addParameter(param);
    }
    r.setKineticLaw(kl);
  }
}

//Add Unit Definitions
String sql = "select distinct id from unit;";
String[] colnames = { "id" };
ArrayList unitDefinitionIds = executeSQL(sql, colnames); //Use for unit name
for(int y = 0; y &lt; unitDefinitionIds.size(); y++)
{
  Hashtable ht = unitDefinitionIds.get(y);
  String unitDefId = ht.get("id");
  sql = "select description from unit where id = '" + unitDefId + "';";
  String[] colnames = { "description" };
  ArrayList unitDefinitions = executeSQL(sql, colnames);

  UnitDefinition unitdef = model.createUnitDefinition();
  unitdef.setId(unitDefId);
  Hashtable ht2 = unitDefinitions.get(0);
  String unitName = ht2.get("description");
  unitdef.setName(unitName);

  //Create units
  sql = "select sbmlUnitId from unit where id = '" + unitDefId + "';";
  String[] colnames = { "sbmlUnitId" };
  ArrayList sbmlUnitIds = executeSQL(sql, colnames); //Use for unit name
  for(z = 0; z &lt; sbmlUnitIds.size(); z++)
  {
    Hashtable ht3 = sbmlUnitIds.get(z);
    String sbmlUnitId = ht3.get("sbmlUnitId");
    sql = "select kind, exponent, scale, multiplier from sbmlunit where id = '" + sbmlUnitId + "';";
    String[] colnames = { "kind", "exponent", "scale", "multiplier" };
    ArrayList units = executeSQL(sql, colnames);

    u = model.createUnit();
    Hashtable ht4 = units.get(0);
    String kind = ht4.get("kind");
    if(kind.equals("katal"))
      u.setKind(13);
    if(kind.equals("litre"))
      u.setKind(17);
    if(kind.equals("mole"))
      u.setKind(22);
    if(kind.equals("second"))
      u.setKind(27);
    if(kind.equals("gram"))
      u.setKind(7);

    String exponent = ht4.get("exponent");
    if(exponent.equals(""))
      u.setExponent(1);
    else
      u.setExponent(Integer.parseInt(exponent));

    String scale = ht4.get("scale");
    if(scale.equals(""))
      u.setScale(0);
    else
      u.setScale(Integer.parseInt(scale));

    String multiplier = ht4.get("multiplier");
    if(multiplier.equals(""))
      u.setMultiplier(1);
    else
      u.setMultiplier(Double.parseDouble(multiplier));
  }
}

SBMLDocument sbmldoc = new SBMLDocument();
sbmldoc.setModel(model);
SBMLWriter writer = new SBMLWriter();
String sbml = writer.writeToString(sbmldoc);

</script>
  <dependencies />
  <classLoaderSharing>system</classLoaderSharing>
  <localDependencies>
    <string>libsbmlj.jar</string>
    <string>sqlitejdbc-v053.jar</string>
  </localDependencies>
  <artifactDependencies />
  <inputs />
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>0</granularDepth>
      <name>sbml</name>
      <depth>0</depth>
      <mimeTypes />
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy /></iteration></iterationStrategyStack></processor><processor><name>getCompoundIdsFromChebiId</name><inputPorts><port><name>chebiId</name><depth>0</depth></port></inputPorts><outputPorts><port><name>compoundIds</name><depth>1</depth><granularDepth>1</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>dataflow-activity</artifact><version>1.0.1</version></raven><class>net.sf.taverna.t2.activities.dataflow.DataflowActivity</class><inputMap><map from="chebiId" to="chebiId" /></inputMap><outputMap><map from="compoundIds" to="compoundIds" /></outputMap><configBean encoding="dataflow"><dataflow ref="73faeb2d-af4e-4913-9f61-6b4f7b3b120f" /></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="chebiId" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>flatten</name><inputPorts><port><name>inputCompoundIds</name><depth>2</depth></port></inputPorts><outputPorts><port><name>compoundIds</name><depth>1</depth><granularDepth>1</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="inputCompoundIds" to="inputCompoundIds" /></inputMap><outputMap><map from="compoundIds" to="compoundIds" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <script>//Output
ArrayList compoundIds = new ArrayList();

for(int i = 0; i &lt; inputCompoundIds.size(); i++)
{
  ArrayList al  = inputCompoundIds.get(i);
  String str  = al.get(0);
  compoundIds.add(str);
}</script>
  <dependencies />
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>inputCompoundIds</name>
      <depth>2</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>1</granularDepth>
      <name>compoundIds</name>
      <depth>1</depth>
      <mimeTypes />
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="inputCompoundIds" depth="2" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>split2</name><inputPorts><port><name>regex</name><depth>0</depth></port><port><name>string</name><depth>0</depth></port></inputPorts><outputPorts><port><name>split</name><depth>1</depth><granularDepth>1</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>localworker-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.localworker.LocalworkerActivity</class><inputMap><map from="regex" to="regex" /><map from="string" to="string" /></inputMap><outputMap><map from="split" to="split" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean xmlns="">
  <localworkerName>org.embl.ebi.escience.scuflworkers.java.SplitByRegex</localworkerName>
  <script>List split = new ArrayList();
if (!string.equals("")) {
	String regexString = ",";
	if (regex != void) {
		regexString = regex;
	}
	String[] result = string.split(regexString);
	for (int i = 0; i &lt; result.length; i++) {
		split.add(result[i]);
	}
}
</script>
  <dependencies />
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>string</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/plain'</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>regex</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/plain'</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>1</granularDepth>
      <name>split</name>
      <depth>1</depth>
      <mimeTypes>
        <string>l('text/plain')</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="regex" depth="0" /><port name="string" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>regex2</name><inputPorts /><outputPorts><port><name>value</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>stringconstant-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.stringconstant.StringConstantActivity</class><inputMap /><outputMap><map from="value" to="value" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean xmlns="">
  <value>;</value>
</net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy /></iteration></iterationStrategyStack></processor></processors><conditions><condition control="addEnzymeConcsToDataSource" target="addMetaboliteConcsToDataSource" /><condition control="insertUnits" target="addMassActionKinetics" /><condition control="getKineticLaw" target="getExptConditions" /><condition control="reactionInstIdSelector" target="getKineticLawIds" /><condition control="createSysbioDataSource" target="getChebiIds" /><condition control="addMetaboliteConcsToDataSource" target="outputSBML" /><condition control="addMassActionKinetics" target="addEnzymeConcsToDataSource" /><condition control="getReactionIdFromCompound1" target="getReactionIdFromCompound2" /><condition control="insertKineticLaw" target="reactionInstIdSelector" /><condition control="updateDataSource" target="getReactionIds" /></conditions><datalinks><datalink><sink type="processor"><processor>createSysbioDataSource</processor><port>sbml</port></sink><source type="dataflow"><port>sbml</port></source></datalink><datalink><sink type="processor"><processor>getCompoundName</processor><port>compoundId</port></sink><source type="processor"><processor>flatten</processor><port>compoundIds</port></source></datalink><datalink><sink type="processor"><processor>updateDataSource</processor><port>chebiIds</port></sink><source type="processor"><processor>getChebiIds</processor><port>chebiIds</port></source></datalink><datalink><sink type="processor"><processor>updateDataSource</processor><port>sabioCompoundNames</port></sink><source type="processor"><processor>getCompoundName</processor><port>compoundName</port></source></datalink><datalink><sink type="processor"><processor>updateDataSource</processor><port>sabioCompoundIds</port></sink><source type="processor"><processor>flatten</processor><port>compoundIds</port></source></datalink><datalink><sink type="processor"><processor>getReactantIds</processor><port>reactionIds</port></sink><source type="processor"><processor>getReactionIds</processor><port>reactionIds</port></source></datalink><datalink><sink type="processor"><processor>getReactantSabioCompName</processor><port>reactantIds</port></sink><source type="processor"><processor>getReactantIds</processor><port>reactantIds</port></source></datalink><datalink><sink type="processor"><processor>getProductIds</processor><port>reactionIds</port></sink><source type="processor"><processor>getReactionIds</processor><port>reactionIds</port></source></datalink><datalink><sink type="processor"><processor>getProductSabioCompName</processor><port>productIds</port></sink><source type="processor"><processor>getProductIds</processor><port>productIds</port></source></datalink><datalink><sink type="processor"><processor>getReactionIdFromCompound1</processor><port>compName</port></sink><source type="processor"><processor>getReactantSabioCompName</processor><port>names</port></source></datalink><datalink><sink type="processor"><processor>getReactionIdFromCompound2</processor><port>compName</port></sink><source type="processor"><processor>getProductSabioCompName</processor><port>names</port></source></datalink><datalink><sink type="processor"><processor>mergeReactionIds1</processor><port>reactionIds</port></sink><source type="processor"><processor>getReactionIdFromCompound1</processor><port>reactionId</port></source></datalink><datalink><sink type="processor"><processor>mergeReactionIds2</processor><port>reactionIds</port></sink><source type="processor"><processor>getReactionIdFromCompound2</processor><port>reactionId</port></source></datalink><datalink><sink type="processor"><processor>intersect1</processor><port>inputCSV</port></sink><source type="processor"><processor>mergeReactionIds1</processor><port>csv</port></source></datalink><datalink><sink type="processor"><processor>intersect2</processor><port>inputCSV</port></sink><source type="processor"><processor>mergeReactionIds2</processor><port>csv</port></source></datalink><datalink><sink type="processor"><processor>finalIntersect</processor><port>intersectResults1</port></sink><source type="processor"><processor>intersect1</processor><port>outputCSV</port></source></datalink><datalink><sink type="processor"><processor>finalIntersect</processor><port>intersectResults2</port></sink><source type="processor"><processor>intersect2</processor><port>outputCSV</port></source></datalink><datalink><sink type="processor"><processor>clean</processor><port>reactionIdsIn</port></sink><source type="processor"><processor>finalIntersect</processor><port>outputCSV</port></source></datalink><datalink><sink type="processor"><processor>split</processor><port>regex</port></sink><source type="processor"><processor>regex1</processor><port>value</port></source></datalink><datalink><sink type="processor"><processor>split</processor><port>string</port></sink><source type="processor"><processor>clean</processor><port>reactionIdsOut</port></source></datalink><datalink><sink type="processor"><processor>getReactionInstanceIds</processor><port>reactionId</port></sink><source type="processor"><processor>split</processor><port>split</port></source></datalink><datalink><sink type="processor"><processor>getModifierIds</processor><port>reactionId</port></sink><source type="processor"><processor>getReactionIds</processor><port>reactionIds</port></source></datalink><datalink><sink type="processor"><processor>getUniprotIds</processor><port>modifierId</port></sink><source type="processor"><processor>getModifierIds</processor><port>modifierId</port></source></datalink><datalink><sink type="processor"><processor>getReactionInstanceIdsFromProtein</processor><port>uniprot</port></sink><source type="processor"><processor>getUniprotIds</processor><port>uniprotIds</port></source></datalink><datalink><sink type="processor"><processor>flattenInstIds</processor><port>inputIds</port></sink><source type="processor"><processor>getReactionInstanceIdsFromProtein</processor><port>instanceIds</port></source></datalink><datalink><sink type="processor"><processor>filter</processor><port>metaboliteInstIds</port></sink><source type="processor"><processor>getReactionInstanceIds</processor><port>instanceIds</port></source></datalink><datalink><sink type="processor"><processor>filter</processor><port>enzymeInstIds</port></sink><source type="processor"><processor>flattenInstIds</processor><port>outputIds</port></source></datalink><datalink><sink type="processor"><processor>getKineticLaw</processor><port>instId</port></sink><source type="processor"><processor>filter</processor><port>finalInstIds</port></source></datalink><datalink><sink type="processor"><processor>insertKineticLaw</processor><port>formula</port></sink><source type="processor"><processor>getKineticLaw</processor><port>kineticLaw</port></source></datalink><datalink><sink type="processor"><processor>insertKineticLaw</processor><port>instId</port></sink><source type="processor"><processor>filter</processor><port>finalInstIds</port></source></datalink><datalink><sink type="processor"><processor>insertKineticLaw</processor><port>reactionId</port></sink><source type="processor"><processor>getReactionIds</processor><port>reactionIds</port></source></datalink><datalink><sink type="processor"><processor>getExptConditions</processor><port>instId</port></sink><source type="processor"><processor>filter</processor><port>finalInstIds</port></source></datalink><datalink><sink type="processor"><processor>reactionInstIdSelector</processor><port>expConditionsList</port></sink><source type="processor"><processor>getExptConditions</processor><port>exptalCondition</port></source></datalink><datalink><sink type="processor"><processor>reactionInstIdSelector</processor><port>reactionIds</port></sink><source type="processor"><processor>getReactionIds</processor><port>reactionIds</port></source></datalink><datalink><sink type="processor"><processor>getParameters</processor><port>instId</port></sink><source type="processor"><processor>getKineticLawIds</processor><port>kineticLawIds</port></source></datalink><datalink><sink type="processor"><processor>insertParameters</processor><port>paramsList</port></sink><source type="processor"><processor>getParameters</processor><port>parameters</port></source></datalink><datalink><sink type="processor"><processor>insertUnits</processor><port>units</port></sink><source type="processor"><processor>insertParameters</processor><port>units</port></source></datalink><datalink><sink type="processor"><processor>addMetaboliteConcsToDataSource</processor><port>SourceMetaboliteConcentrations</port></sink><source type="processor"><processor>split2</processor><port>split</port></source></datalink><datalink><sink type="processor"><processor>getCompoundIdsFromChebiId</processor><port>chebiId</port></sink><source type="processor"><processor>getChebiIds</processor><port>chebiIds</port></source></datalink><datalink><sink type="processor"><processor>flatten</processor><port>inputCompoundIds</port></sink><source type="processor"><processor>getCompoundIdsFromChebiId</processor><port>compoundIds</port></source></datalink><datalink><sink type="processor"><processor>split2</processor><port>regex</port></sink><source type="processor"><processor>regex2</processor><port>value</port></source></datalink><datalink><sink type="processor"><processor>split2</processor><port>string</port></sink><source type="processor"><processor>sourceMetaboliteConcs</processor><port>value</port></source></datalink><datalink><sink type="dataflow"><port>parameterised_sbml</port></sink><source type="processor"><processor>outputSBML</processor><port>sbml</port></source></datalink></datalinks><annotations><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.Author">
        <text>Peter Li</text>
      </annotationBean>
      <date>2010-03-26 17:17:58.369 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.FreeTextDescription">
        <text>This workflow parameterises an SBML model generated by the qualitative SBML model construction workflow</text>
      </annotationBean>
      <date>2010-03-26 17:19:14.876 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.DescriptiveTitle">
        <text>SBML model parameterisation</text>
      </annotationBean>
      <date>2010-03-26 17:18:26.750 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain></annotations></dataflow><dataflow id="04c14986-82e5-4481-bb50-a05434eb45f1" role="nested"><name>Workflow38</name><inputPorts><port><name>uniprot</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port></inputPorts><outputPorts><port><name>instanceIds</name><annotations /></port></outputPorts><processors><processor><name>getReactionInstanceIDsFromProtein</name><inputPorts><port><name>parameters</name><depth>0</depth></port></inputPorts><outputPorts><port><name>parameters</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>wsdl-activity</artifact><version>1.0.1</version></raven><class>net.sf.taverna.t2.activities.wsdl.WSDLActivity</class><inputMap><map from="parameters" to="parameters" /></inputMap><outputMap><map from="parameters" to="parameters" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.wsdl.WSDLActivityConfigurationBean xmlns="">
  <wsdl>http://sabio.villa-bosch.de/sabiork?wsdl</wsdl>
  <operation>getReactionInstanceIDsFromProtein</operation>
</net.sf.taverna.t2.activities.wsdl.WSDLActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="parameters" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>getReactionInstanceIDsFromProtein_input</name><inputPorts><port><name>arg0</name><depth>0</depth></port></inputPorts><outputPorts><port><name>output</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>wsdl-activity</artifact><version>1.0.1</version></raven><class>net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLInputSplitterActivity</class><inputMap><map from="arg0" to="arg0" /></inputMap><outputMap><map from="output" to="output" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLSplitterConfigurationBean xmlns="">
  <wrappedTypeXML>&lt;s:extensions xmlns:s="http://org.embl.ebi.escience/xscufl/0.1alpha"&gt;&lt;s:complextype optional="false" unbounded="false" typename="getReactionInstanceIDsFromProtein" name="parameters" qname="{http://localhost:8084/SpringingSabioRk/sabiork}getReactionInstanceIDsFromProtein"&gt;&lt;s:elements&gt;&lt;s:basetype optional="true" unbounded="false" typename="string" name="arg0" qname="getReactionInstanceIDsFromProtein&amp;gt;arg0" /&gt;&lt;/s:elements&gt;&lt;/s:complextype&gt;&lt;/s:extensions&gt;</wrappedTypeXML>
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <allowsLiteralValues>false</allowsLiteralValues>
      <name>arg0</name>
      <depth>0</depth>
      <mimeTypes class="java.util.Collections$SingletonList">
        <element class="string">'text/plain'</element>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>0</granularDepth>
      <name>output</name>
      <depth>0</depth>
      <mimeTypes class="java.util.Collections$SingletonList">
        <element class="string">'text/xml'</element>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLSplitterConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="arg0" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>getReactionInstanceIDsFromProtein_output</name><inputPorts><port><name>input</name><depth>0</depth></port></inputPorts><outputPorts><port><name>return</name><depth>1</depth><granularDepth>1</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>wsdl-activity</artifact><version>1.0.1</version></raven><class>net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLOutputSplitterActivity</class><inputMap><map from="input" to="input" /></inputMap><outputMap><map from="return" to="return" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLSplitterConfigurationBean xmlns="">
  <wrappedTypeXML>&lt;s:extensions xmlns:s="http://org.embl.ebi.escience/xscufl/0.1alpha"&gt;&lt;s:complextype optional="false" unbounded="false" typename="getReactionInstanceIDsFromProteinResponse" name="parameters" qname="{http://localhost:8084/SpringingSabioRk/sabiork}getReactionInstanceIDsFromProteinResponse"&gt;&lt;s:elements&gt;&lt;s:arraytype optional="true" unbounded="true" wrapped="false" typename="int" name="return" qname="getReactionInstanceIDsFromProteinResponse&amp;gt;return"&gt;&lt;s:elementtype&gt;&lt;s:basetype optional="false" unbounded="false" typename="int" name="" qname="{http://www.w3.org/2001/XMLSchema}int" /&gt;&lt;/s:elementtype&gt;&lt;/s:arraytype&gt;&lt;/s:elements&gt;&lt;/s:complextype&gt;&lt;/s:extensions&gt;</wrappedTypeXML>
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>false</allowsLiteralValues>
      <name>input</name>
      <depth>0</depth>
      <mimeTypes class="java.util.Collections$SingletonList">
        <element class="string">'text/xml'</element>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>1</granularDepth>
      <name>return</name>
      <depth>1</depth>
      <mimeTypes class="java.util.Collections$SingletonList">
        <element class="string">l('text/plain')</element>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLSplitterConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="input" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor></processors><conditions /><datalinks><datalink><sink type="processor"><processor>getReactionInstanceIDsFromProtein</processor><port>parameters</port></sink><source type="processor"><processor>getReactionInstanceIDsFromProtein_input</processor><port>output</port></source></datalink><datalink><sink type="processor"><processor>getReactionInstanceIDsFromProtein_input</processor><port>arg0</port></sink><source type="dataflow"><port>uniprot</port></source></datalink><datalink><sink type="processor"><processor>getReactionInstanceIDsFromProtein_output</processor><port>input</port></sink><source type="processor"><processor>getReactionInstanceIDsFromProtein</processor><port>parameters</port></source></datalink><datalink><sink type="dataflow"><port>instanceIds</port></sink><source type="processor"><processor>getReactionInstanceIDsFromProtein_output</processor><port>return</port></source></datalink></datalinks><annotations /></dataflow><dataflow id="73faeb2d-af4e-4913-9f61-6b4f7b3b120f" role="nested"><name>Workflow33</name><inputPorts><port><name>chebiId</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port></inputPorts><outputPorts><port><name>compoundIds</name><annotations /></port></outputPorts><processors><processor><name>getCompoundIDsFromCHEBIID</name><inputPorts><port><name>parameters</name><depth>0</depth></port></inputPorts><outputPorts><port><name>parameters</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>wsdl-activity</artifact><version>1.0.1</version></raven><class>net.sf.taverna.t2.activities.wsdl.WSDLActivity</class><inputMap><map from="parameters" to="parameters" /></inputMap><outputMap><map from="parameters" to="parameters" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.wsdl.WSDLActivityConfigurationBean xmlns="">
  <wsdl>http://sabio.villa-bosch.de:80/sabiork?wsdl</wsdl>
  <operation>getCompoundIDsFromCHEBIID</operation>
</net.sf.taverna.t2.activities.wsdl.WSDLActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="parameters" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>getCompoundIDsFromCHEBIID_input</name><inputPorts><port><name>arg0</name><depth>0</depth></port></inputPorts><outputPorts><port><name>output</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>wsdl-activity</artifact><version>1.0.1</version></raven><class>net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLInputSplitterActivity</class><inputMap><map from="arg0" to="arg0" /></inputMap><outputMap><map from="output" to="output" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLSplitterConfigurationBean xmlns="">
  <wrappedTypeXML>&lt;s:extensions xmlns:s="http://org.embl.ebi.escience/xscufl/0.1alpha"&gt;&lt;s:complextype optional="false" unbounded="false" typename="getCompoundIDsFromCHEBIID" name="parameters" qname="{http://localhost:8084/SpringingSabioRk/sabiork}getCompoundIDsFromCHEBIID"&gt;&lt;s:elements&gt;&lt;s:basetype optional="true" unbounded="false" typename="string" name="arg0" qname="getCompoundIDsFromCHEBIID&amp;gt;arg0" /&gt;&lt;/s:elements&gt;&lt;/s:complextype&gt;&lt;/s:extensions&gt;</wrappedTypeXML>
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <allowsLiteralValues>false</allowsLiteralValues>
      <name>arg0</name>
      <depth>0</depth>
      <mimeTypes class="java.util.Collections$SingletonList">
        <element class="string">'text/plain'</element>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>0</granularDepth>
      <name>output</name>
      <depth>0</depth>
      <mimeTypes class="java.util.Collections$SingletonList">
        <element class="string">'text/xml'</element>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLSplitterConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="arg0" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>getCompoundIDsFromCHEBIID_output</name><inputPorts><port><name>input</name><depth>0</depth></port></inputPorts><outputPorts><port><name>return</name><depth>1</depth><granularDepth>1</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>wsdl-activity</artifact><version>1.0.1</version></raven><class>net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLOutputSplitterActivity</class><inputMap><map from="input" to="input" /></inputMap><outputMap><map from="return" to="return" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLSplitterConfigurationBean xmlns="">
  <wrappedTypeXML>&lt;s:extensions xmlns:s="http://org.embl.ebi.escience/xscufl/0.1alpha"&gt;&lt;s:complextype optional="false" unbounded="false" typename="getCompoundIDsFromCHEBIIDResponse" name="parameters" qname="{http://localhost:8084/SpringingSabioRk/sabiork}getCompoundIDsFromCHEBIIDResponse"&gt;&lt;s:elements&gt;&lt;s:arraytype optional="true" unbounded="true" wrapped="false" typename="int" name="return" qname="getCompoundIDsFromCHEBIIDResponse&amp;gt;return"&gt;&lt;s:elementtype&gt;&lt;s:basetype optional="false" unbounded="false" typename="int" name="" qname="{http://www.w3.org/2001/XMLSchema}int" /&gt;&lt;/s:elementtype&gt;&lt;/s:arraytype&gt;&lt;/s:elements&gt;&lt;/s:complextype&gt;&lt;/s:extensions&gt;</wrappedTypeXML>
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>false</allowsLiteralValues>
      <name>input</name>
      <depth>0</depth>
      <mimeTypes class="java.util.Collections$SingletonList">
        <element class="string">'text/xml'</element>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>1</granularDepth>
      <name>return</name>
      <depth>1</depth>
      <mimeTypes class="java.util.Collections$SingletonList">
        <element class="string">l('text/plain')</element>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLSplitterConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="input" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor></processors><conditions /><datalinks><datalink><sink type="processor"><processor>getCompoundIDsFromCHEBIID</processor><port>parameters</port></sink><source type="processor"><processor>getCompoundIDsFromCHEBIID_input</processor><port>output</port></source></datalink><datalink><sink type="processor"><processor>getCompoundIDsFromCHEBIID_input</processor><port>arg0</port></sink><source type="dataflow"><port>chebiId</port></source></datalink><datalink><sink type="processor"><processor>getCompoundIDsFromCHEBIID_output</processor><port>input</port></sink><source type="processor"><processor>getCompoundIDsFromCHEBIID</processor><port>parameters</port></source></datalink><datalink><sink type="dataflow"><port>compoundIds</port></sink><source type="processor"><processor>getCompoundIDsFromCHEBIID_output</processor><port>return</port></source></datalink></datalinks><annotations /></dataflow><dataflow id="02208cf2-bddc-4354-a56f-e45d5a186e1f" role="nested"><name>Workflow11</name><inputPorts><port><name>compName</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port></inputPorts><outputPorts><port><name>reactionId</name><annotations /></port></outputPorts><processors><processor><name>getReactionIDFromCompound</name><inputPorts><port><name>parameters</name><depth>0</depth></port></inputPorts><outputPorts><port><name>parameters</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>wsdl-activity</artifact><version>1.0.1</version></raven><class>net.sf.taverna.t2.activities.wsdl.WSDLActivity</class><inputMap><map from="parameters" to="parameters" /></inputMap><outputMap><map from="parameters" to="parameters" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.wsdl.WSDLActivityConfigurationBean xmlns="">
  <wsdl>http://sabio.villa-bosch.de/sabiork?wsdl</wsdl>
  <operation>getReactionIDFromCompound</operation>
</net.sf.taverna.t2.activities.wsdl.WSDLActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="parameters" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>getReactionIDFromCompound_input</name><inputPorts><port><name>arg0</name><depth>0</depth></port></inputPorts><outputPorts><port><name>output</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>wsdl-activity</artifact><version>1.0.1</version></raven><class>net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLInputSplitterActivity</class><inputMap><map from="arg0" to="arg0" /></inputMap><outputMap><map from="output" to="output" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLSplitterConfigurationBean xmlns="">
  <wrappedTypeXML>&lt;s:extensions xmlns:s="http://org.embl.ebi.escience/xscufl/0.1alpha"&gt;&lt;s:complextype optional="false" unbounded="false" typename="getReactionIDFromCompound" name="parameters" qname="{http://localhost:8084/SpringingSabioRk/sabiork}getReactionIDFromCompound"&gt;&lt;s:elements&gt;&lt;s:basetype optional="true" unbounded="false" typename="string" name="arg0" qname="getReactionIDFromCompound&amp;gt;arg0" /&gt;&lt;/s:elements&gt;&lt;/s:complextype&gt;&lt;/s:extensions&gt;</wrappedTypeXML>
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <allowsLiteralValues>false</allowsLiteralValues>
      <name>arg0</name>
      <depth>0</depth>
      <mimeTypes class="java.util.Collections$SingletonList">
        <element class="string">'text/plain'</element>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>0</granularDepth>
      <name>output</name>
      <depth>0</depth>
      <mimeTypes class="java.util.Collections$SingletonList">
        <element class="string">'text/xml'</element>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLSplitterConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="arg0" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>getReactionIDFromCompound_output</name><inputPorts><port><name>input</name><depth>0</depth></port></inputPorts><outputPorts><port><name>return</name><depth>1</depth><granularDepth>1</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>wsdl-activity</artifact><version>1.0.1</version></raven><class>net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLOutputSplitterActivity</class><inputMap><map from="input" to="input" /></inputMap><outputMap><map from="return" to="return" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLSplitterConfigurationBean xmlns="">
  <wrappedTypeXML>&lt;s:extensions xmlns:s="http://org.embl.ebi.escience/xscufl/0.1alpha"&gt;&lt;s:complextype optional="false" unbounded="false" typename="getReactionIDFromCompoundResponse" name="parameters" qname="{http://localhost:8084/SpringingSabioRk/sabiork}getReactionIDFromCompoundResponse"&gt;&lt;s:elements&gt;&lt;s:arraytype optional="true" unbounded="true" wrapped="false" typename="int" name="return" qname="getReactionIDFromCompoundResponse&amp;gt;return"&gt;&lt;s:elementtype&gt;&lt;s:basetype optional="false" unbounded="false" typename="int" name="" qname="{http://www.w3.org/2001/XMLSchema}int" /&gt;&lt;/s:elementtype&gt;&lt;/s:arraytype&gt;&lt;/s:elements&gt;&lt;/s:complextype&gt;&lt;/s:extensions&gt;</wrappedTypeXML>
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>false</allowsLiteralValues>
      <name>input</name>
      <depth>0</depth>
      <mimeTypes class="java.util.Collections$SingletonList">
        <element class="string">'text/xml'</element>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>1</granularDepth>
      <name>return</name>
      <depth>1</depth>
      <mimeTypes class="java.util.Collections$SingletonList">
        <element class="string">l('text/plain')</element>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLSplitterConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="input" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor></processors><conditions /><datalinks><datalink><sink type="processor"><processor>getReactionIDFromCompound</processor><port>parameters</port></sink><source type="processor"><processor>getReactionIDFromCompound_input</processor><port>output</port></source></datalink><datalink><sink type="processor"><processor>getReactionIDFromCompound_input</processor><port>arg0</port></sink><source type="dataflow"><port>compName</port></source></datalink><datalink><sink type="processor"><processor>getReactionIDFromCompound_output</processor><port>input</port></sink><source type="processor"><processor>getReactionIDFromCompound</processor><port>parameters</port></source></datalink><datalink><sink type="dataflow"><port>reactionId</port></sink><source type="processor"><processor>getReactionIDFromCompound_output</processor><port>return</port></source></datalink></datalinks><annotations /></dataflow><dataflow id="1fd16d52-87ad-44f0-9ac3-4f5f7db51c39" role="nested"><name>Workflow1</name><inputPorts><port><name>SourceMetaboliteConcentrations</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port></inputPorts><outputPorts><port><name>out</name><annotations /></port></outputPorts><processors><processor><name>updateDatasource</name><inputPorts><port><name>data</name><depth>1</depth></port></inputPorts><outputPorts><port><name>status</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="data" to="data" /></inputMap><outputMap><map from="status" to="status" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <script>import java.sql.*;
import org.sqlite.JDBC;

DATABASE_NAME = "taverna_sbml";
databaseURL = "jdbc:sqlite:" + DATABASE_NAME + ".db";

//Avogadro's number
double AVOGADROS_NUMBER = 6.02e23;
//Volume of yeast cell
double YEAST_CELL_VOLUME = 8.495e-14;

String status = "";

//Set up database
try
{
  driver = "org.sqlite.JDBC";
  Class.forName(driver);
  Connection conn = DriverManager.getConnection(databaseURL);
  Statement stat = conn.createStatement();
  
  for(int i = 0; i &lt; data.size(); i++)
  {
    String line = data.get(i);
    String[] tokens = line.split(",");

    //Not required here because source metabolite data is already in mM concentration units
    //Convert from molecules per cell to moles per litre
    //double value = Double.parseDouble(tokens[1]);
    //double answer = (value*(1/YEAST_CELL_VOLUME))/AVOGADROS_NUMBER;
    //Convert to millimoles per litre
    //answer = answer*1000;
    String sql = "update species set initialConc = " + tokens[1] + " where chebi = 'urn:miriam:obo.chebi:" + tokens[0] + "';";
    stat.execute(sql);
  }
  conn.close();

} catch (ClassNotFoundException e)
{
  e.printStackTrace();
  status = "Class not found exception";
} catch (SQLException e)
{
  e.printStackTrace();
  status = "SQL exception";
}

status = "ok";</script>
  <dependencies />
  <classLoaderSharing>system</classLoaderSharing>
  <localDependencies>
    <string>sqlitejdbc-v053.jar</string>
  </localDependencies>
  <artifactDependencies />
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>data</name>
      <depth>1</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>0</granularDepth>
      <name>status</name>
      <depth>0</depth>
      <mimeTypes />
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="data" depth="1" /></cross></strategy></iteration></iterationStrategyStack></processor></processors><conditions /><datalinks><datalink><sink type="processor"><processor>updateDatasource</processor><port>data</port></sink><source type="dataflow"><port>SourceMetaboliteConcentrations</port></source></datalink><datalink><sink type="dataflow"><port>out</port></sink><source type="processor"><processor>updateDatasource</processor><port>status</port></source></datalink></datalinks><annotations /></dataflow><dataflow id="efddf733-a2c3-45fd-b93d-d31105fd6929" role="nested"><name>Workflow1</name><inputPorts /><outputPorts><port><name>out</name><annotations /></port></outputPorts><processors><processor><name>exptTitle</name><inputPorts /><outputPorts><port><name>value</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>stringconstant-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.stringconstant.StringConstantActivity</class><inputMap /><outputMap><map from="value" to="value" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean xmlns="">
  <value>MCISB Proteomics Results</value>
</net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy /></iteration></iterationStrategyStack></processor><processor><name>exptDate</name><inputPorts /><outputPorts><port><name>value</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>stringconstant-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.stringconstant.StringConstantActivity</class><inputMap /><outputMap><map from="value" to="value" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean xmlns="">
  <value>2009-09-16</value>
</net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy /></iteration></iterationStrategyStack></processor><processor><name>createCountUrl</name><inputPorts><port><name>date</name><depth>0</depth></port><port><name>title</name><depth>0</depth></port></inputPorts><outputPorts><port><name>url</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="title" to="title" /><map from="date" to="date" /></inputMap><outputMap><map from="url" to="url" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <script>if(title.contains(" "))
  title.replaceAll(" ", "%20");


//String url = "http://tdb.mc.manchester.ac.uk:8080/exist/rest?_query=for%20$a%20in%20collection(\"mcisbkrdb\")%20where%20$a/Experiment/Title=\"" + title + "\"%20and%20$a/Experiment/StartDate=xs:date(\"" + date + "\")%20return%20(for%20$b%20in%20$a//NumericalResult%20return%3Cresult%3E%20{$b//MeasuredItem/text()},{$b//Measurement/text()}%3C/result%3E)";

String url = "http://tdb.mc.manchester.ac.uk:8080/exist/rest?_query=for%20$a%20in%20collection(\"mcisbkrdb\")%20where%20$a/Experiment/Title=\"" + title + "\"%20and%20$a/Experiment/StartDate=xs:date(\"" + date + "\")%20return%20%3Cresult%3E{count($a//NumericalResult)}%3C/result%3E";</script>
  <dependencies />
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>date</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>title</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>0</granularDepth>
      <name>url</name>
      <depth>0</depth>
      <mimeTypes />
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="date" depth="0" /><port name="title" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>getCount</name><inputPorts><port><name>url</name><depth>0</depth></port></inputPorts><outputPorts><port><name>contents</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>localworker-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.localworker.LocalworkerActivity</class><inputMap><map from="url" to="url" /></inputMap><outputMap><map from="contents" to="contents" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean xmlns="">
  <localworkerName>org.embl.ebi.escience.scuflworkers.java.WebPageFetcher</localworkerName>
  <script>URL inputURL = null;
if (base != void) {
  inputURL = new URL(new URL(base), url);
}
else {
  inputURL = new URL(url);
}
URLConnection con = inputURL.openConnection();
InputStream in = con.getInputStream();

InputStreamReader isr = new InputStreamReader(in);
Reader inReader = new BufferedReader(isr);

StringBuffer buf = new StringBuffer();
int ch;
while ((ch = inReader.read()) &gt; -1) {
  buf.append((char)ch);
}
inReader.close();
contents = buf.toString();


//String NEWLINE = System.getProperty("line.separator");
//
//URL inputURL = null;
//if (base != void) {
//	inputURL = new URL(new URL(base), url);
//} else {
//	inputURL = new URL(url);
//}
//StringBuffer result = new StringBuffer();
//BufferedReader reader = new BufferedReader(new InputStreamReader(inputURL.openStream()));
//String line = null;
//while ((line = reader.readLine()) != null) {
//	result.append(line);
//	result.append(NEWLINE);
//}
//
//contents = result.toString();
</script>
  <dependencies />
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>url</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/x-taverna-web-url'</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>base</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/x-taverna-web-url'</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>0</granularDepth>
      <name>contents</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/plain,text/html'</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="url" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>cleanCountData</name><inputPorts><port><name>inStr</name><depth>0</depth></port></inputPorts><outputPorts><port><name>outStr</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="inStr" to="inStr" /></inputMap><outputMap><map from="outStr" to="outStr" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <script>String[] lines = inStr.split("\n");
StringBuffer sb = new StringBuffer();
for(i = 1; i &lt; lines.length -1; i++)
{
  String str = lines[i];
  str = str.replaceAll("&lt;result&gt;", "");
  str = str.replaceAll("&lt;/result&gt;", "");
  sb.append(str.trim() + "\n");
}

String outStr = sb.toString();</script>
  <dependencies />
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>inStr</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>0</granularDepth>
      <name>outStr</name>
      <depth>0</depth>
      <mimeTypes />
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="inStr" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>createQueryUrl</name><inputPorts><port><name>date</name><depth>0</depth></port><port><name>title</name><depth>0</depth></port><port><name>count</name><depth>0</depth></port></inputPorts><outputPorts><port><name>url</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="title" to="title" /><map from="count" to="count" /><map from="date" to="date" /></inputMap><outputMap><map from="url" to="url" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <script>if(title.contains(" "))
  title.replaceAll(" ", "%20");


String url = "http://tdb.mc.manchester.ac.uk:8080/exist/rest?_query=for%20$a%20in%20collection(\"mcisbkrdb\")%20where%20$a/Experiment/Title=\"" + title + "\"%20and%20$a/Experiment/StartDate=xs:date(\"" + date + "\")%20return%20(for%20$b%20in%20$a//NumericalResult%20return%3Cresult%3E%20{$b//MeasuredItem/text()},{$b//Measurement/text()}%3C/result%3E)&amp;_howmany=" + count;

//String url = "http://tdb.mc.manchester.ac.uk:8080/exist/rest?_query=for%20$a%20in%20collection(\"mcisbkrdb\")%20where%20$a/Experiment/Title=\"" + title + "\"%20and%20$a/Experiment/StartDate=xs:date(\"" + date + "\")%20return%20%3Cresult%3E{count($a//NumericalResult)}%3C/result%3E";</script>
  <dependencies />
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>count</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>date</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>title</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>0</granularDepth>
      <name>url</name>
      <depth>0</depth>
      <mimeTypes />
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="date" depth="0" /><port name="title" depth="0" /><port name="count" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>getData</name><inputPorts><port><name>url</name><depth>0</depth></port></inputPorts><outputPorts><port><name>contents</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>localworker-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.localworker.LocalworkerActivity</class><inputMap><map from="url" to="url" /></inputMap><outputMap><map from="contents" to="contents" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean xmlns="">
  <localworkerName>org.embl.ebi.escience.scuflworkers.java.WebPageFetcher</localworkerName>
  <script>URL inputURL = null;
if (base != void) {
  inputURL = new URL(new URL(base), url);
}
else {
  inputURL = new URL(url);
}
URLConnection con = inputURL.openConnection();
InputStream in = con.getInputStream();

InputStreamReader isr = new InputStreamReader(in);
Reader inReader = new BufferedReader(isr);

StringBuffer buf = new StringBuffer();
int ch;
while ((ch = inReader.read()) &gt; -1) {
  buf.append((char)ch);
}
inReader.close();
contents = buf.toString();


//String NEWLINE = System.getProperty("line.separator");
//
//URL inputURL = null;
//if (base != void) {
//	inputURL = new URL(new URL(base), url);
//} else {
//	inputURL = new URL(url);
//}
//StringBuffer result = new StringBuffer();
//BufferedReader reader = new BufferedReader(new InputStreamReader(inputURL.openStream()));
//String line = null;
//while ((line = reader.readLine()) != null) {
//	result.append(line);
//	result.append(NEWLINE);
//}
//
//contents = result.toString();
</script>
  <dependencies />
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>url</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/x-taverna-web-url'</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>base</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/x-taverna-web-url'</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>0</granularDepth>
      <name>contents</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/plain,text/html'</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="url" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>cleanData</name><inputPorts><port><name>inStr</name><depth>0</depth></port></inputPorts><outputPorts><port><name>outStr</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="inStr" to="inStr" /></inputMap><outputMap><map from="outStr" to="outStr" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <script>String[] lines = inStr.split("\n");
StringBuffer sb = new StringBuffer();
for(i = 1; i &lt; lines.length -1; i++)
{
  String str = lines[i];
  str = str.replaceAll("&lt;result&gt;", "");
  str = str.replaceAll("&lt;/result&gt;", "");
  sb.append(str.trim() + "\n");
}

String outStr = sb.toString();</script>
  <dependencies />
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>inStr</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>0</granularDepth>
      <name>outStr</name>
      <depth>0</depth>
      <mimeTypes />
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="inStr" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>getEnzymeNames</name><inputPorts /><outputPorts><port><name>names</name><depth>1</depth><granularDepth>1</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap /><outputMap><map from="names" to="names" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <script>import java.sql.*;
import org.sqlite.JDBC;

String DATABASE_NAME = "taverna_sbml";
String databaseURL = "jdbc:sqlite:" + DATABASE_NAME + ".db";

//Output to hold enzyme names
ArrayList names = new ArrayList();

//Query database
try
{
  driver = "org.sqlite.JDBC";

  Class.forName(driver);
  Connection conn = DriverManager.getConnection(databaseURL);
  Statement stat = conn.createStatement();
  ResultSet rs;
  sql = "select name from species where sboTerm = 14;";
  rs = stat.executeQuery(sql);
  
  while (rs.next())
  {
    name = rs.getString(1);
    names.add(name);
  }

  //Sort out the problem complex
  names.add("YGR240C");

  rs.close();
  conn.close();

} catch (ClassNotFoundException e)
{
  e.printStackTrace();
} catch (SQLException e)
{
  e.printStackTrace();
}</script>
  <dependencies />
  <classLoaderSharing>system</classLoaderSharing>
  <localDependencies>
    <string>sqlitejdbc-v053.jar</string>
  </localDependencies>
  <artifactDependencies />
  <inputs />
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>1</granularDepth>
      <name>names</name>
      <depth>1</depth>
      <mimeTypes />
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy /></iteration></iterationStrategyStack></processor><processor><name>normalise</name><inputPorts><port><name>names</name><depth>1</depth></port><port><name>concentrations</name><depth>0</depth></port></inputPorts><outputPorts><port><name>out</name><depth>1</depth><granularDepth>1</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="names" to="names" /><map from="concentrations" to="concentrations" /></inputMap><outputMap><map from="out" to="out" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <script>String[] lines = concentrations.split("\n");

//To hold output
out = new ArrayList();
for(i = 0; i &lt; names.size(); i++)
{
  String name = names.get(i);
  //Iterate thru concs
  for(x = 0; x &lt; lines.length; x++)
  {
    if(lines[x].contains(name))
      out.add(lines[x]);
  }
}</script>
  <dependencies />
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>names</name>
      <depth>1</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>concentrations</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>1</granularDepth>
      <name>out</name>
      <depth>1</depth>
      <mimeTypes />
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="names" depth="1" /><port name="concentrations" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>updateDatasource</name><inputPorts><port><name>data</name><depth>1</depth></port></inputPorts><outputPorts><port><name>status</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="data" to="data" /></inputMap><outputMap><map from="status" to="status" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <script>import java.sql.*;
import org.sqlite.JDBC;

String DATABASE_NAME = "taverna_sbml";
String databaseURL = "jdbc:sqlite:" + DATABASE_NAME + ".db";

//Avogadro's number
static final double AVOGADROS_NUMBER = 6.02e23;
//Volume of yeast cell
static final double YEAST_CELL_VOLUME = 8.495e-14;

String status = "";

try
{
  driver = "org.sqlite.JDBC";
  Class.forName(driver);
  Connection conn = DriverManager.getConnection(databaseURL);
  Statement stat = conn.createStatement();
  
  for(int i = 0; i &lt; data.size(); i++)
  {
    String line = data.get(i);
    String[] tokens = line.split(",");
    //Convert from molecules per cell to moles per litre
    double value = Double.parseDouble(tokens[1]);
    double answer = (value*(1/YEAST_CELL_VOLUME))/AVOGADROS_NUMBER;
    //Convert to millimoles per litre
    answer = answer*1000;
    //Sort out the concentration for YGR240C:YMR205C complex
    String sql = "";
    if(tokens[0].equals("YGR240C"))
      sql = "update species set initialConc = " + Double.toString(answer) + " where name = 'YGR240C:YMR205C';";
    else
      sql = "update species set initialConc = " + Double.toString(answer) + " where name = '" + tokens[0] + "';";
    stat.execute(sql);
  }
  
  conn.close();

} catch (ClassNotFoundException e)
{
  e.printStackTrace();
  status = "Class not found exception";
} catch (SQLException e)
{
  e.printStackTrace();
  status = "SQL exception";
}

status = "ok";</script>
  <dependencies />
  <classLoaderSharing>system</classLoaderSharing>
  <localDependencies>
    <string>sqlitejdbc-v053.jar</string>
  </localDependencies>
  <artifactDependencies />
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>data</name>
      <depth>1</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>0</granularDepth>
      <name>status</name>
      <depth>0</depth>
      <mimeTypes />
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="data" depth="1" /></cross></strategy></iteration></iterationStrategyStack></processor></processors><conditions /><datalinks><datalink><sink type="processor"><processor>createCountUrl</processor><port>date</port></sink><source type="processor"><processor>exptDate</processor><port>value</port></source></datalink><datalink><sink type="processor"><processor>createCountUrl</processor><port>title</port></sink><source type="processor"><processor>exptTitle</processor><port>value</port></source></datalink><datalink><sink type="processor"><processor>getCount</processor><port>url</port></sink><source type="processor"><processor>createCountUrl</processor><port>url</port></source></datalink><datalink><sink type="processor"><processor>cleanCountData</processor><port>inStr</port></sink><source type="processor"><processor>getCount</processor><port>contents</port></source></datalink><datalink><sink type="processor"><processor>createQueryUrl</processor><port>date</port></sink><source type="processor"><processor>exptDate</processor><port>value</port></source></datalink><datalink><sink type="processor"><processor>createQueryUrl</processor><port>title</port></sink><source type="processor"><processor>exptTitle</processor><port>value</port></source></datalink><datalink><sink type="processor"><processor>createQueryUrl</processor><port>count</port></sink><source type="processor"><processor>cleanCountData</processor><port>outStr</port></source></datalink><datalink><sink type="processor"><processor>getData</processor><port>url</port></sink><source type="processor"><processor>createQueryUrl</processor><port>url</port></source></datalink><datalink><sink type="processor"><processor>cleanData</processor><port>inStr</port></sink><source type="processor"><processor>getData</processor><port>contents</port></source></datalink><datalink><sink type="processor"><processor>normalise</processor><port>names</port></sink><source type="processor"><processor>getEnzymeNames</processor><port>names</port></source></datalink><datalink><sink type="processor"><processor>normalise</processor><port>concentrations</port></sink><source type="processor"><processor>cleanData</processor><port>outStr</port></source></datalink><datalink><sink type="processor"><processor>updateDatasource</processor><port>data</port></sink><source type="processor"><processor>normalise</processor><port>out</port></source></datalink><datalink><sink type="dataflow"><port>out</port></sink><source type="processor"><processor>updateDatasource</processor><port>status</port></source></datalink></datalinks><annotations /></dataflow><dataflow id="40e3ff9a-a98c-4b99-8b11-d92e29dd98c2" role="nested"><name>Workflow12</name><inputPorts><port><name>compoundId</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port></inputPorts><outputPorts><port><name>compoundName</name><annotations /></port></outputPorts><processors><processor><name>getCompoundName</name><inputPorts><port><name>parameters</name><depth>0</depth></port></inputPorts><outputPorts><port><name>parameters</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>wsdl-activity</artifact><version>1.0.1</version></raven><class>net.sf.taverna.t2.activities.wsdl.WSDLActivity</class><inputMap><map from="parameters" to="parameters" /></inputMap><outputMap><map from="parameters" to="parameters" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.wsdl.WSDLActivityConfigurationBean xmlns="">
  <wsdl>http://sabio.villa-bosch.de/sabiork?wsdl</wsdl>
  <operation>getCompoundName</operation>
</net.sf.taverna.t2.activities.wsdl.WSDLActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="parameters" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>getCompoundName_input</name><inputPorts><port><name>arg0</name><depth>0</depth></port></inputPorts><outputPorts><port><name>output</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>wsdl-activity</artifact><version>1.0.1</version></raven><class>net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLInputSplitterActivity</class><inputMap><map from="arg0" to="arg0" /></inputMap><outputMap><map from="output" to="output" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLSplitterConfigurationBean xmlns="">
  <wrappedTypeXML>&lt;s:extensions xmlns:s="http://org.embl.ebi.escience/xscufl/0.1alpha"&gt;&lt;s:complextype optional="false" unbounded="false" typename="getCompoundName" name="parameters" qname="{http://localhost:8084/SpringingSabioRk/sabiork}getCompoundName"&gt;&lt;s:elements&gt;&lt;s:basetype optional="false" unbounded="false" typename="int" name="arg0" qname="getCompoundName&amp;gt;arg0" /&gt;&lt;/s:elements&gt;&lt;/s:complextype&gt;&lt;/s:extensions&gt;</wrappedTypeXML>
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <allowsLiteralValues>false</allowsLiteralValues>
      <name>arg0</name>
      <depth>0</depth>
      <mimeTypes class="java.util.Collections$SingletonList">
        <element class="string">'text/plain'</element>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>0</granularDepth>
      <name>output</name>
      <depth>0</depth>
      <mimeTypes class="java.util.Collections$SingletonList">
        <element class="string">'text/xml'</element>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLSplitterConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="arg0" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>getCompoundName_output</name><inputPorts><port><name>input</name><depth>0</depth></port></inputPorts><outputPorts><port><name>return</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>wsdl-activity</artifact><version>1.0.1</version></raven><class>net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLOutputSplitterActivity</class><inputMap><map from="input" to="input" /></inputMap><outputMap><map from="return" to="return" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLSplitterConfigurationBean xmlns="">
  <wrappedTypeXML>&lt;s:extensions xmlns:s="http://org.embl.ebi.escience/xscufl/0.1alpha"&gt;&lt;s:complextype optional="false" unbounded="false" typename="getCompoundNameResponse" name="parameters" qname="{http://localhost:8084/SpringingSabioRk/sabiork}getCompoundNameResponse"&gt;&lt;s:elements&gt;&lt;s:basetype optional="true" unbounded="false" typename="string" name="return" qname="getCompoundNameResponse&amp;gt;return" /&gt;&lt;/s:elements&gt;&lt;/s:complextype&gt;&lt;/s:extensions&gt;</wrappedTypeXML>
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>false</allowsLiteralValues>
      <name>input</name>
      <depth>0</depth>
      <mimeTypes class="java.util.Collections$SingletonList">
        <element class="string">'text/xml'</element>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>0</granularDepth>
      <name>return</name>
      <depth>0</depth>
      <mimeTypes class="java.util.Collections$SingletonList">
        <element class="string">'text/plain'</element>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLSplitterConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="input" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor></processors><conditions /><datalinks><datalink><sink type="processor"><processor>getCompoundName</processor><port>parameters</port></sink><source type="processor"><processor>getCompoundName_input</processor><port>output</port></source></datalink><datalink><sink type="processor"><processor>getCompoundName_input</processor><port>arg0</port></sink><source type="dataflow"><port>compoundId</port></source></datalink><datalink><sink type="processor"><processor>getCompoundName_output</processor><port>input</port></sink><source type="processor"><processor>getCompoundName</processor><port>parameters</port></source></datalink><datalink><sink type="dataflow"><port>compoundName</port></sink><source type="processor"><processor>getCompoundName_output</processor><port>return</port></source></datalink></datalinks><annotations /></dataflow><dataflow id="edfebb96-4639-484f-848d-10bb3ac5e24f" role="nested"><name>Workflow31</name><inputPorts><port><name>instId</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port></inputPorts><outputPorts><port><name>exptalCondition</name><annotations /></port></outputPorts><processors><processor><name>getExpConditions</name><inputPorts><port><name>parameters</name><depth>0</depth></port></inputPorts><outputPorts><port><name>parameters</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>wsdl-activity</artifact><version>1.0.1</version></raven><class>net.sf.taverna.t2.activities.wsdl.WSDLActivity</class><inputMap><map from="parameters" to="parameters" /></inputMap><outputMap><map from="parameters" to="parameters" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.wsdl.WSDLActivityConfigurationBean xmlns="">
  <wsdl>http://sabio.villa-bosch.de/sabiork?wsdl</wsdl>
  <operation>getExpConditions</operation>
</net.sf.taverna.t2.activities.wsdl.WSDLActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="parameters" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>getExpConditions_input</name><inputPorts><port><name>arg0</name><depth>0</depth></port></inputPorts><outputPorts><port><name>output</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>wsdl-activity</artifact><version>1.0.1</version></raven><class>net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLInputSplitterActivity</class><inputMap><map from="arg0" to="arg0" /></inputMap><outputMap><map from="output" to="output" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLSplitterConfigurationBean xmlns="">
  <wrappedTypeXML>&lt;s:extensions xmlns:s="http://org.embl.ebi.escience/xscufl/0.1alpha"&gt;&lt;s:complextype optional="false" unbounded="false" typename="getExpConditions" name="parameters" qname="{http://localhost:8084/SpringingSabioRk/sabiork}getExpConditions"&gt;&lt;s:elements&gt;&lt;s:basetype optional="false" unbounded="false" typename="int" name="arg0" qname="getExpConditions&amp;gt;arg0" /&gt;&lt;/s:elements&gt;&lt;/s:complextype&gt;&lt;/s:extensions&gt;</wrappedTypeXML>
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <allowsLiteralValues>false</allowsLiteralValues>
      <name>arg0</name>
      <depth>0</depth>
      <mimeTypes class="java.util.Collections$SingletonList">
        <element class="string">'text/plain'</element>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>0</granularDepth>
      <name>output</name>
      <depth>0</depth>
      <mimeTypes class="java.util.Collections$SingletonList">
        <element class="string">'text/xml'</element>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLSplitterConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="arg0" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>getExpConditions_output</name><inputPorts><port><name>input</name><depth>0</depth></port></inputPorts><outputPorts><port><name>return</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>wsdl-activity</artifact><version>1.0.1</version></raven><class>net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLOutputSplitterActivity</class><inputMap><map from="input" to="input" /></inputMap><outputMap><map from="return" to="return" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLSplitterConfigurationBean xmlns="">
  <wrappedTypeXML>&lt;s:extensions xmlns:s="http://org.embl.ebi.escience/xscufl/0.1alpha"&gt;&lt;s:complextype optional="false" unbounded="false" typename="getExpConditionsResponse" name="parameters" qname="{http://localhost:8084/SpringingSabioRk/sabiork}getExpConditionsResponse"&gt;&lt;s:elements&gt;&lt;s:basetype optional="true" unbounded="false" typename="string" name="return" qname="getExpConditionsResponse&amp;gt;return" /&gt;&lt;/s:elements&gt;&lt;/s:complextype&gt;&lt;/s:extensions&gt;</wrappedTypeXML>
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>false</allowsLiteralValues>
      <name>input</name>
      <depth>0</depth>
      <mimeTypes class="java.util.Collections$SingletonList">
        <element class="string">'text/xml'</element>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>0</granularDepth>
      <name>return</name>
      <depth>0</depth>
      <mimeTypes class="java.util.Collections$SingletonList">
        <element class="string">'text/plain'</element>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLSplitterConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="input" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor></processors><conditions /><datalinks><datalink><sink type="processor"><processor>getExpConditions</processor><port>parameters</port></sink><source type="processor"><processor>getExpConditions_input</processor><port>output</port></source></datalink><datalink><sink type="processor"><processor>getExpConditions_input</processor><port>arg0</port></sink><source type="dataflow"><port>instId</port></source></datalink><datalink><sink type="processor"><processor>getExpConditions_output</processor><port>input</port></sink><source type="processor"><processor>getExpConditions</processor><port>parameters</port></source></datalink><datalink><sink type="dataflow"><port>exptalCondition</port></sink><source type="processor"><processor>getExpConditions_output</processor><port>return</port></source></datalink></datalinks><annotations /></dataflow><dataflow id="ae787a2c-0368-4dc2-a11d-5200653a725b" role="nested"><name>Workflow9</name><inputPorts><port><name>instId</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port></inputPorts><outputPorts><port><name>kineticLaw</name><annotations /></port></outputPorts><processors><processor><name>getKineticLaw</name><inputPorts><port><name>parameters</name><depth>0</depth></port></inputPorts><outputPorts><port><name>parameters</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>wsdl-activity</artifact><version>1.0.1</version></raven><class>net.sf.taverna.t2.activities.wsdl.WSDLActivity</class><inputMap><map from="parameters" to="parameters" /></inputMap><outputMap><map from="parameters" to="parameters" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.wsdl.WSDLActivityConfigurationBean xmlns="">
  <wsdl>http://sabio.villa-bosch.de/sabiork?wsdl</wsdl>
  <operation>getKineticLaw</operation>
</net.sf.taverna.t2.activities.wsdl.WSDLActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="parameters" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>getKineticLaw_input</name><inputPorts><port><name>arg0</name><depth>0</depth></port></inputPorts><outputPorts><port><name>output</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>wsdl-activity</artifact><version>1.0.1</version></raven><class>net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLInputSplitterActivity</class><inputMap><map from="arg0" to="arg0" /></inputMap><outputMap><map from="output" to="output" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLSplitterConfigurationBean xmlns="">
  <wrappedTypeXML>&lt;s:extensions xmlns:s="http://org.embl.ebi.escience/xscufl/0.1alpha"&gt;&lt;s:complextype optional="false" unbounded="false" typename="getKineticLaw" name="parameters" qname="{http://localhost:8084/SpringingSabioRk/sabiork}getKineticLaw"&gt;&lt;s:elements&gt;&lt;s:basetype optional="false" unbounded="false" typename="int" name="arg0" qname="getKineticLaw&amp;gt;arg0" /&gt;&lt;/s:elements&gt;&lt;/s:complextype&gt;&lt;/s:extensions&gt;</wrappedTypeXML>
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <allowsLiteralValues>false</allowsLiteralValues>
      <name>arg0</name>
      <depth>0</depth>
      <mimeTypes class="java.util.Collections$SingletonList">
        <element class="string">'text/plain'</element>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>0</granularDepth>
      <name>output</name>
      <depth>0</depth>
      <mimeTypes class="java.util.Collections$SingletonList">
        <element class="string">'text/xml'</element>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLSplitterConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="arg0" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>getKineticLaw_output</name><inputPorts><port><name>input</name><depth>0</depth></port></inputPorts><outputPorts><port><name>return</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>wsdl-activity</artifact><version>1.0.1</version></raven><class>net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLOutputSplitterActivity</class><inputMap><map from="input" to="input" /></inputMap><outputMap><map from="return" to="return" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLSplitterConfigurationBean xmlns="">
  <wrappedTypeXML>&lt;s:extensions xmlns:s="http://org.embl.ebi.escience/xscufl/0.1alpha"&gt;&lt;s:complextype optional="false" unbounded="false" typename="getKineticLawResponse" name="parameters" qname="{http://localhost:8084/SpringingSabioRk/sabiork}getKineticLawResponse"&gt;&lt;s:elements&gt;&lt;s:basetype optional="true" unbounded="false" typename="string" name="return" qname="getKineticLawResponse&amp;gt;return" /&gt;&lt;/s:elements&gt;&lt;/s:complextype&gt;&lt;/s:extensions&gt;</wrappedTypeXML>
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>false</allowsLiteralValues>
      <name>input</name>
      <depth>0</depth>
      <mimeTypes class="java.util.Collections$SingletonList">
        <element class="string">'text/xml'</element>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>0</granularDepth>
      <name>return</name>
      <depth>0</depth>
      <mimeTypes class="java.util.Collections$SingletonList">
        <element class="string">'text/plain'</element>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLSplitterConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="input" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor></processors><conditions /><datalinks><datalink><sink type="processor"><processor>getKineticLaw</processor><port>parameters</port></sink><source type="processor"><processor>getKineticLaw_input</processor><port>output</port></source></datalink><datalink><sink type="processor"><processor>getKineticLaw_input</processor><port>arg0</port></sink><source type="dataflow"><port>instId</port></source></datalink><datalink><sink type="processor"><processor>getKineticLaw_output</processor><port>input</port></sink><source type="processor"><processor>getKineticLaw</processor><port>parameters</port></source></datalink><datalink><sink type="dataflow"><port>kineticLaw</port></sink><source type="processor"><processor>getKineticLaw_output</processor><port>return</port></source></datalink></datalinks><annotations /></dataflow><dataflow id="ff360581-6252-4541-bfd0-4091d5c8eaad" role="nested"><name>Workflow20</name><inputPorts><port><name>instId</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port></inputPorts><outputPorts><port><name>parameters</name><annotations /></port></outputPorts><processors><processor><name>getParametersXML</name><inputPorts><port><name>parameters</name><depth>0</depth></port></inputPorts><outputPorts><port><name>parameters</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>wsdl-activity</artifact><version>1.0.1</version></raven><class>net.sf.taverna.t2.activities.wsdl.WSDLActivity</class><inputMap><map from="parameters" to="parameters" /></inputMap><outputMap><map from="parameters" to="parameters" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.wsdl.WSDLActivityConfigurationBean xmlns="">
  <wsdl>http://sabio.villa-bosch.de/sabiork?wsdl</wsdl>
  <operation>getParametersXML</operation>
</net.sf.taverna.t2.activities.wsdl.WSDLActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="parameters" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>getParametersXML_input</name><inputPorts><port><name>arg0</name><depth>0</depth></port></inputPorts><outputPorts><port><name>output</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>wsdl-activity</artifact><version>1.0.1</version></raven><class>net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLInputSplitterActivity</class><inputMap><map from="arg0" to="arg0" /></inputMap><outputMap><map from="output" to="output" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLSplitterConfigurationBean xmlns="">
  <wrappedTypeXML>&lt;s:extensions xmlns:s="http://org.embl.ebi.escience/xscufl/0.1alpha"&gt;&lt;s:complextype optional="false" unbounded="false" typename="getParametersXML" name="parameters" qname="{http://localhost:8084/SpringingSabioRk/sabiork}getParametersXML"&gt;&lt;s:elements&gt;&lt;s:basetype optional="false" unbounded="false" typename="int" name="arg0" qname="getParametersXML&amp;gt;arg0" /&gt;&lt;/s:elements&gt;&lt;/s:complextype&gt;&lt;/s:extensions&gt;</wrappedTypeXML>
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <allowsLiteralValues>false</allowsLiteralValues>
      <name>arg0</name>
      <depth>0</depth>
      <mimeTypes class="java.util.Collections$SingletonList">
        <element class="string">'text/plain'</element>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>0</granularDepth>
      <name>output</name>
      <depth>0</depth>
      <mimeTypes class="java.util.Collections$SingletonList">
        <element class="string">'text/xml'</element>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLSplitterConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="arg0" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>getParametersXML_output</name><inputPorts><port><name>input</name><depth>0</depth></port></inputPorts><outputPorts><port><name>return</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>wsdl-activity</artifact><version>1.0.1</version></raven><class>net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLOutputSplitterActivity</class><inputMap><map from="input" to="input" /></inputMap><outputMap><map from="return" to="return" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLSplitterConfigurationBean xmlns="">
  <wrappedTypeXML>&lt;s:extensions xmlns:s="http://org.embl.ebi.escience/xscufl/0.1alpha"&gt;&lt;s:complextype optional="false" unbounded="false" typename="getParametersXMLResponse" name="parameters" qname="{http://localhost:8084/SpringingSabioRk/sabiork}getParametersXMLResponse"&gt;&lt;s:elements&gt;&lt;s:basetype optional="true" unbounded="false" typename="string" name="return" qname="getParametersXMLResponse&amp;gt;return" /&gt;&lt;/s:elements&gt;&lt;/s:complextype&gt;&lt;/s:extensions&gt;</wrappedTypeXML>
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>false</allowsLiteralValues>
      <name>input</name>
      <depth>0</depth>
      <mimeTypes class="java.util.Collections$SingletonList">
        <element class="string">'text/xml'</element>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>0</granularDepth>
      <name>return</name>
      <depth>0</depth>
      <mimeTypes class="java.util.Collections$SingletonList">
        <element class="string">'text/plain'</element>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLSplitterConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="input" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor></processors><conditions /><datalinks><datalink><sink type="processor"><processor>getParametersXML</processor><port>parameters</port></sink><source type="processor"><processor>getParametersXML_input</processor><port>output</port></source></datalink><datalink><sink type="processor"><processor>getParametersXML_input</processor><port>arg0</port></sink><source type="dataflow"><port>instId</port></source></datalink><datalink><sink type="processor"><processor>getParametersXML_output</processor><port>input</port></sink><source type="processor"><processor>getParametersXML</processor><port>parameters</port></source></datalink><datalink><sink type="dataflow"><port>parameters</port></sink><source type="processor"><processor>getParametersXML_output</processor><port>return</port></source></datalink></datalinks><annotations /></dataflow><dataflow id="454f2134-fd5f-498c-8b37-3ae8705c5d69" role="nested"><name>Workflow37</name><inputPorts><port><name>reactionId</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port></inputPorts><outputPorts><port><name>instanceIds</name><annotations /></port></outputPorts><processors><processor><name>getReactionInstanceIDs</name><inputPorts><port><name>parameters</name><depth>0</depth></port></inputPorts><outputPorts><port><name>parameters</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>wsdl-activity</artifact><version>1.0.1</version></raven><class>net.sf.taverna.t2.activities.wsdl.WSDLActivity</class><inputMap><map from="parameters" to="parameters" /></inputMap><outputMap><map from="parameters" to="parameters" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.wsdl.WSDLActivityConfigurationBean xmlns="">
  <wsdl>http://sabio.villa-bosch.de/sabiork?wsdl</wsdl>
  <operation>getReactionInstanceIDs</operation>
</net.sf.taverna.t2.activities.wsdl.WSDLActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="parameters" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>getReactionInstanceIDs_input</name><inputPorts><port><name>arg0</name><depth>0</depth></port></inputPorts><outputPorts><port><name>output</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>wsdl-activity</artifact><version>1.0.1</version></raven><class>net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLInputSplitterActivity</class><inputMap><map from="arg0" to="arg0" /></inputMap><outputMap><map from="output" to="output" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLSplitterConfigurationBean xmlns="">
  <wrappedTypeXML>&lt;s:extensions xmlns:s="http://org.embl.ebi.escience/xscufl/0.1alpha"&gt;&lt;s:complextype optional="false" unbounded="false" typename="getReactionInstanceIDs" name="parameters" qname="{http://localhost:8084/SpringingSabioRk/sabiork}getReactionInstanceIDs"&gt;&lt;s:elements&gt;&lt;s:basetype optional="false" unbounded="false" typename="int" name="arg0" qname="getReactionInstanceIDs&amp;gt;arg0" /&gt;&lt;/s:elements&gt;&lt;/s:complextype&gt;&lt;/s:extensions&gt;</wrappedTypeXML>
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <allowsLiteralValues>false</allowsLiteralValues>
      <name>arg0</name>
      <depth>0</depth>
      <mimeTypes class="java.util.Collections$SingletonList">
        <element class="string">'text/plain'</element>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>0</granularDepth>
      <name>output</name>
      <depth>0</depth>
      <mimeTypes class="java.util.Collections$SingletonList">
        <element class="string">'text/xml'</element>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLSplitterConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="arg0" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>getReactionInstanceIDs_output</name><inputPorts><port><name>input</name><depth>0</depth></port></inputPorts><outputPorts><port><name>return</name><depth>1</depth><granularDepth>1</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>wsdl-activity</artifact><version>1.0.1</version></raven><class>net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLOutputSplitterActivity</class><inputMap><map from="input" to="input" /></inputMap><outputMap><map from="return" to="return" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLSplitterConfigurationBean xmlns="">
  <wrappedTypeXML>&lt;s:extensions xmlns:s="http://org.embl.ebi.escience/xscufl/0.1alpha"&gt;&lt;s:complextype optional="false" unbounded="false" typename="getReactionInstanceIDsResponse" name="parameters" qname="{http://localhost:8084/SpringingSabioRk/sabiork}getReactionInstanceIDsResponse"&gt;&lt;s:elements&gt;&lt;s:arraytype optional="true" unbounded="true" wrapped="false" typename="int" name="return" qname="getReactionInstanceIDsResponse&amp;gt;return"&gt;&lt;s:elementtype&gt;&lt;s:basetype optional="false" unbounded="false" typename="int" name="" qname="{http://www.w3.org/2001/XMLSchema}int" /&gt;&lt;/s:elementtype&gt;&lt;/s:arraytype&gt;&lt;/s:elements&gt;&lt;/s:complextype&gt;&lt;/s:extensions&gt;</wrappedTypeXML>
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>false</allowsLiteralValues>
      <name>input</name>
      <depth>0</depth>
      <mimeTypes class="java.util.Collections$SingletonList">
        <element class="string">'text/xml'</element>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>1</granularDepth>
      <name>return</name>
      <depth>1</depth>
      <mimeTypes class="java.util.Collections$SingletonList">
        <element class="string">l('text/plain')</element>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLSplitterConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="input" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor></processors><conditions /><datalinks><datalink><sink type="processor"><processor>getReactionInstanceIDs</processor><port>parameters</port></sink><source type="processor"><processor>getReactionInstanceIDs_input</processor><port>output</port></source></datalink><datalink><sink type="processor"><processor>getReactionInstanceIDs_input</processor><port>arg0</port></sink><source type="dataflow"><port>reactionId</port></source></datalink><datalink><sink type="processor"><processor>getReactionInstanceIDs_output</processor><port>input</port></sink><source type="processor"><processor>getReactionInstanceIDs</processor><port>parameters</port></source></datalink><datalink><sink type="dataflow"><port>instanceIds</port></sink><source type="processor"><processor>getReactionInstanceIDs_output</processor><port>return</port></source></datalink></datalinks><annotations /></dataflow></workflow>