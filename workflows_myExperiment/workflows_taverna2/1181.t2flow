<workflow xmlns="http://taverna.sf.net/2008/xml/t2flow" version="1" producedBy="taverna-2.1.0"><dataflow id="dba92357-cc6f-4c36-8d8c-c2756b3635c7" role="top"><name>Test_for_orthologs_</name><inputPorts><port><name>test_or_not</name><depth>0</depth><granularDepth>0</granularDepth><annotations><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">  <annotationAssertions>    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.FreeTextDescription">        <text>Test files or not</text>      </annotationBean>      <date>2010-03-19 13:52:00.125 GMT</date>      <creators />      <curationEventList />    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>  </annotationAssertions></net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">  <annotationAssertions>    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.ExampleValue">        <text>1</text>      </annotationBean>      <date>2010-03-19 13:52:04.149 GMT</date>      <creators />      <curationEventList />    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>  </annotationAssertions></net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain></annotations></port></inputPorts><outputPorts><port><name>output</name><annotations><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">  <annotationAssertions>    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.FreeTextDescription">        <text>Report generated</text>      </annotationBean>      <date>2010-03-19 13:52:33.881 GMT</date>      <creators />      <curationEventList />    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>  </annotationAssertions></net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">  <annotationAssertions>    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.FreeTextDescription">        <text>Report</text>      </annotationBean>      <date>2010-03-19 13:52:13.603 GMT</date>      <creators />      <curationEventList />    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>  </annotationAssertions></net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain></annotations></port><port><name>report_location</name><annotations><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">  <annotationAssertions>    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.FreeTextDescription">        <text>Report Location, where it is found</text>      </annotationBean>      <date>2010-03-19 13:52:23.739 GMT</date>      <creators />      <curationEventList />    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>  </annotationAssertions></net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain></annotations></port></outputPorts><processors><processor><name>test_for_orthologs</name><inputPorts><port><name>arg</name><depth>0</depth></port></inputPorts><outputPorts><port><name>path</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="arg" to="arg" /></inputMap><outputMap><map from="path" to="path" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">  <script>import java.io.*;import java.util.*;path = "D:/DATA/demo/orthoResults.txt"; File f1,f2,f3;if( arg.equals("test") ){	f1 = new File("D:/DATA/proteome/sa.fasta");	f2 = new File("D:/DATA/proteome/sa.ortho");}else{	f1 = new File("D:/DATA/proteome/22602.S_aureus_USA300.fasta");  	f2 = new File("D:/DATA/proteome/22602.S_aureus_USA300.orthologues");}HashSet targetHashSet = new HashSet();HashSet sourceHashSet = new HashSet();readTargetFile(File f) {	try {	BufferedReader br = new BufferedReader(new FileReader(f));	String line = br.readLine();	while (line != null) {		//  Note:  many lines will contain "Putative uncharacterized protein"				int start = line.indexOf("|");		int end = line.indexOf("|", start+1);		if(start &gt;= 0 &amp;&amp; end &gt;= 0) {			String proteinID = line.substring(start+1,end);			targetHashSet.add(proteinID);  // would need HashMap for  K,V pair			//System.out.println("target &gt;&gt;" + proteinID + "&lt;&lt;");		}				line = br.readLine();	}		br.close();	} catch(Exception ex) { 		System.out.println(ex);	}}readOrthoFile(File f) {	try 	{		BufferedReader br = new BufferedReader(new FileReader(f));		String line = br.readLine();		while (line != null) 		{			String [] fields = line.split("\t");			//int start = line.indexOf("|");			//int end = line.indexOf("|", start+1);			//String proteinID = line.substring(start+1,end);						if (fields != null &amp;&amp; fields.length &gt; 2) {						if(fields[5].contains("B.subtilis") ) {					sourceHashSet.add(fields[2]);					// System.out.println("source &gt;&gt;" + fields[2] + "&lt;&lt;");					// String orthoProteinID = fields[7].replace(";","");					//System.out.println("ortho &gt;&gt;" + orthoProteinID + "&lt;&lt;");				}			}		line = br.readLine();		}		br.close();			} catch(Exception ex) { 		System.out.println(ex);	}}purge(HashSet target, HashSet source) {       int i = 0;	Iterator it = source.iterator();	while( it.hasNext() ) {		String s = (String) it.next();		target.remove(s);	} }readTargetFile(f1);readOrthoFile(f2);File f = new File("D:/DATA/demo/orthoResults.txt");try{	FileWriter fw = new FileWriter(f);	fw.write("target proteins = " + targetHashSet.size() + ",  orthologous source proteins = " + sourceHashSet.size() + "\n");	fw.write("Percent orthologs = " +  (100 * sourceHashSet.size())/targetHashSet.size() + "%\n\n" );		purge(targetHashSet, sourceHashSet);	fw.write("target proteins = " + targetHashSet.size()  + " if orthologs removed.\n\n");	fw.flush();	fw.close();	System.out.println("done");}catch(Exception ex) { System.err.println(ex); }</script>  <dependencies />  <classLoaderSharing>workflow</classLoaderSharing>  <localDependencies />  <artifactDependencies />  <inputs>    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>      <handledReferenceSchemes />      <translatedElementType>java.lang.String</translatedElementType>      <allowsLiteralValues>true</allowsLiteralValues>      <name>arg</name>      <depth>0</depth>      <mimeTypes>        <string>text/plain</string>      </mimeTypes>    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>  </inputs>  <outputs>    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>      <granularDepth>0</granularDepth>      <name>path</name>      <depth>0</depth>      <mimeTypes />    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>  </outputs></net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">  <maxJobs>1</maxJobs></net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">  <backoffFactor>1.0</backoffFactor>  <initialDelay>1000</initialDelay>  <maxDelay>5000</maxDelay>  <maxRetries>0</maxRetries></net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="arg" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>read_report</name><inputPorts><port><name>path</name><depth>0</depth></port></inputPorts><outputPorts><port><name>content</name><depth>0</depth><granularDepth>0</granularDepth></port><port><name>path</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="path" to="path" /></inputMap><outputMap><map from="content" to="content" /><map from="path" to="path" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">  <script>import java.io.*;StringBuffer sb = new StringBuffer();try {  BufferedReader br = new BufferedReader(new FileReader(path));  String line = br.readLine();  while(line != null) {    sb.append(line + "\n");    line = br.readLine();  }  br.close();}catch(Exception ex) {   System.out.println(ex); }content = sb.toString();  </script>  <dependencies />  <classLoaderSharing>workflow</classLoaderSharing>  <localDependencies />  <artifactDependencies />  <inputs>    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>      <handledReferenceSchemes />      <translatedElementType>java.lang.String</translatedElementType>      <allowsLiteralValues>true</allowsLiteralValues>      <name>path</name>      <depth>0</depth>      <mimeTypes>        <string>text/plain</string>      </mimeTypes>    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>  </inputs>  <outputs>    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>      <granularDepth>0</granularDepth>      <name>content</name>      <depth>0</depth>      <mimeTypes />    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>      <granularDepth>0</granularDepth>      <name>path</name>      <depth>0</depth>      <mimeTypes />    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>  </outputs></net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">  <maxJobs>1</maxJobs></net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">  <backoffFactor>1.0</backoffFactor>  <initialDelay>1000</initialDelay>  <maxDelay>5000</maxDelay>  <maxRetries>0</maxRetries></net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="path" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor></processors><conditions /><datalinks><datalink><sink type="processor"><processor>test_for_orthologs</processor><port>arg</port></sink><source type="dataflow"><port>test_or_not</port></source></datalink><datalink><sink type="processor"><processor>read_report</processor><port>path</port></sink><source type="processor"><processor>test_for_orthologs</processor><port>path</port></source></datalink><datalink><sink type="dataflow"><port>output</port></sink><source type="processor"><processor>read_report</processor><port>content</port></source></datalink><datalink><sink type="dataflow"><port>report_location</port></sink><source type="processor"><processor>read_report</processor><port>path</port></source></datalink></datalinks><annotations><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">  <annotationAssertions>    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.Author">        <text>Baywatch Solutions</text>      </annotationBean>      <date>2010-03-19 12:24:32.706 GMT</date>      <creators />      <curationEventList />    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>  </annotationAssertions></net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">  <annotationAssertions>    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.DescriptiveTitle">        <text>Test for orthologs.</text>      </annotationBean>      <date>2010-03-19 12:28:51.628 GMT</date>      <creators />      <curationEventList />    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>  </annotationAssertions></net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">  <annotationAssertions>    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.DescriptiveTitle">        <text>Test for orthologs</text>      </annotationBean>      <date>2010-03-19 12:24:43.831 GMT</date>      <creators />      <curationEventList />    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>  </annotationAssertions></net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">  <annotationAssertions>    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.FreeTextDescription">        <text>Given an orthlog file for an organism fromhttp://www.ebi.ac.uk/integr8/FtpSearch.do?orgProteomeId=22602,find proteins that are orthologous to proteinsin another oragnsims, e.g., B.subtils.  Outputspercent.</text>      </annotationBean>      <date>2010-03-19 12:30:08.441 GMT</date>      <creators />      <curationEventList />    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>  </annotationAssertions></net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">  <annotationAssertions>    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.FreeTextDescription">        <text>Give an orthlog file for an organism fromhttp://www.ebi.ac.uk/integr8/FtpSearch.do?orgProteomeId=22602,find proteins that are orthologous to proteinsin ano</text>      </annotationBean>      <date>2010-03-19 12:28:03.128 GMT</date>      <creators />      <curationEventList />    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>  </annotationAssertions></net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain></annotations></dataflow></workflow>