<workflow xmlns="http://taverna.sf.net/2008/xml/t2flow" version="1" producedBy="taverna-2.3.0"><dataflow id="bf6abfef-4605-41ec-8aa8-2ffd718f872e" role="top"><name>Define_Associated_Regions_and_Genes</name><inputPorts><port><name>parameters</name><depth>0</depth><granularDepth>0</granularDepth><annotations><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.FreeTextDescription">
        <text>Parameter XML Document</text>
      </annotationBean>
      <date>2011-06-03 09:18:42.976 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.ExampleValue">
        <text>&lt;Parameters&gt;
  &lt;Parameter name="associatedSNPs"&gt;&lt;AsociatedSNPs&gt;
&lt;AssociatedSNP rsId="rs6920220" pValue="1.08E-15"/&gt;
&lt;/AsociatedSNPs&gt;&lt;/Parameter&gt;
&lt;/Parameters&gt;</text>
      </annotationBean>
      <date>2011-06-03 09:19:54.811 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain></annotations></port></inputPorts><outputPorts><port><name>associatedRegionsXML</name><annotations><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.FreeTextDescription">
        <text>Output XML Document</text>
      </annotationBean>
      <date>2011-06-03 09:20:12.970 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain></annotations></port></outputPorts><processors><processor><name>parseParameters</name><inputPorts><port><name>xpath</name><depth>0</depth></port><port><name>paramXML</name><depth>0</depth></port></inputPorts><outputPorts><port><name>associatedSNPs</name><depth>1</depth><granularDepth>1</granularDepth></port><port><name>hapmapBuild</name><depth>0</depth><granularDepth>0</granularDepth></port><port><name>flankingKB</name><depth>0</depth><granularDepth>0</granularDepth></port><port><name>hapmapPopulation</name><depth>0</depth><granularDepth>0</granularDepth></port><port><name>hapmapVersion</name><depth>0</depth><granularDepth>0</granularDepth></port><port><name>hapmapPlugin</name><depth>0</depth><granularDepth>0</granularDepth></port><port><name>hapmapBaseURL</name><depth>0</depth><granularDepth>0</granularDepth></port><port><name>rsqCutoff</name><depth>0</depth><granularDepth>0</granularDepth></port><port><name>baseUrl</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="paramXML" to="paramXML" /><map from="xpath" to="xpath" /></inputMap><outputMap><map from="baseUrl" to="baseUrl" /><map from="hapmapVersion" to="hapmapVersion" /><map from="hapmapPopulation" to="hapmapPopulation" /><map from="associatedSNPs" to="associatedSNPs" /><map from="hapmapBaseURL" to="hapmapBaseURL" /><map from="rsqCutoff" to="rsqCutoff" /><map from="flankingKB" to="flankingKB" /><map from="hapmapBuild" to="hapmapBuild" /><map from="hapmapPlugin" to="hapmapPlugin" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>paramXML</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>xpath</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>flankingKB</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>hapmapPlugin</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>hapmapPopulation</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>hapmapVersion</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>hapmapBaseURL</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>rsqCutoff</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>associatedSNPs</name>
      <depth>1</depth>
      <mimeTypes />
      <granularDepth>1</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>hapmapBuild</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>baseUrl</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>import org.dom4j.Document;
import org.dom4j.Node;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;

String getParameter(Element root, String parameterName) {
    List nodeList = root.selectNodes("Parameter[@name='" + parameterName + "']");
    if (nodeList.size() == 1) {
        Node parameterNode = (Node) nodeList.get(0);
        String parameter = "";
        if (parameterNode.isTextOnly())
            parameter = parameterNode.getText();
        else {
            List paramElements = parameterNode.elements();
            for (int i = 0; i &lt; paramElements.size(); i++) {
                parameter += ((Element) paramElements.get(i)).asXML();
            }
        }
        if (parameter == null || parameter.equals(""))
            return null;
        else
            return parameter;
    } else if (nodeList.size() &gt; 1) {
        throw new Exception("Multiple parameters matching " + parameterName + "!");
    }
    return null;
}

SAXReader reader = new SAXReader(false);
reader.setIncludeInternalDTDDeclarations(false);
reader.setIncludeExternalDTDDeclarations(false);

Document document = reader.read(new StringReader(paramXML));
Element root = document.getRootElement();

// Set parameter defaults.
flankingKB       = "250";
hapmapPlugin     = "LDPhase3Dumper";
hapmapPopulation = "CEU";
hapmapVersion    = "hapmap27_B36";
hapmapBuild      = "36";
hapmapBaseURL    = "http://hapmap.ncbi.nlm.nih.gov/cgi-perl/gbrowse/";
rsqCutoff        = "0.5";
associatedSNPs   = new ArrayList();
baseUrl          = "http://www.biomart.org";

// Get parameters from XML.
String paramTmp;
// flankingKB.
if ((paramTmp = getParameter(root, "flankingKB")) != null)
    flankingKB = paramTmp;
// hapmapPlugin.
if ((paramTmp = getParameter(root, "hapmapPlugin")) != null)
    hapmapPlugin = paramTmp;
// hapmapPopulation.
if ((paramTmp = getParameter(root, "hapmapPopulation")) != null)
    hapmapPopulation = paramTmp;
// hapmapVersion.
if ((paramTmp = getParameter(root, "hapmapVersion")) != null) {
    hapmapVersion = paramTmp;
    // hapmapBuild.
    paramTmp = getParameter(root, "hapmapBuild");
    if (paramTmp == null &amp;&amp; ! hapmapVersion.equals("hapmap27_B36")) {
        // Get hapmapBuild from version;
        int index = hapmapVersion.indexOf("B");
        hapmapBuild = hapmapVersion.substring(index + 1);
    } else
        hapmapBuild = paramTmp;
}
    
// hapmapBaseURL.
if ((paramTmp = getParameter(root, "hapmapBaseURL")) != null)
    hapmapBaseURL = paramTmp;
// rsqCutoff.
if ((paramTmp = getParameter(root, "rsqCutoff")) != null)
    rsqCutoff = paramTmp;
// associatedSNPs.
if ((paramTmp = getParameter(root, "associatedSNPs")) != null) {
    Document assocSnpDoc = reader.read(new StringReader(paramTmp));
    List nodeList = assocSnpDoc.selectNodes(xpath);
    for (int i = 0; i &lt; nodeList.size(); i++) {
        Node node = (Node) nodeList.get(i);
        String xmlVal = node.asXML();
        if (xmlVal != null &amp;&amp; ! xmlVal.equals(""))
            associatedSNPs.add(xmlVal);
    }
}

if ((paramTmp = getParameter(root, "alternateGeneServer")) != null) {
	if (! paramTmp.equals("") &amp;&amp; ! paramTmp.equalsIgnoreCase("false"))
		baseUrl = "http://www.ensembl.org";
}</script>
  <dependencies />
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="xpath" depth="0" /><port name="paramXML" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>associatedSnpXpath</name><inputPorts /><outputPorts><port><name>value</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>stringconstant-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.stringconstant.StringConstantActivity</class><inputMap /><outputMap><map from="value" to="value" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean xmlns="">
  <value>*/AssociatedSNP</value>
</net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy /></iteration></iterationStrategyStack></processor><processor><name>get_SNPs</name><inputPorts><port><name>SNPList</name><depth>1</depth></port></inputPorts><outputPorts><port><name>build</name><depth>0</depth><granularDepth>0</granularDepth></port><port><name>output</name><depth>1</depth><granularDepth>1</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>dataflow-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.dataflow.DataflowActivity</class><inputMap><map from="SNPList" to="SNPList" /></inputMap><outputMap><map from="output" to="output" /><map from="build" to="build" /></outputMap><configBean encoding="dataflow"><dataflow ref="4fc654ce-22bb-41fa-bac0-b514769627b8" /></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="SNPList" depth="1" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>makeLiftOverParamsDbSnpToHapMap</name><inputPorts><port><name>associatedSNP</name><depth>0</depth></port><port><name>fromBuild</name><depth>0</depth></port><port><name>toBuild</name><depth>0</depth></port></inputPorts><outputPorts><port><name>xmlParams</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="fromBuild" to="fromBuild" /><map from="toBuild" to="toBuild" /><map from="associatedSNP" to="associatedSNP" /></inputMap><outputMap><map from="xmlParams" to="xmlParams" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>fromBuild</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>toBuild</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>associatedSNP</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>xmlParams</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>import org.dom4j.Element;
import org.dom4j.Node;
import org.dom4j.dom.DOMDocument;
import org.dom4j.Document;
import org.dom4j.io.SAXReader;

// Initialise Reader for associatedSNP XML.
SAXReader reader = new SAXReader(false);
reader.setIncludeInternalDTDDeclarations(false);
reader.setIncludeExternalDTDDeclarations(false);

// Make new document.
Document doc = new DOMDocument();

// Add root element.
Element rootElement = doc.addElement("Parameters");

// Add associatedSNP.
Document assocSNP = reader.read(new StringReader(associatedSNP));
Element assocSNPRoot = assocSNP.getRootElement();
rootElement.addElement("Parameter")
        .addAttribute("name", "xmlIn")
        .add(assocSNPRoot);
// Add chainXML.
//Document chainDoc = reader.read(new StringReader(chainXML));
//Element chainRoot = chainDoc.getRootElement();
//rootElement.addElement("Parameter")
//        .addAttribute("name", "chainXML")
//        .add(chainRoot);
// Add fromBuild.
rootElement.addElement("Parameter")
        .addAttribute("name", "fromBuild")
        .addText(fromBuild);
// Add toBuild.
rootElement.addElement("Parameter")
        .addAttribute("name", "toBuild")
        .addText(toBuild);
// Add rootNode.
rootElement.addElement("Parameter")
        .addAttribute("name", "rootNode")
        .addText("SnpRegion");

xmlParams = doc.asXML();</script>
  <dependencies />
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>4</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="associatedSNP" depth="0" /><port name="fromBuild" depth="0" /><port name="toBuild" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>dbSnpToHapMapChain</name><inputPorts><port><name>fromBuild</name><depth>0</depth></port><port><name>toBuild</name><depth>0</depth></port></inputPorts><outputPorts><port><name>chainXML</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>dataflow-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.dataflow.DataflowActivity</class><inputMap><map from="fromBuild" to="fromBuild" /><map from="toBuild" to="toBuild" /></inputMap><outputMap><map from="chainXML" to="chainXML" /></outputMap><configBean encoding="dataflow"><dataflow ref="ce8b5b59-bfd8-47c5-9653-42e60b7fe42d" /></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="fromBuild" depth="0" /><port name="toBuild" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>liftoverdbSnpToHapMap</name><inputPorts><port><name>parameters</name><depth>0</depth></port><port><name>chainXML</name><depth>0</depth></port></inputPorts><outputPorts><port><name>xmlOut</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>dataflow-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.dataflow.DataflowActivity</class><inputMap><map from="chainXML" to="chainXML" /><map from="parameters" to="parameters" /></inputMap><outputMap><map from="xmlOut" to="xmlOut" /></outputMap><configBean encoding="dataflow"><dataflow ref="3ce3fd14-5b92-4fe6-8198-bba08b46242d" /></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>4</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="parameters" depth="0" /><port name="chainXML" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>unifyHapmapBuild</name><inputPorts><port><name>buildIn</name><depth>0</depth></port></inputPorts><outputPorts><port><name>ucscBuildOut</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>dataflow-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.dataflow.DataflowActivity</class><inputMap><map from="buildIn" to="buildIn" /></inputMap><outputMap><map from="ucscBuildOut" to="ucscBuildOut" /></outputMap><configBean encoding="dataflow"><dataflow ref="684355e4-d805-4d18-b123-4f534539d66b" /></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="buildIn" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>addLDRegion</name><inputPorts><port><name>associatedSNP</name><depth>0</depth></port><port><name>hapmapBuild</name><depth>0</depth></port><port><name>flankingKB</name><depth>0</depth></port><port><name>pop</name><depth>0</depth></port><port><name>hapmapVersion</name><depth>0</depth></port><port><name>plugin</name><depth>0</depth></port></inputPorts><outputPorts><port><name>associatedSNPOut</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="hapmapVersion" to="hapmapVersion" /><map from="flankingKB" to="flankingKB" /><map from="pop" to="pop" /><map from="plugin" to="plugin" /><map from="hapmapBuild" to="hapmapBuild" /><map from="associatedSNP" to="associatedSNP" /></inputMap><outputMap><map from="associatedSNPOut" to="associatedSNPOut" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>associatedSNP</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>hapmapBuild</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>pop</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>flankingKB</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>plugin</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>hapmapVersion</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>associatedSNPOut</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>import org.dom4j.Document;
import org.dom4j.Node;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;

// Initialise Reader
SAXReader reader = new SAXReader(false);
reader.setIncludeInternalDTDDeclarations(false);
reader.setIncludeExternalDTDDeclarations(false);

// Read document.
Document snpDoc = reader.read(new StringReader(associatedSNP));
Element root = snpDoc.getRootElement();

// Get SnpInfo Node.
Node snpInfoNode = root.selectSingleNode("SnpInfo");
if (snpInfoNode == null) { // Non dbSNP snp.
    associatedSNPOut = associatedSNP;
    return;
}

// Get rsId and isHapMap attribute.
String rsId = snpInfoNode.attributeValue("rsId");
if (! rsId.startsWith("rs"))
    rsId = "rs" + rsId;
boolean isHapMap = Boolean.parseBoolean(snpInfoNode.attributeValue("isHapMap"));

// Check population and flanking.
if (pop.equals(""))
    pop = "CEU";
int flanking = Integer.parseInt(flankingKB);
if (flanking == 0)
    flanking = 500;
flanking *= 1000;

// Cycle through SnpRegion Nodes, adding LDRegion
// and, where necessary, HapMap parameter information.
List snpRegionNodes = root.selectNodes("SnpRegion");
for (int i = 0; i &lt; snpRegionNodes.size(); i++) {
    Node snpRegionNode = (Node) snpRegionNodes.get(i);
    String id = snpRegionNode.attributeValue("id");
    Node locationNode = snpRegionNode.selectSingleNode("Location[@ucscBuild='" + hapmapBuild + "']");

    if (locationNode == null)
        continue;

    // Get Location info.
    String chr   = locationNode.attributeValue("chromosome");
    if (! chr.startsWith("chr"))
        chr = "chr" + chr;
    int start = Integer.parseInt(locationNode.attributeValue("start"));
    int end   = Integer.parseInt(locationNode.attributeValue("end"));

    // Add LDRegion Node.
    Element ldRegion = root.addElement("LDRegion")
                           .addAttribute("snpPosition", start + ".." + end)
                           .addAttribute("id", id);
    // Add Location Node.
    ldRegion.addElement("Location")
            .addAttribute("chromosome", chr)
            .addAttribute("start", "" + start)
            .addAttribute("end", "" + end)
            .addAttribute("ucscBuild", hapmapBuild);
    // Add Snps &amp; Location.
    for (int j = 5; j &gt; 2; j -= 2) {
        Element snp = ldRegion.addElement("Snp" + j)
                              .addAttribute("rsId", rsId)
                              .addAttribute("rsq", "1")
                              .addAttribute("isAssocSNP", "true");
        snp.addElement("Location")
           .addAttribute("chromosome", chr)
           .addAttribute("start", "" + start)
           .addAttribute("end", "" + end)
           .addAttribute("ucscBuild", hapmapBuild);
    }

    // Add HapMap params if necessary.
    if (isHapMap) {
        start = start - flanking &lt; 1 ? 1 : start - flanking;
        end   = end + flanking;
        ldRegion.addElement("HapMap")
                .addAttribute("params", "name=" + chr + ":" + start + ".." + end + ";plugin=" + plugin + ";" + plugin + ".pop_code=" + pop + ";plugin_config=1;plugin_action=Go")
                .addAttribute("version", hapmapVersion)
                .addAttribute("isProcessed", "false");
    }
     
}

associatedSNPOut = snpDoc.asXML();</script>
  <dependencies />
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>4</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="associatedSNP" depth="0" /><port name="hapmapBuild" depth="0" /><port name="flankingKB" depth="0" /><port name="pop" depth="0" /><port name="hapmapVersion" depth="0" /><port name="plugin" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>defineLDRegion</name><inputPorts><port><name>associatedSNP</name><depth>0</depth></port><port><name>baseURL</name><depth>0</depth></port><port><name>rsqCutoff</name><depth>0</depth></port></inputPorts><outputPorts><port><name>AssociatedSNPOut</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>dataflow-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.dataflow.DataflowActivity</class><inputMap><map from="rsqCutoff" to="rsqCutoff" /><map from="baseURL" to="baseURL" /><map from="associatedSNP" to="associatedSNP" /></inputMap><outputMap><map from="AssociatedSNPOut" to="AssociatedSNPOut" /></outputMap><configBean encoding="dataflow"><dataflow ref="c11abb19-7024-4ad7-9891-e368426588e2" /></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>4</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="associatedSNP" depth="0" /><port name="baseURL" depth="0" /><port name="rsqCutoff" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>hotspotBuild</name><inputPorts /><outputPorts><port><name>value</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>stringconstant-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.stringconstant.StringConstantActivity</class><inputMap /><outputMap><map from="value" to="value" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean xmlns="">
  <value>hg17</value>
</net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy /></iteration></iterationStrategyStack></processor><processor><name>HapMapToHotspotChain</name><inputPorts><port><name>toBuild</name><depth>0</depth></port><port><name>fromBuild</name><depth>0</depth></port></inputPorts><outputPorts><port><name>chainXML</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>dataflow-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.dataflow.DataflowActivity</class><inputMap><map from="fromBuild" to="fromBuild" /><map from="toBuild" to="toBuild" /></inputMap><outputMap><map from="chainXML" to="chainXML" /></outputMap><configBean encoding="dataflow"><dataflow ref="ce8b5b59-bfd8-47c5-9653-42e60b7fe42d" /></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="toBuild" depth="0" /><port name="fromBuild" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>makeLiftOverParamsHapMapToHotspot</name><inputPorts><port><name>toBuild</name><depth>0</depth></port><port><name>fromBuild</name><depth>0</depth></port><port><name>associatedSNP</name><depth>0</depth></port></inputPorts><outputPorts><port><name>xmlParams</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="fromBuild" to="fromBuild" /><map from="toBuild" to="toBuild" /><map from="associatedSNP" to="associatedSNP" /></inputMap><outputMap><map from="xmlParams" to="xmlParams" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>fromBuild</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>toBuild</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>associatedSNP</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>xmlParams</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>import org.dom4j.Element;
import org.dom4j.Node;
import org.dom4j.dom.DOMDocument;
import org.dom4j.Document;
import org.dom4j.io.SAXReader;

// Initialise Reader for associatedSNP XML.
SAXReader reader = new SAXReader(false);
reader.setIncludeInternalDTDDeclarations(false);
reader.setIncludeExternalDTDDeclarations(false);

// Make new document.
Document doc = new DOMDocument();

// Add root element.
Element rootElement = doc.addElement("Parameters");

// Add associatedSNP.
Document assocSNP = reader.read(new StringReader(associatedSNP));
Element assocSNPRoot = assocSNP.getRootElement();
rootElement.addElement("Parameter")
        .addAttribute("name", "xmlIn")
        .add(assocSNPRoot);
// Add chainXML.
//Document chainDoc = reader.read(new StringReader(chainXML));
//Element chainRoot = chainDoc.getRootElement();
//rootElement.addElement("Parameter")
//        .addAttribute("name", "chainXML")
//        .add(chainRoot);
// Add fromBuild.
rootElement.addElement("Parameter")
        .addAttribute("name", "fromBuild")
        .addText(fromBuild);
// Add toBuild.
rootElement.addElement("Parameter")
        .addAttribute("name", "toBuild")
        .addText(toBuild);
// Add rootNode.
rootElement.addElement("Parameter")
        .addAttribute("name", "rootNode")
        .addText("LDRegion");

xmlParams = doc.asXML();</script>
  <dependencies />
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>4</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="toBuild" depth="0" /><port name="fromBuild" depth="0" /><port name="associatedSNP" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>liftoverHapMapToHotspot</name><inputPorts><port><name>parameters</name><depth>0</depth></port><port><name>chainXML</name><depth>0</depth></port></inputPorts><outputPorts><port><name>xmlOut</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>dataflow-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.dataflow.DataflowActivity</class><inputMap><map from="parameters" to="parameters" /><map from="chainXML" to="chainXML" /></inputMap><outputMap><map from="xmlOut" to="xmlOut" /></outputMap><configBean encoding="dataflow"><dataflow ref="e03e4fbb-32e5-460a-9c9d-c2986040dc6c" /></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>4</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="parameters" depth="0" /><port name="chainXML" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>getHotspotRegions</name><inputPorts><port><name>associatedSnp</name><depth>0</depth></port></inputPorts><outputPorts><port><name>out</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>dataflow-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.dataflow.DataflowActivity</class><inputMap><map from="associatedSnp" to="associatedSnp" /></inputMap><outputMap><map from="out" to="out" /></outputMap><configBean encoding="dataflow"><dataflow ref="3e68e183-ce8e-4ade-86d7-01cde22fb9a9" /></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>4</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="associatedSnp" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>HotspotToHg18Chain</name><inputPorts><port><name>fromBuild</name><depth>0</depth></port><port><name>toBuild</name><depth>0</depth></port></inputPorts><outputPorts><port><name>chainXML</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>dataflow-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.dataflow.DataflowActivity</class><inputMap><map from="fromBuild" to="fromBuild" /><map from="toBuild" to="toBuild" /></inputMap><outputMap><map from="chainXML" to="chainXML" /></outputMap><configBean encoding="dataflow"><dataflow ref="ce8b5b59-bfd8-47c5-9653-42e60b7fe42d" /></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="fromBuild" depth="0" /><port name="toBuild" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>hg18</name><inputPorts /><outputPorts><port><name>value</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>stringconstant-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.stringconstant.StringConstantActivity</class><inputMap /><outputMap><map from="value" to="value" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean xmlns="">
  <value>hg18</value>
</net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy /></iteration></iterationStrategyStack></processor><processor><name>HotspotToEnsemblChain</name><inputPorts><port><name>fromBuild</name><depth>0</depth></port><port><name>toBuild</name><depth>0</depth></port></inputPorts><outputPorts><port><name>chainXML</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>dataflow-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.dataflow.DataflowActivity</class><inputMap><map from="fromBuild" to="fromBuild" /><map from="toBuild" to="toBuild" /></inputMap><outputMap><map from="chainXML" to="chainXML" /></outputMap><configBean encoding="dataflow"><dataflow ref="ce8b5b59-bfd8-47c5-9653-42e60b7fe42d" /></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="fromBuild" depth="0" /><port name="toBuild" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>makeLiftOverParamsHotspotToHg18</name><inputPorts><port><name>associatedSNP</name><depth>0</depth></port><port><name>toBuild</name><depth>0</depth></port><port><name>fromBuild</name><depth>0</depth></port></inputPorts><outputPorts><port><name>xmlParams</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="fromBuild" to="fromBuild" /><map from="toBuild" to="toBuild" /><map from="associatedSNP" to="associatedSNP" /></inputMap><outputMap><map from="xmlParams" to="xmlParams" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>fromBuild</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>toBuild</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>associatedSNP</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>xmlParams</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>import org.dom4j.Element;
import org.dom4j.Node;
import org.dom4j.dom.DOMDocument;
import org.dom4j.Document;
import org.dom4j.io.SAXReader;

// Initialise Reader for associatedSNP XML.
SAXReader reader = new SAXReader(false);
reader.setIncludeInternalDTDDeclarations(false);
reader.setIncludeExternalDTDDeclarations(false);

// Make new document.
Document doc = new DOMDocument();

// Add root element.
Element rootElement = doc.addElement("Parameters");

// Add associatedSNP.
Document assocSNP = reader.read(new StringReader(associatedSNP));
Element assocSNPRoot = assocSNP.getRootElement();
rootElement.addElement("Parameter")
        .addAttribute("name", "xmlIn")
        .add(assocSNPRoot);
// Add chainXML.
//Document chainDoc = reader.read(new StringReader(chainXML));
//Element chainRoot = chainDoc.getRootElement();
//rootElement.addElement("Parameter")
//        .addAttribute("name", "chainXML")
//        .add(chainRoot);
// Add fromBuild.
rootElement.addElement("Parameter")
        .addAttribute("name", "fromBuild")
        .addText(fromBuild);
// Add toBuild.
rootElement.addElement("Parameter")
        .addAttribute("name", "toBuild")
        .addText(toBuild);
// Add rootNode.
rootElement.addElement("Parameter")
        .addAttribute("name", "rootNode")
        .addText("AssociatedRegion");

xmlParams = doc.asXML();</script>
  <dependencies />
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>4</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="associatedSNP" depth="0" /><port name="toBuild" depth="0" /><port name="fromBuild" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>liftoverHotspotToHg18</name><inputPorts><port><name>parameters</name><depth>0</depth></port><port><name>chainXML</name><depth>0</depth></port></inputPorts><outputPorts><port><name>xmlOut</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>dataflow-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.dataflow.DataflowActivity</class><inputMap><map from="chainXML" to="chainXML" /><map from="parameters" to="parameters" /></inputMap><outputMap><map from="xmlOut" to="xmlOut" /></outputMap><configBean encoding="dataflow"><dataflow ref="cd4d2d50-1ab7-4f8d-960f-cc0647bd3e89" /></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>4</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="parameters" depth="0" /><port name="chainXML" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>makeLiftOverParamsHotspotToEnsembl</name><inputPorts><port><name>fromBuild</name><depth>0</depth></port><port><name>associatedSNP</name><depth>0</depth></port><port><name>toBuild</name><depth>0</depth></port></inputPorts><outputPorts><port><name>xmlParams</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="fromBuild" to="fromBuild" /><map from="toBuild" to="toBuild" /><map from="associatedSNP" to="associatedSNP" /></inputMap><outputMap><map from="xmlParams" to="xmlParams" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>fromBuild</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>toBuild</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>associatedSNP</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>xmlParams</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>import org.dom4j.Element;
import org.dom4j.Node;
import org.dom4j.dom.DOMDocument;
import org.dom4j.Document;
import org.dom4j.io.SAXReader;

// Initialise Reader for associatedSNP XML.
SAXReader reader = new SAXReader(false);
reader.setIncludeInternalDTDDeclarations(false);
reader.setIncludeExternalDTDDeclarations(false);

// Make new document.
Document doc = new DOMDocument();

// Add root element.
Element rootElement = doc.addElement("Parameters");

// Add associatedSNP.
Document assocSNP = reader.read(new StringReader(associatedSNP));
Element assocSNPRoot = assocSNP.getRootElement();
rootElement.addElement("Parameter")
        .addAttribute("name", "xmlIn")
        .add(assocSNPRoot);
// Add chainXML.
//Document chainDoc = reader.read(new StringReader(chainXML));
//Element chainRoot = chainDoc.getRootElement();
//rootElement.addElement("Parameter")
//        .addAttribute("name", "chainXML")
//        .add(chainRoot);
// Add fromBuild.
rootElement.addElement("Parameter")
        .addAttribute("name", "fromBuild")
        .addText(fromBuild);
// Add toBuild.
rootElement.addElement("Parameter")
        .addAttribute("name", "toBuild")
        .addText(toBuild);
// Add rootNode.
rootElement.addElement("Parameter")
        .addAttribute("name", "rootNode")
        .addText("AssociatedRegion");

xmlParams = doc.asXML();</script>
  <dependencies />
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>4</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="fromBuild" depth="0" /><port name="associatedSNP" depth="0" /><port name="toBuild" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>liftoverHotspotToEnsembl</name><inputPorts><port><name>chainXML</name><depth>0</depth></port><port><name>parameters</name><depth>0</depth></port></inputPorts><outputPorts><port><name>xmlOut</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>dataflow-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.dataflow.DataflowActivity</class><inputMap><map from="parameters" to="parameters" /><map from="chainXML" to="chainXML" /></inputMap><outputMap><map from="xmlOut" to="xmlOut" /></outputMap><configBean encoding="dataflow"><dataflow ref="bbc18262-5e1e-45b4-b94e-bfdd572fbd88" /></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>4</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="chainXML" depth="0" /><port name="parameters" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>getEnsemblBiomartBuild</name><inputPorts /><outputPorts><port><name>ucscBuild</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>dataflow-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.dataflow.DataflowActivity</class><inputMap /><outputMap><map from="ucscBuild" to="ucscBuild" /></outputMap><configBean encoding="dataflow"><dataflow ref="85e82a59-ba77-4af6-bb08-f70f37a00415" /></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy /></iteration></iterationStrategyStack></processor><processor><name>getAssociatedGenes</name><inputPorts><port><name>ensemblBiomartBuild</name><depth>0</depth></port><port><name>AssociatedXML</name><depth>0</depth></port><port><name>dataset</name><depth>0</depth></port><port><name>virtualSchema</name><depth>0</depth></port><port><name>baseUrl</name><depth>0</depth></port></inputPorts><outputPorts><port><name>AssociatedXmlOutput</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>dataflow-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.dataflow.DataflowActivity</class><inputMap><map from="baseUrl" to="baseUrl" /><map from="AssociatedXML" to="AssociatedXML" /><map from="ensemblBiomartBuild" to="ensemblBiomartBuild" /><map from="dataset" to="dataset" /><map from="virtualSchema" to="virtualSchema" /></inputMap><outputMap><map from="AssociatedXmlOutput" to="AssociatedXmlOutput" /></outputMap><configBean encoding="dataflow"><dataflow ref="ee79c9fd-face-426c-ae25-628ff75f8ad1" /></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>4</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>2</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="ensemblBiomartBuild" depth="0" /><port name="AssociatedXML" depth="0" /><port name="dataset" depth="0" /><port name="virtualSchema" depth="0" /><port name="baseUrl" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>mergeResults</name><inputPorts><port><name>xmlResults</name><depth>1</depth></port></inputPorts><outputPorts><port><name>mergedResults</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="xmlResults" to="xmlResults" /></inputMap><outputMap><map from="mergedResults" to="mergedResults" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>xmlResults</name>
      <depth>1</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>mergedResults</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>import org.dom4j.Element;
import org.dom4j.Node;
import org.dom4j.dom.DOMDocument;
import org.dom4j.Document;
import org.dom4j.io.SAXReader;

// Initialise Reader for associatedSNP XML.
SAXReader reader = new SAXReader(false);
reader.setIncludeInternalDTDDeclarations(false);
reader.setIncludeExternalDTDDeclarations(false);

// Make new document.
Document doc = new DOMDocument();

// Add root element.
Element rootElement = doc.addElement("AssociatedSNPs");

for (int i = 0; i &lt; xmlResults.size(); i++) {
	String xmlResult = (String) xmlResults.get(i);
	if (xmlResult == null || xmlResult.equals(""))
		continue;
	Document assocSNPDoc = reader.read(new StringReader(xmlResult));
	Element assocSNPRoot = assocSNPDoc.getRootElement();
	rootElement.add(assocSNPRoot.detach());
}

mergedResults = doc.asXML();</script>
  <dependencies />
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="xmlResults" depth="1" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>makeLiftOverParamsHapMapToEnsembl</name><inputPorts><port><name>toBuild</name><depth>0</depth></port><port><name>associatedSNP</name><depth>0</depth></port><port><name>fromBuild</name><depth>0</depth></port></inputPorts><outputPorts><port><name>xmlParams</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="fromBuild" to="fromBuild" /><map from="toBuild" to="toBuild" /><map from="associatedSNP" to="associatedSNP" /></inputMap><outputMap><map from="xmlParams" to="xmlParams" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>fromBuild</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>toBuild</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>associatedSNP</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>xmlParams</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>import org.dom4j.Element;
import org.dom4j.Node;
import org.dom4j.dom.DOMDocument;
import org.dom4j.Document;
import org.dom4j.io.SAXReader;

// Initialise Reader for associatedSNP XML.
SAXReader reader = new SAXReader(false);
reader.setIncludeInternalDTDDeclarations(false);
reader.setIncludeExternalDTDDeclarations(false);

// Make new document.
Document doc = new DOMDocument();

// Add root element.
Element rootElement = doc.addElement("Parameters");

// Add associatedSNP.
Document assocSNP = reader.read(new StringReader(associatedSNP));
Element assocSNPRoot = assocSNP.getRootElement();
rootElement.addElement("Parameter")
        .addAttribute("name", "xmlIn")
        .add(assocSNPRoot);
// Add chainXML.
//Document chainDoc = reader.read(new StringReader(chainXML));
//Element chainRoot = chainDoc.getRootElement();
//rootElement.addElement("Parameter")
//        .addAttribute("name", "chainXML")
//        .add(chainRoot);
// Add fromBuild.
rootElement.addElement("Parameter")
        .addAttribute("name", "fromBuild")
        .addText(fromBuild);
// Add toBuild.
rootElement.addElement("Parameter")
        .addAttribute("name", "toBuild")
        .addText(toBuild);
// Add rootNode.
rootElement.addElement("Parameter")
        .addAttribute("name", "rootNode")
        .addText("LDRegion");

xmlParams = doc.asXML();</script>
  <dependencies />
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>4</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="toBuild" depth="0" /><port name="associatedSNP" depth="0" /><port name="fromBuild" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>liftoverHapMapToEnsembl</name><inputPorts><port><name>parameters</name><depth>0</depth></port><port><name>chainXML</name><depth>0</depth></port></inputPorts><outputPorts><port><name>xmlOut</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>dataflow-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.dataflow.DataflowActivity</class><inputMap><map from="parameters" to="parameters" /><map from="chainXML" to="chainXML" /></inputMap><outputMap><map from="xmlOut" to="xmlOut" /></outputMap><configBean encoding="dataflow"><dataflow ref="3ce3fd14-5b92-4fe6-8198-bba08b46242d" /></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>4</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="parameters" depth="0" /><port name="chainXML" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>HapMapToEnsemblChain</name><inputPorts><port><name>toBuild</name><depth>0</depth></port><port><name>fromBuild</name><depth>0</depth></port></inputPorts><outputPorts><port><name>chainXML</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>dataflow-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.dataflow.DataflowActivity</class><inputMap><map from="fromBuild" to="fromBuild" /><map from="toBuild" to="toBuild" /></inputMap><outputMap><map from="chainXML" to="chainXML" /></outputMap><configBean encoding="dataflow"><dataflow ref="ce8b5b59-bfd8-47c5-9653-42e60b7fe42d" /></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="toBuild" depth="0" /><port name="fromBuild" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>getEnsemblInfo</name><inputPorts><port><name>baseUrl</name><depth>0</depth></port></inputPorts><outputPorts><port><name>dataset</name><depth>0</depth><granularDepth>0</granularDepth></port><port><name>schema</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>dataflow-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.dataflow.DataflowActivity</class><inputMap><map from="baseUrl" to="baseUrl" /></inputMap><outputMap><map from="schema" to="schema" /><map from="dataset" to="dataset" /></outputMap><configBean encoding="dataflow"><dataflow ref="9e1f1b3f-b222-409e-9882-9a58c8d5ac02" /></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="baseUrl" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor></processors><conditions /><datalinks><datalink><sink type="processor"><processor>parseParameters</processor><port>xpath</port></sink><source type="processor"><processor>associatedSnpXpath</processor><port>value</port></source></datalink><datalink><sink type="processor"><processor>parseParameters</processor><port>paramXML</port></sink><source type="dataflow"><port>parameters</port></source></datalink><datalink><sink type="processor"><processor>get_SNPs</processor><port>SNPList</port></sink><source type="processor"><processor>parseParameters</processor><port>associatedSNPs</port></source></datalink><datalink><sink type="processor"><processor>makeLiftOverParamsDbSnpToHapMap</processor><port>associatedSNP</port></sink><source type="processor"><processor>get_SNPs</processor><port>output</port></source></datalink><datalink><sink type="processor"><processor>makeLiftOverParamsDbSnpToHapMap</processor><port>fromBuild</port></sink><source type="processor"><processor>get_SNPs</processor><port>build</port></source></datalink><datalink><sink type="processor"><processor>makeLiftOverParamsDbSnpToHapMap</processor><port>toBuild</port></sink><source type="processor"><processor>unifyHapmapBuild</processor><port>ucscBuildOut</port></source></datalink><datalink><sink type="processor"><processor>dbSnpToHapMapChain</processor><port>fromBuild</port></sink><source type="processor"><processor>get_SNPs</processor><port>build</port></source></datalink><datalink><sink type="processor"><processor>dbSnpToHapMapChain</processor><port>toBuild</port></sink><source type="processor"><processor>unifyHapmapBuild</processor><port>ucscBuildOut</port></source></datalink><datalink><sink type="processor"><processor>liftoverdbSnpToHapMap</processor><port>parameters</port></sink><source type="processor"><processor>makeLiftOverParamsDbSnpToHapMap</processor><port>xmlParams</port></source></datalink><datalink><sink type="processor"><processor>liftoverdbSnpToHapMap</processor><port>chainXML</port></sink><source type="processor"><processor>dbSnpToHapMapChain</processor><port>chainXML</port></source></datalink><datalink><sink type="processor"><processor>unifyHapmapBuild</processor><port>buildIn</port></sink><source type="processor"><processor>parseParameters</processor><port>hapmapBuild</port></source></datalink><datalink><sink type="processor"><processor>addLDRegion</processor><port>associatedSNP</port></sink><source type="processor"><processor>liftoverdbSnpToHapMap</processor><port>xmlOut</port></source></datalink><datalink><sink type="processor"><processor>addLDRegion</processor><port>hapmapBuild</port></sink><source type="processor"><processor>unifyHapmapBuild</processor><port>ucscBuildOut</port></source></datalink><datalink><sink type="processor"><processor>addLDRegion</processor><port>flankingKB</port></sink><source type="processor"><processor>parseParameters</processor><port>flankingKB</port></source></datalink><datalink><sink type="processor"><processor>addLDRegion</processor><port>pop</port></sink><source type="processor"><processor>parseParameters</processor><port>hapmapPopulation</port></source></datalink><datalink><sink type="processor"><processor>addLDRegion</processor><port>hapmapVersion</port></sink><source type="processor"><processor>parseParameters</processor><port>hapmapVersion</port></source></datalink><datalink><sink type="processor"><processor>addLDRegion</processor><port>plugin</port></sink><source type="processor"><processor>parseParameters</processor><port>hapmapPlugin</port></source></datalink><datalink><sink type="processor"><processor>defineLDRegion</processor><port>associatedSNP</port></sink><source type="processor"><processor>addLDRegion</processor><port>associatedSNPOut</port></source></datalink><datalink><sink type="processor"><processor>defineLDRegion</processor><port>baseURL</port></sink><source type="processor"><processor>parseParameters</processor><port>hapmapBaseURL</port></source></datalink><datalink><sink type="processor"><processor>defineLDRegion</processor><port>rsqCutoff</port></sink><source type="processor"><processor>parseParameters</processor><port>rsqCutoff</port></source></datalink><datalink><sink type="processor"><processor>HapMapToHotspotChain</processor><port>toBuild</port></sink><source type="processor"><processor>hotspotBuild</processor><port>value</port></source></datalink><datalink><sink type="processor"><processor>HapMapToHotspotChain</processor><port>fromBuild</port></sink><source type="processor"><processor>unifyHapmapBuild</processor><port>ucscBuildOut</port></source></datalink><datalink><sink type="processor"><processor>makeLiftOverParamsHapMapToHotspot</processor><port>toBuild</port></sink><source type="processor"><processor>hotspotBuild</processor><port>value</port></source></datalink><datalink><sink type="processor"><processor>makeLiftOverParamsHapMapToHotspot</processor><port>fromBuild</port></sink><source type="processor"><processor>unifyHapmapBuild</processor><port>ucscBuildOut</port></source></datalink><datalink><sink type="processor"><processor>makeLiftOverParamsHapMapToHotspot</processor><port>associatedSNP</port></sink><source type="processor"><processor>defineLDRegion</processor><port>AssociatedSNPOut</port></source></datalink><datalink><sink type="processor"><processor>liftoverHapMapToHotspot</processor><port>parameters</port></sink><source type="processor"><processor>makeLiftOverParamsHapMapToHotspot</processor><port>xmlParams</port></source></datalink><datalink><sink type="processor"><processor>liftoverHapMapToHotspot</processor><port>chainXML</port></sink><source type="processor"><processor>HapMapToHotspotChain</processor><port>chainXML</port></source></datalink><datalink><sink type="processor"><processor>getHotspotRegions</processor><port>associatedSnp</port></sink><source type="processor"><processor>liftoverHapMapToEnsembl</processor><port>xmlOut</port></source></datalink><datalink><sink type="processor"><processor>HotspotToHg18Chain</processor><port>fromBuild</port></sink><source type="processor"><processor>hotspotBuild</processor><port>value</port></source></datalink><datalink><sink type="processor"><processor>HotspotToHg18Chain</processor><port>toBuild</port></sink><source type="processor"><processor>hg18</processor><port>value</port></source></datalink><datalink><sink type="processor"><processor>HotspotToEnsemblChain</processor><port>fromBuild</port></sink><source type="processor"><processor>hotspotBuild</processor><port>value</port></source></datalink><datalink><sink type="processor"><processor>HotspotToEnsemblChain</processor><port>toBuild</port></sink><source type="processor"><processor>getEnsemblBiomartBuild</processor><port>ucscBuild</port></source></datalink><datalink><sink type="processor"><processor>makeLiftOverParamsHotspotToHg18</processor><port>associatedSNP</port></sink><source type="processor"><processor>getHotspotRegions</processor><port>out</port></source></datalink><datalink><sink type="processor"><processor>makeLiftOverParamsHotspotToHg18</processor><port>toBuild</port></sink><source type="processor"><processor>hg18</processor><port>value</port></source></datalink><datalink><sink type="processor"><processor>makeLiftOverParamsHotspotToHg18</processor><port>fromBuild</port></sink><source type="processor"><processor>hotspotBuild</processor><port>value</port></source></datalink><datalink><sink type="processor"><processor>liftoverHotspotToHg18</processor><port>parameters</port></sink><source type="processor"><processor>makeLiftOverParamsHotspotToHg18</processor><port>xmlParams</port></source></datalink><datalink><sink type="processor"><processor>liftoverHotspotToHg18</processor><port>chainXML</port></sink><source type="processor"><processor>HotspotToHg18Chain</processor><port>chainXML</port></source></datalink><datalink><sink type="processor"><processor>makeLiftOverParamsHotspotToEnsembl</processor><port>fromBuild</port></sink><source type="processor"><processor>hotspotBuild</processor><port>value</port></source></datalink><datalink><sink type="processor"><processor>makeLiftOverParamsHotspotToEnsembl</processor><port>associatedSNP</port></sink><source type="processor"><processor>liftoverHotspotToHg18</processor><port>xmlOut</port></source></datalink><datalink><sink type="processor"><processor>makeLiftOverParamsHotspotToEnsembl</processor><port>toBuild</port></sink><source type="processor"><processor>getEnsemblBiomartBuild</processor><port>ucscBuild</port></source></datalink><datalink><sink type="processor"><processor>liftoverHotspotToEnsembl</processor><port>chainXML</port></sink><source type="processor"><processor>HotspotToEnsemblChain</processor><port>chainXML</port></source></datalink><datalink><sink type="processor"><processor>liftoverHotspotToEnsembl</processor><port>parameters</port></sink><source type="processor"><processor>makeLiftOverParamsHotspotToEnsembl</processor><port>xmlParams</port></source></datalink><datalink><sink type="processor"><processor>getAssociatedGenes</processor><port>ensemblBiomartBuild</port></sink><source type="processor"><processor>getEnsemblBiomartBuild</processor><port>ucscBuild</port></source></datalink><datalink><sink type="processor"><processor>getAssociatedGenes</processor><port>AssociatedXML</port></sink><source type="processor"><processor>liftoverHotspotToEnsembl</processor><port>xmlOut</port></source></datalink><datalink><sink type="processor"><processor>getAssociatedGenes</processor><port>dataset</port></sink><source type="processor"><processor>getEnsemblInfo</processor><port>dataset</port></source></datalink><datalink><sink type="processor"><processor>getAssociatedGenes</processor><port>virtualSchema</port></sink><source type="processor"><processor>getEnsemblInfo</processor><port>schema</port></source></datalink><datalink><sink type="processor"><processor>getAssociatedGenes</processor><port>baseUrl</port></sink><source type="processor"><processor>parseParameters</processor><port>baseUrl</port></source></datalink><datalink><sink type="processor"><processor>mergeResults</processor><port>xmlResults</port></sink><source type="processor"><processor>getAssociatedGenes</processor><port>AssociatedXmlOutput</port></source></datalink><datalink><sink type="processor"><processor>makeLiftOverParamsHapMapToEnsembl</processor><port>toBuild</port></sink><source type="processor"><processor>getEnsemblBiomartBuild</processor><port>ucscBuild</port></source></datalink><datalink><sink type="processor"><processor>makeLiftOverParamsHapMapToEnsembl</processor><port>associatedSNP</port></sink><source type="processor"><processor>liftoverHapMapToHotspot</processor><port>xmlOut</port></source></datalink><datalink><sink type="processor"><processor>makeLiftOverParamsHapMapToEnsembl</processor><port>fromBuild</port></sink><source type="processor"><processor>unifyHapmapBuild</processor><port>ucscBuildOut</port></source></datalink><datalink><sink type="processor"><processor>liftoverHapMapToEnsembl</processor><port>parameters</port></sink><source type="processor"><processor>makeLiftOverParamsHapMapToEnsembl</processor><port>xmlParams</port></source></datalink><datalink><sink type="processor"><processor>liftoverHapMapToEnsembl</processor><port>chainXML</port></sink><source type="processor"><processor>HapMapToEnsemblChain</processor><port>chainXML</port></source></datalink><datalink><sink type="processor"><processor>HapMapToEnsemblChain</processor><port>toBuild</port></sink><source type="processor"><processor>getEnsemblBiomartBuild</processor><port>ucscBuild</port></source></datalink><datalink><sink type="processor"><processor>HapMapToEnsemblChain</processor><port>fromBuild</port></sink><source type="processor"><processor>unifyHapmapBuild</processor><port>ucscBuildOut</port></source></datalink><datalink><sink type="processor"><processor>getEnsemblInfo</processor><port>baseUrl</port></sink><source type="processor"><processor>parseParameters</processor><port>baseUrl</port></source></datalink><datalink><sink type="dataflow"><port>associatedRegionsXML</port></sink><source type="processor"><processor>mergeResults</processor><port>mergedResults</port></source></datalink></datalinks><annotations><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>f28ad8a8-1e7f-4b65-b35d-a02f83a0399e</identification>
      </annotationBean>
      <date>2012-03-19 10:58:46.299 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>b6c5ce01-76af-4b2c-a786-27fd8ac37af8</identification>
      </annotationBean>
      <date>2011-10-07 12:24:20.118 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>f7eee9ae-ec59-419c-85ac-bdf0c62e47f1</identification>
      </annotationBean>
      <date>2012-01-24 10:31:48.782 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>bf6abfef-4605-41ec-8aa8-2ffd718f872e</identification>
      </annotationBean>
      <date>2012-03-19 11:14:29.537 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>87b5c895-7cb1-4669-80a5-541444e90594</identification>
      </annotationBean>
      <date>2012-01-24 11:06:49.958 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>8f1e3083-ca63-4634-859a-89d07a356093</identification>
      </annotationBean>
      <date>2011-10-07 13:43:17.839 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.Author">
        <text>Paul Martin</text>
      </annotationBean>
      <date>2010-06-21 13:48:39.740 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>ec54a14c-13bc-4ae0-85c4-e16e2b01ebe1</identification>
      </annotationBean>
      <date>2011-10-07 12:54:07.476 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.DescriptiveTitle">
        <text>Define Associated Regions and Genes</text>
      </annotationBean>
      <date>2010-06-21 13:49:18.948 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>97d7621e-e252-4ba0-96b3-cfe0483ffe6d</identification>
      </annotationBean>
      <date>2012-03-19 10:43:14.872 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.FreeTextDescription">
        <text>Defines regions and genes from associated SNPs</text>
      </annotationBean>
      <date>2010-06-21 13:49:43.255 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>3ddbe5fb-b731-424e-9b17-fd5928100932</identification>
      </annotationBean>
      <date>2011-10-07 13:25:31.640 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>b7f497b8-7928-4110-990e-5682aebe78e0</identification>
      </annotationBean>
      <date>2011-10-07 13:48:51.586 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>04f13353-e554-4c45-add9-0bcc71578483</identification>
      </annotationBean>
      <date>2012-03-19 10:51:11.343 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>f3107bcb-66fb-41c3-b0ab-88fdb662af3d</identification>
      </annotationBean>
      <date>2012-03-19 10:55:20.482 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>30583d85-9bc3-4c6f-a242-596ab9b7093a</identification>
      </annotationBean>
      <date>2011-10-07 13:37:01.444 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2></annotations></dataflow><dataflow id="cdfa8c3b-8e12-4e91-bed6-cbf331ea9c29" role="nested"><name>Workflow119</name><inputPorts><port><name>rsIds</name><depth>1</depth><granularDepth>1</granularDepth><annotations /></port><port><name>dataset</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>virtualSchema</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port></inputPorts><outputPorts><port><name>hapmapRsIds</name><annotations /></port></outputPorts><processors><processor><name>hapmartQueryURL</name><inputPorts /><outputPorts><port><name>value</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>stringconstant-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.stringconstant.StringConstantActivity</class><inputMap /><outputMap><map from="value" to="value" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean xmlns="">
  <value>http://hapmap.ncbi.nlm.nih.gov/biomart/martservice</value>
</net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy /></iteration></iterationStrategyStack></processor><processor><name>buildXMLQueries</name><inputPorts><port><name>virtualSchema</name><depth>0</depth></port><port><name>dataset</name><depth>0</depth></port><port><name>rsIds</name><depth>1</depth></port></inputPorts><outputPorts><port><name>xmlQueries</name><depth>1</depth><granularDepth>1</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="dataset" to="dataset" /><map from="virtualSchema" to="virtualSchema" /><map from="rsIds" to="rsIds" /></inputMap><outputMap><map from="xmlQueries" to="xmlQueries" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>rsIds</name>
      <depth>1</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>virtualSchema</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>dataset</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>xmlQueries</name>
      <depth>1</depth>
      <mimeTypes />
      <granularDepth>1</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>import org.dom4j.Document;
import org.dom4j.Element;
import org.dom4j.dom.DOMDocument;

List xmlQueries = new ArrayList();

ArrayList queryStrings = new ArrayList();
for (int i = 0; i &lt; rsIds.size(); i += 50) {
	String queryString = "";
	for (int j = 0; j &lt; 50 &amp;&amp; i + j &lt; rsIds.size(); j++) {
		String rsId = (String) rsIds.get(i + j);
		if (queryString.equals(""))
			queryString = rsId;
		else
			queryString += "," + rsId;
	}

	// Create Document.
	Document queryDoc = new DOMDocument();

	// Add root element.
	Element rootElement = queryDoc.addElement("Query")
        	.addAttribute("virtualSchemaName", virtualSchema)
	        .addAttribute("formatter", "TSV")
	        .addAttribute("header", "0")
	        .addAttribute("uniqueRows", "1")
	        .addAttribute("datasetConfigVersion", "0.6");
	// Add Dataset.
	Element datasetElement = rootElement.addElement("Dataset")
		.addAttribute("name", dataset)
		.addAttribute("interface", "default");

	// Add filter.
	datasetElement.addElement("Filter")
		.addAttribute("name", "marker_name")
		.addAttribute("value", queryString);
	// Add Attributes.
	datasetElement.addElement("Attribute")
		.addAttribute("name", "marker1");

	// Add document to list as String with no new lines.
	String xml = queryDoc.asXML();
	xml = xml.replace("\n", "");
	xmlQueries.add(xml);
}</script>
  <dependencies />
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="virtualSchema" depth="0" /><port name="dataset" depth="0" /><port name="rsIds" depth="1" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>getHapMartResponse</name><inputPorts><port><name>url</name><depth>0</depth></port><port><name>query</name><depth>0</depth></port></inputPorts><outputPorts><port><name>hapmapRsId</name><depth>1</depth><granularDepth>1</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>localworker-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.localworker.LocalworkerActivity</class><inputMap><map from="query" to="query" /><map from="url" to="url" /></inputMap><outputMap><map from="hapmapRsId" to="hapmapRsId" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>url</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/x-taverna-web-url'</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>query</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/x-taverna-web-url'</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>hapmapRsId</name>
      <depth>1</depth>
      <mimeTypes />
      <granularDepth>1</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>List hapmapRsId = new ArrayList();

URL inputURL = new URL(url);

URLConnection con = inputURL.openConnection();

// Trigger POST.
con.setDoOutput(true);

// Get output stream and write query param.
query = "query=" + query;
OutputStream output = con.getOutputStream();
output.write(query.getBytes());

// Get input stream.
InputStream in = con.getInputStream();

InputStreamReader isr = new InputStreamReader(in);
BufferedReader inReader = new BufferedReader(isr);

String line;
while ((line = inReader.readLine()) != null) {
	hapmapRsId.add(line);
}
inReader.close();</script>
  <dependencies />
  <localworkerName>org.embl.ebi.escience.scuflworkers.java.WebPageFetcher</localworkerName>
</net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean></configBean><annotations><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.HostInstitution">
        <text>UserNameHere</text>
      </annotationBean>
      <date>2010-11-15 09:24:01.459 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain></annotations></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>2</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="url" depth="0" /><port name="query" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>flattenHapMapRsIds</name><inputPorts><port><name>inputlist</name><depth>2</depth></port></inputPorts><outputPorts><port><name>outputlist</name><depth>1</depth><granularDepth>1</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>localworker-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.localworker.LocalworkerActivity</class><inputMap><map from="inputlist" to="inputlist" /></inputMap><outputMap><map from="outputlist" to="outputlist" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>inputlist</name>
      <depth>2</depth>
      <mimeTypes>
        <string>l(l(''))</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>[B</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>outputlist</name>
      <depth>1</depth>
      <mimeTypes>
        <string>l('')</string>
      </mimeTypes>
      <granularDepth>1</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>flatten(inputs, outputs, depth) {
	for (i = inputs.iterator(); i.hasNext();) {
	    element = i.next();
		if (element instanceof Collection &amp;&amp; depth &gt; 0) {
			flatten(element, outputs, depth - 1);
		} else {
			outputs.add(element);
		}
	}
}

outputlist = new ArrayList();

flatten(inputlist, outputlist, 1);</script>
  <dependencies />
  <localworkerName>org.embl.ebi.escience.scuflworkers.java.FlattenList</localworkerName>
</net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="inputlist" depth="2" /></cross></strategy></iteration></iterationStrategyStack></processor></processors><conditions /><datalinks><datalink><sink type="processor"><processor>buildXMLQueries</processor><port>virtualSchema</port></sink><source type="dataflow"><port>virtualSchema</port></source></datalink><datalink><sink type="processor"><processor>buildXMLQueries</processor><port>dataset</port></sink><source type="dataflow"><port>dataset</port></source></datalink><datalink><sink type="processor"><processor>buildXMLQueries</processor><port>rsIds</port></sink><source type="dataflow"><port>rsIds</port></source></datalink><datalink><sink type="processor"><processor>getHapMartResponse</processor><port>url</port></sink><source type="processor"><processor>hapmartQueryURL</processor><port>value</port></source></datalink><datalink><sink type="processor"><processor>getHapMartResponse</processor><port>query</port></sink><source type="processor"><processor>buildXMLQueries</processor><port>xmlQueries</port></source></datalink><datalink><sink type="processor"><processor>flattenHapMapRsIds</processor><port>inputlist</port></sink><source type="processor"><processor>getHapMartResponse</processor><port>hapmapRsId</port></source></datalink><datalink><sink type="dataflow"><port>hapmapRsIds</port></sink><source type="processor"><processor>flattenHapMapRsIds</processor><port>outputlist</port></source></datalink></datalinks><annotations><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>cdfa8c3b-8e12-4e91-bed6-cbf331ea9c29</identification>
      </annotationBean>
      <date>2012-01-24 10:31:14.929 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>f3b56dff-5fb9-4ecd-a7fd-34cac88cae6c</identification>
      </annotationBean>
      <date>2011-10-07 12:24:20.425 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2></annotations></dataflow><dataflow id="684355e4-d805-4d18-b123-4f534539d66b" role="nested"><name>Unify_Genome_Build</name><inputPorts><port><name>buildIn</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port></inputPorts><outputPorts><port><name>ucscBuildOut</name><annotations /></port><port><name>ncbiBuildOut</name><annotations /></port><port><name>error</name><annotations /></port></outputPorts><processors><processor><name>unifyBuild</name><inputPorts><port><name>buildIn</name><depth>0</depth></port></inputPorts><outputPorts><port><name>errorString</name><depth>0</depth><granularDepth>0</granularDepth></port><port><name>ncbiBuildOut</name><depth>0</depth><granularDepth>0</granularDepth></port><port><name>ucscBuildOut</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="buildIn" to="buildIn" /></inputMap><outputMap><map from="ucscBuildOut" to="ucscBuildOut" /><map from="ncbiBuildOut" to="ncbiBuildOut" /><map from="errorString" to="errorString" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>buildIn</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>ncbiBuildOut</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>errorString</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>ucscBuildOut</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>errorString = "";
ncbiBuildOut = "";
ucscBuildOut = "";

// Try to determine build from acceptable types.
// Check for null or empty string.
if (buildIn == null || buildIn.equals("")) {
    errorString = "No Input!";
    return;
}
// Replace GRCh with NCBI.
if (buildIn.toLowerCase().startsWith("grch"))
    buildIn = buildIn.toLowerCase().replace("grch", "NCBI");
// Process NCBIxx to hgxx.
if (buildIn.toLowerCase().startsWith("ncbi")) {
    int ncbiBuild = Integer.parseInt(buildIn.substring(4));
    int ncbiOffset = ncbiBuild - 34;
    if (ncbiOffset &lt; 0) {
        errorString = "Builds prior to NCBI34 are not supported!";
        return;
    }
    ucscBuildOut = "hg" + (ncbiOffset + 16);
    ncbiBuildOut = ncbiBuild &gt;= 37 ? "GRCh" + ncbiBuild : "NCBI" + ncbiBuild;
// Catch possible problem with an hg based build string.
} else if (buildIn.toLowerCase().startsWith("hg")) {
    int hgBuild = Integer.parseInt(buildIn.substring(2));
    // Check for versions prior to 16.
    if (hgBuild &lt; 16) {
        errorString = "Builds prior to hg16 are not supported!";
        return;
    }
    ucscBuildOut = "hg" + hgBuild;
    ncbiBuildOut = hgBuild &gt;= 19 ? "GRCh" + (hgBuild + 18) : "NCBI" + (hgBuild + 18);
} else {
    int num;
    int index;
    if ((index = buildIn.indexOf('.')) != -1) {
        num = Integer.parseInt(buildIn.substring(0, index));
    } else {
        num = Integer.parseInt(buildIn);
    }
    if (num &lt; 34 &amp;&amp; num &gt; 15) { // Assume hg version.
        ucscBuildOut = "hg" + num;
        ncbiBuildOut = num &gt;= 19 ? "GRCh" + (num + 18) : "NCBI" + (num + 18);
    } else if (num &gt; 33) {
        // Assume NCBI version.
        int ncbiOffset = num - 34;
        ucscBuildOut = "hg" + (ncbiOffset + 16);
        ncbiBuildOut = num &gt;= 37 ? "GRCh" + num : "NCBI" + num;
    } else {
        errorString = "Cannot determine build prefix, please specify hg or NCBI!";
        return;
    }
}</script>
  <dependencies />
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="buildIn" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor></processors><conditions /><datalinks><datalink><sink type="processor"><processor>unifyBuild</processor><port>buildIn</port></sink><source type="dataflow"><port>buildIn</port></source></datalink><datalink><sink type="dataflow"><port>ucscBuildOut</port></sink><source type="processor"><processor>unifyBuild</processor><port>ucscBuildOut</port></source></datalink><datalink><sink type="dataflow"><port>ncbiBuildOut</port></sink><source type="processor"><processor>unifyBuild</processor><port>ncbiBuildOut</port></source></datalink><datalink><sink type="dataflow"><port>error</port></sink><source type="processor"><processor>unifyBuild</processor><port>errorString</port></source></datalink></datalinks><annotations><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.DescriptiveTitle">
        <text>Unify Genome Build</text>
      </annotationBean>
      <date>2010-04-08 13:16:52.598 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.Author">
        <text>Paul Martin</text>
      </annotationBean>
      <date>2010-04-08 13:16:33.575 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>684355e4-d805-4d18-b123-4f534539d66b</identification>
      </annotationBean>
      <date>2011-10-07 12:24:20.829 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.FreeTextDescription">
        <text>Given a build string attempts to produce the build representation for NCBI/Ensembl and UCSC.</text>
      </annotationBean>
      <date>2010-04-08 13:26:17.937 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain></annotations></dataflow><dataflow id="5c8893fa-adf1-498d-9cce-6b650207bb72" role="nested"><name>Workflow141</name><inputPorts><port><name>queries</name><depth>1</depth><granularDepth>1</granularDepth><annotations /></port><port><name>virtualSchema</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>dataset</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>baseUrl</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port></inputPorts><outputPorts><port><name>biomartResponse</name><annotations /></port></outputPorts><processors><processor><name>buildXMLQueries</name><inputPorts><port><name>dataset</name><depth>0</depth></port><port><name>virtualSchema</name><depth>0</depth></port><port><name>queries</name><depth>1</depth></port></inputPorts><outputPorts><port><name>xmlQueries</name><depth>1</depth><granularDepth>1</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="dataset" to="dataset" /><map from="virtualSchema" to="virtualSchema" /><map from="queries" to="queries" /></inputMap><outputMap><map from="xmlQueries" to="xmlQueries" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>virtualSchema</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>dataset</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>queries</name>
      <depth>1</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>xmlQueries</name>
      <depth>1</depth>
      <mimeTypes />
      <granularDepth>1</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>import org.dom4j.Document;
import org.dom4j.Element;
import org.dom4j.dom.DOMDocument;

List xmlQueries = new ArrayList();

ArrayList queryStrings = new ArrayList();
for (int i = 0; i &lt; queries.size(); i++) {
	String query = (String) queries.get(i);
	// Split query into chr, start, end
	String [] queryArray = query.split("\\t");
	if (queryArray.length != 3)
		continue;

	// Create Document.
	Document queryDoc = new DOMDocument();

	// Add root element.
	Element rootElement = queryDoc.addElement("Query")
        	.addAttribute("virtualSchemaName", virtualSchema)
	        .addAttribute("formatter", "TSV")
	        .addAttribute("header", "0")
	        .addAttribute("uniqueRows", "1")
	        .addAttribute("datasetConfigVersion", "0.6");
	// Add Dataset.
	Element datasetElement = rootElement.addElement("Dataset")
		.addAttribute("name", dataset)
		.addAttribute("interface", "default");

	// Add filters.
	datasetElement.addElement("Filter")
		.addAttribute("name", "chromosome_name")
		.addAttribute("value", queryArray[0]);
	datasetElement.addElement("Filter")
		.addAttribute("name", "start")
		.addAttribute("value", queryArray[1]);
	datasetElement.addElement("Filter")
		.addAttribute("name", "end")
		.addAttribute("value", queryArray[2]);
	// Add Attributes.
	datasetElement.addElement("Attribute")
		.addAttribute("name", "ensembl_gene_id");
	datasetElement.addElement("Attribute")
		.addAttribute("name", "ucsc");
	datasetElement.addElement("Attribute")
		.addAttribute("name", "entrezgene");
	datasetElement.addElement("Attribute")
		.addAttribute("name", "external_gene_id");
	datasetElement.addElement("Attribute")
		.addAttribute("name", "description");
	datasetElement.addElement("Attribute")
		.addAttribute("name", "source");
	datasetElement.addElement("Attribute")
		.addAttribute("name", "status");
	datasetElement.addElement("Attribute")
		.addAttribute("name", "gene_biotype");
	datasetElement.addElement("Attribute")
		.addAttribute("name", "chromosome_name");
	datasetElement.addElement("Attribute")
		.addAttribute("name", "start_position");
	datasetElement.addElement("Attribute")
		.addAttribute("name", "end_position");

	// Add document to list as String with no new lines.
	String xml = queryDoc.asXML();
	xml = xml.replace("\n", "");
	xmlQueries.add(xml);
}</script>
  <dependencies />
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="dataset" depth="0" /><port name="virtualSchema" depth="0" /><port name="queries" depth="1" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>biomartQueryURL</name><inputPorts /><outputPorts><port><name>value</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>stringconstant-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.stringconstant.StringConstantActivity</class><inputMap /><outputMap><map from="value" to="value" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean xmlns="">
  <value>/biomart/martservice</value>
</net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy /></iteration></iterationStrategyStack></processor><processor><name>getBiomartResponse</name><inputPorts><port><name>query</name><depth>0</depth></port><port><name>url</name><depth>0</depth></port></inputPorts><outputPorts><port><name>biomartResponse</name><depth>1</depth><granularDepth>1</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>localworker-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.localworker.LocalworkerActivity</class><inputMap><map from="query" to="query" /><map from="url" to="url" /></inputMap><outputMap><map from="biomartResponse" to="biomartResponse" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>url</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/x-taverna-web-url'</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>query</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/x-taverna-web-url'</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>biomartResponse</name>
      <depth>1</depth>
      <mimeTypes />
      <granularDepth>1</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>List biomartResponse = new ArrayList();

URL inputURL = new URL(url);

URLConnection con = inputURL.openConnection();

// Trigger POST.
con.setDoOutput(true);
con.setConnectTimeout(0);

// Get output stream and write query param.
query = "query=" + query;
OutputStream output = con.getOutputStream();
output.write(query.getBytes());

// Get input stream.
InputStream in = con.getInputStream();

InputStreamReader isr = new InputStreamReader(in);
BufferedReader inReader = new BufferedReader(isr);

String line;
while ((line = inReader.readLine()) != null) {
	biomartResponse.add(line);
}
inReader.close();</script>
  <dependencies />
  <localworkerName>org.embl.ebi.escience.scuflworkers.java.WebPageFetcher</localworkerName>
</net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean></configBean><annotations><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.HostInstitution">
        <text>UserNameHere</text>
      </annotationBean>
      <date>2011-02-24 12:05:09.409 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain></annotations></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>2</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="query" depth="0" /><port name="url" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>flattenBiomartResponse</name><inputPorts><port><name>inputlist</name><depth>2</depth></port></inputPorts><outputPorts><port><name>outputlist</name><depth>1</depth><granularDepth>1</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>localworker-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.localworker.LocalworkerActivity</class><inputMap><map from="inputlist" to="inputlist" /></inputMap><outputMap><map from="outputlist" to="outputlist" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>inputlist</name>
      <depth>2</depth>
      <mimeTypes>
        <string>l(l(''))</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>[B</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>outputlist</name>
      <depth>1</depth>
      <mimeTypes>
        <string>l('')</string>
      </mimeTypes>
      <granularDepth>1</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>flatten(inputs, outputs, depth) {
	for (i = inputs.iterator(); i.hasNext();) {
	    element = i.next();
		if (element instanceof Collection &amp;&amp; depth &gt; 0) {
			flatten(element, outputs, depth - 1);
		} else {
			outputs.add(element);
		}
	}
}

outputlist = new ArrayList();

flatten(inputlist, outputlist, 1);</script>
  <dependencies />
  <localworkerName>org.embl.ebi.escience.scuflworkers.java.FlattenList</localworkerName>
</net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="inputlist" depth="2" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>createUrl</name><inputPorts><port><name>string2</name><depth>0</depth></port><port><name>string1</name><depth>0</depth></port></inputPorts><outputPorts><port><name>output</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>localworker-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.localworker.LocalworkerActivity</class><inputMap><map from="string2" to="string2" /><map from="string1" to="string1" /></inputMap><outputMap><map from="output" to="output" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>string1</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/plain'</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>string2</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/plain'</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>output</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/plain'</string>
      </mimeTypes>
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>output = string1 + string2;</script>
  <dependencies />
  <localworkerName>org.embl.ebi.escience.scuflworkers.java.StringConcat</localworkerName>
</net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="string2" depth="0" /><port name="string1" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor></processors><conditions /><datalinks><datalink><sink type="processor"><processor>buildXMLQueries</processor><port>dataset</port></sink><source type="dataflow"><port>dataset</port></source></datalink><datalink><sink type="processor"><processor>buildXMLQueries</processor><port>virtualSchema</port></sink><source type="dataflow"><port>virtualSchema</port></source></datalink><datalink><sink type="processor"><processor>buildXMLQueries</processor><port>queries</port></sink><source type="dataflow"><port>queries</port></source></datalink><datalink><sink type="processor"><processor>getBiomartResponse</processor><port>query</port></sink><source type="processor"><processor>buildXMLQueries</processor><port>xmlQueries</port></source></datalink><datalink><sink type="processor"><processor>getBiomartResponse</processor><port>url</port></sink><source type="processor"><processor>createUrl</processor><port>output</port></source></datalink><datalink><sink type="processor"><processor>flattenBiomartResponse</processor><port>inputlist</port></sink><source type="processor"><processor>getBiomartResponse</processor><port>biomartResponse</port></source></datalink><datalink><sink type="processor"><processor>createUrl</processor><port>string2</port></sink><source type="processor"><processor>biomartQueryURL</processor><port>value</port></source></datalink><datalink><sink type="processor"><processor>createUrl</processor><port>string1</port></sink><source type="dataflow"><port>baseUrl</port></source></datalink><datalink><sink type="dataflow"><port>biomartResponse</port></sink><source type="processor"><processor>flattenBiomartResponse</processor><port>outputlist</port></source></datalink></datalinks><annotations><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>5c8893fa-adf1-498d-9cce-6b650207bb72</identification>
      </annotationBean>
      <date>2012-03-19 10:42:41.193 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>5ce77ae4-42f5-48fd-b510-4163d4a3be18</identification>
      </annotationBean>
      <date>2011-10-07 12:18:06.756 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>068d6dbe-9489-4164-ac16-bc1a0e4e9587</identification>
      </annotationBean>
      <date>2012-01-24 10:30:44.473 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>cd4b10fe-ee1b-410f-aa56-aa5153a1606c</identification>
      </annotationBean>
      <date>2011-10-07 13:25:01.99 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2></annotations></dataflow><dataflow id="b38d97b8-95ba-4edf-bde9-40ac98f699e4" role="nested"><name>Unify_Genome_Build</name><inputPorts><port><name>buildIn</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port></inputPorts><outputPorts><port><name>ucscBuildOut</name><annotations /></port><port><name>ncbiBuildOut</name><annotations /></port><port><name>error</name><annotations /></port></outputPorts><processors><processor><name>unifyBuild</name><inputPorts><port><name>buildIn</name><depth>0</depth></port></inputPorts><outputPorts><port><name>errorString</name><depth>0</depth><granularDepth>0</granularDepth></port><port><name>ncbiBuildOut</name><depth>0</depth><granularDepth>0</granularDepth></port><port><name>ucscBuildOut</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="buildIn" to="buildIn" /></inputMap><outputMap><map from="ucscBuildOut" to="ucscBuildOut" /><map from="ncbiBuildOut" to="ncbiBuildOut" /><map from="errorString" to="errorString" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>buildIn</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>ncbiBuildOut</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>errorString</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>ucscBuildOut</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>errorString = "";
ncbiBuildOut = "";
ucscBuildOut = "";

// Try to determine build from acceptable types.
// Check for null or empty string.
if (buildIn == null || buildIn.equals("")) {
    errorString = "No Input!";
    return;
}
// Replace GRCh with NCBI.
if (buildIn.toLowerCase().startsWith("grch"))
    buildIn = buildIn.toLowerCase().replace("grch", "NCBI");
// Process NCBIxx to hgxx.
if (buildIn.toLowerCase().startsWith("ncbi")) {
    int ncbiBuild = Integer.parseInt(buildIn.substring(4));
    int ncbiOffset = ncbiBuild - 34;
    if (ncbiOffset &lt; 0) {
        errorString = "Builds prior to NCBI34 are not supported!";
        return;
    }
    ucscBuildOut = "hg" + (ncbiOffset + 16);
    ncbiBuildOut = ncbiBuild &gt;= 37 ? "GRCh" + ncbiBuild : "NCBI" + ncbiBuild;
// Catch possible problem with an hg based build string.
} else if (buildIn.toLowerCase().startsWith("hg")) {
    int hgBuild = Integer.parseInt(buildIn.substring(2));
    // Check for versions prior to 16.
    if (hgBuild &lt; 16) {
        errorString = "Builds prior to hg16 are not supported!";
        return;
    }
    ucscBuildOut = "hg" + hgBuild;
    ncbiBuildOut = hgBuild &gt;= 19 ? "GRCh" + (hgBuild + 18) : "NCBI" + (hgBuild + 18);
} else {
    int num;
    int index;
    if ((index = buildIn.indexOf('.')) != -1) {
        num = Integer.parseInt(buildIn.substring(0, index));
    } else {
        num = Integer.parseInt(buildIn);
    }
    if (num &lt; 34 &amp;&amp; num &gt; 15) { // Assume hg version.
        ucscBuildOut = "hg" + num;
        ncbiBuildOut = num &gt;= 19 ? "GRCh" + (num + 18) : "NCBI" + (num + 18);
    } else if (num &gt; 33) {
        // Assume NCBI version.
        int ncbiOffset = num - 34;
        ucscBuildOut = "hg" + (ncbiOffset + 16);
        ncbiBuildOut = num &gt;= 37 ? "GRCh" + num : "NCBI" + num;
    } else {
        errorString = "Cannot determine build prefix, please specify hg or NCBI!";
        return;
    }
}</script>
  <dependencies />
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="buildIn" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor></processors><conditions /><datalinks><datalink><sink type="processor"><processor>unifyBuild</processor><port>buildIn</port></sink><source type="dataflow"><port>buildIn</port></source></datalink><datalink><sink type="dataflow"><port>ucscBuildOut</port></sink><source type="processor"><processor>unifyBuild</processor><port>ucscBuildOut</port></source></datalink><datalink><sink type="dataflow"><port>ncbiBuildOut</port></sink><source type="processor"><processor>unifyBuild</processor><port>ncbiBuildOut</port></source></datalink><datalink><sink type="dataflow"><port>error</port></sink><source type="processor"><processor>unifyBuild</processor><port>errorString</port></source></datalink></datalinks><annotations><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>b38d97b8-95ba-4edf-bde9-40ac98f699e4</identification>
      </annotationBean>
      <date>2011-10-07 12:24:20.806 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.DescriptiveTitle">
        <text>Unify Genome Build</text>
      </annotationBean>
      <date>2010-04-08 13:16:52.598 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.Author">
        <text>Paul Martin</text>
      </annotationBean>
      <date>2010-04-08 13:16:33.575 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.FreeTextDescription">
        <text>Given a build string attempts to produce the build representation for NCBI/Ensembl and UCSC.</text>
      </annotationBean>
      <date>2010-04-08 13:26:17.937 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain></annotations></dataflow><dataflow id="c11abb19-7024-4ad7-9891-e368426588e2" role="nested"><name>Define_LD_Region</name><inputPorts><port><name>associatedSNP</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>baseURL</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>rsqCutoff</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port></inputPorts><outputPorts><port><name>AssociatedSNPOut</name><annotations /></port></outputPorts><processors><processor><name>getLDByRegion</name><inputPorts><port><name>baseURL</name><depth>0</depth></port><port><name>associatedSNP</name><depth>0</depth></port><port><name>rsqCutoffString</name><depth>0</depth></port></inputPorts><outputPorts><port><name>associatedSnpOut</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>localworker-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.localworker.LocalworkerActivity</class><inputMap><map from="rsqCutoffString" to="rsqCutoffString" /><map from="baseURL" to="baseURL" /><map from="associatedSNP" to="associatedSNP" /></inputMap><outputMap><map from="associatedSnpOut" to="associatedSnpOut" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>associatedSNP</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/x-taverna-web-url'</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>baseURL</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/x-taverna-web-url'</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>rsqCutoffString</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>associatedSnpOut</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>import org.dom4j.Document;
import org.dom4j.Element;
import org.dom4j.Node;
import org.dom4j.io.SAXReader;

// convert rsqCutoff to double.
double rsqCutoff = Double.parseDouble(rsqCutoffString);

// Initialise Reader.
SAXReader reader = new SAXReader(false);
reader.setIncludeInternalDTDDeclarations(false);
reader.setIncludeExternalDTDDeclarations(false);

// Get Document.
Document snpDoc = reader.read(new StringReader(associatedSNP));
Element root    = snpDoc.getRootElement();

// Get SnpInfo Node.
Node snpInfoNode = root.selectSingleNode("SnpInfo");
if (snpInfoNode == null) { // Non dbSNP SNP.
    associatedSnpOut = associatedSNP;
    return;
}

// Get rsId &amp; isHapMap attribute.
String rsId = snpInfoNode.attributeValue("rsId");
if (! rsId.startsWith("rs"))
    rsId = "rs" + rsId;
boolean isHapMap = Boolean.parseBoolean(snpInfoNode.attributeValue("isHapMap"));

if (! isHapMap) {
    associatedSnpOut = associatedSNP;
    return;
}

// Cycle through LDRegion Nodes and get HapMap information.
List ldRegionNodes = root.selectNodes("LDRegion");
for (int i = 0; i &lt; ldRegionNodes.size(); i++) {
    Node ldRegionNode = (Node) ldRegionNodes.get(i);
    String id = ldRegionNode.attributeValue("id");
    Node hapmapNode = ldRegionNode.selectSingleNode("HapMap");

    if (hapmapNode == null)
        continue;
    else if (hapmapNode.attributeValue("isProcessed") != null &amp;&amp; hapmapNode.attributeValue("isProcessed").equals("true"))
        continue;

    // Get HapMap url
    String version     = hapmapNode.attributeValue("version");
    String params      = hapmapNode.attributeValue("params");
    String completeUrl = baseURL + version + "?" + params;

    URL inputURL = new URL(completeUrl);
    URLConnection con = inputURL.openConnection();
    con.setConnectTimeout(1000);
    String contType = con.getContentType();
    int retryCount = 0;
    while (! contType.startsWith("text/plain")) {
        con.disconnect();
        con = inputURL.openConnection();
        contType = con.getContentType();
        retryCount++;
        if (retryCount &gt; 10)
            break;
    }

    if (! contType.startsWith("text/plain")) {
        ((Element) hapmapNode).addAttribute("isError", "true");
        break;
    }

    InputStream in = con.getInputStream();

    InputStreamReader isr = new InputStreamReader(in);
    BufferedReader inReader = new BufferedReader(isr);

    StringBuilder buf = new StringBuilder();
    buf.ensureCapacity(4 * 1024 * 1024); // 4Mb.
    String line;
    while ((line = inReader.readLine()) != null) {
	if (line.startsWith("#")) {
		buf.append(line + "\n");
                continue;
	}
	
	String[] lineArray = line.split("\\s+");
        if (lineArray.length == 8) {
        	if (Double.parseDouble(lineArray[6]) &lt; rsqCutoff)
			continue;
		if (!lineArray[3].equals(rsId) &amp;&amp; !lineArray[4].equals(rsId))
			continue;

		buf.append(line + "\n");
	}
    }
    inReader.close();

    Element hapmapElement = (Element) hapmapNode;
    hapmapElement.addText(buf.toString());
}
    
associatedSnpOut = snpDoc.asXML();</script>
  <dependencies />
  <localworkerName>org.embl.ebi.escience.scuflworkers.java.WebPageFetcher</localworkerName>
</net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean></configBean><annotations><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.HostInstitution">
        <text>UserNameHere</text>
      </annotationBean>
      <date>2010-12-09 12:24:25.426 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain></annotations></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="baseURL" depth="0" /><port name="associatedSNP" depth="0" /><port name="rsqCutoffString" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>parseHapMapData</name><inputPorts><port><name>assocSNP</name><depth>0</depth></port><port><name>rsqCutoffString</name><depth>0</depth></port></inputPorts><outputPorts><port><name>assocSNPout</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="rsqCutoffString" to="rsqCutoffString" /><map from="assocSNP" to="assocSNP" /></inputMap><outputMap><map from="assocSNPout" to="assocSNPout" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>assocSNP</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>rsqCutoffString</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>assocSNPout</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>import org.dom4j.Document;
import org.dom4j.Element;
import org.dom4j.Attribute;
import org.dom4j.Node;
import org.dom4j.io.SAXReader;

// convert rsqCutoff to double.
double rsqCutoff = Double.parseDouble(rsqCutoffString);

// Initialise Reader.
SAXReader reader = new SAXReader(false);
reader.setIncludeInternalDTDDeclarations(false);
reader.setIncludeExternalDTDDeclarations(false);

// Get Document.
Document assocSnpDoc = reader.read(new StringReader(assocSNP));

// get associatedSNP &amp;&amp; dbSNP Nodes
Node assocSnpNode = assocSnpDoc.selectSingleNode("AssociatedSNP");
Node snpInfoNode    = assocSnpNode.selectSingleNode("SnpInfo");

if (snpInfoNode == null) {
	assocSNPout = assocSNP;
	return;
}

// Check whether SNP is in HapMap.
String isHapMap = snpInfoNode.attributeValue("isHapMap");
String rsId = "rs" + snpInfoNode.attributeValue("rsId");

if (isHapMap.equals("false") || isHapMap.equals("")) {
    // LDRegion has already been initialised to AssociatedSnp position.
    assocSNPout = assocSnpDoc.asXML();
} else {
    List ldRegions = assocSnpNode.selectNodes("LDRegion");
    for (int i = 0; i &lt; ldRegions.size(); i++) {
        Node ldRegionNode = (Node) ldRegions.get(i);
        Node locationNode = ldRegionNode.selectSingleNode("Location");
        Node hapmapNode = ldRegionNode.selectSingleNode("HapMap");

        // Check we have LD data.
        if (hapmapNode.valueOf("@isError").equals("true"))
            continue;

        // Get starting values.
        int position5 = Integer.parseInt(locationNode.attributeValue("start"));
        String snp5   = rsId;
        String rsq5   = "1";
        int position3 = Integer.parseInt(locationNode.attributeValue("end"));
        String snp3   = rsId;
        String rsq3   = "1";

        String hapmapData = hapmapNode.valueOf(".");
        String [] hapmapDataArray = hapmapData.split("\n");
	StringBuilder hapmapDataReduced = new StringBuilder();
	StringBuilder hapmapDataHeader = new StringBuilder();
	 // Ensure capacity of 10% of original (assuming average 60chars line).
	hapmapDataReduced.ensureCapacity((int) ((hapmapDataArray.length * 0.1) * 60));
	for (int i = 0; i &lt; hapmapDataArray.length; i++) {
            String line = hapmapDataArray[i];
            if (line.startsWith("#")) {
		hapmapDataHeader.append(line + "\n");
                continue;
	    }

            // pos1 pos2 pop  marker1  marker2 D' r^2 LOD
            String[] lineArray = line.split("\\s+");
            if (lineArray.length == 8) {
                if (Double.parseDouble(lineArray[6]) &lt; rsqCutoff)
                    continue;
                if (!lineArray[3].equals(rsId) &amp;&amp; !lineArray[4].equals(rsId))
                    continue;

                int pos1 = Integer.parseInt(lineArray[0]);
                int pos2 = Integer.parseInt(lineArray[1]);
                if (lineArray[3].equals(rsId)) {
                    if (lineArray[3].equals(rsId) &amp;&amp; pos2 &lt; position5) {
                        position5 = pos2;
                        snp5 = lineArray[4];
                        rsq5 = lineArray[6];
                    }
                    if (lineArray[3].equals(rsId) &amp;&amp; pos2 &gt; position3) {
                        position3 = pos2;
                        snp3 = lineArray[4];
                        rsq3 = lineArray[6];
                    }
                }
                if (lineArray[4].equals(rsId)) {
                    if (lineArray[4].equals(rsId) &amp;&amp; pos1 &lt; position5) {
                        position5 = pos1;
                        snp5 = lineArray[3];
                        rsq5 = lineArray[6];
                    }
                    if (lineArray[4].equals(rsId) &amp;&amp; pos1 &gt; position3) {
                        position3 = pos1;
                        snp3 = lineArray[3];
                        rsq3 = lineArray[6];
                    }
                }
		hapmapDataReduced.append(line + "\n");
            }
        }

	String hapmapString = hapmapDataReduced.length() &gt; 0 ? hapmapDataHeader.toString() + hapmapDataReduced.toString() : "# No HapMap Data";
        // No SNP in rsq &gt;= rsqcutoff, set processed to true, add ProcessedLines &amp; continue.
        if (snp5.equals(rsId) &amp;&amp; snp3.equals(rsId)) {
            ((Attribute) hapmapNode.selectSingleNode("@isProcessed")).setValue("true");
	    hapmapNode.setText(hapmapString);
            continue;
        }

        // Get default chromosome info.
        String chr = locationNode.attributeValue("chromosome");
        String build = locationNode.attributeValue("ucscBuild");

        // Snp5 new, remove old and add new.
        if (! snp5.equals(rsId)) {
            Node snp5Node = ldRegionNode.selectSingleNode("Snp5");
            if (snp5Node != null)
                snp5Node.detach();
            Element snp5Element = ldRegionNode.addElement("Snp5")
                                              .addAttribute("rsId", snp5)
                                              .addAttribute("rsq", rsq5)
                                              .addAttribute("isAssocSNP", "false");
            // Add SNP location element.
            snp5Element.addElement("Location")
                       .addAttribute("chromosome", chr)
                       .addAttribute("start", "" + position5)
                       .addAttribute("end", "" + position5)
                       .addAttribute("ucscBuild", build);
        }

        if (! snp3.equals(rsId)) {
            Node snp3Node = ldRegionNode.selectSingleNode("Snp3");
            if (snp3Node != null)
                snp3Node.detach();
            Element snp3Element = ldRegionNode.addElement("Snp3")
                                          .addAttribute("rsId", snp3)
                                          .addAttribute("rsq", rsq3)
                                          .addAttribute("isAssocSNP", "false");
            // Add SNP location element.
            snp3Element.addElement("Location")
                       .addAttribute("chromosome", chr)
                       .addAttribute("start", "" + position3)
                       .addAttribute("end", "" + position3)
                       .addAttribute("ucscBuild", build);
        }

        // Update LDRegion location.
        ((Attribute) locationNode.selectSingleNode("@start")).setValue("" + position5);
        ((Attribute) locationNode.selectSingleNode("@end")).setValue("" + position3);
        // Update isProcessed attribute.
        ((Attribute) hapmapNode.selectSingleNode("@isProcessed")).setValue("true");
	hapmapNode.setText(hapmapString);
    }

    assocSNPout = assocSnpDoc.asXML();
}</script>
  <dependencies />
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="assocSNP" depth="0" /><port name="rsqCutoffString" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor></processors><conditions /><datalinks><datalink><sink type="processor"><processor>getLDByRegion</processor><port>baseURL</port></sink><source type="dataflow"><port>baseURL</port></source></datalink><datalink><sink type="processor"><processor>getLDByRegion</processor><port>associatedSNP</port></sink><source type="dataflow"><port>associatedSNP</port></source></datalink><datalink><sink type="processor"><processor>getLDByRegion</processor><port>rsqCutoffString</port></sink><source type="dataflow"><port>rsqCutoff</port></source></datalink><datalink><sink type="processor"><processor>parseHapMapData</processor><port>assocSNP</port></sink><source type="processor"><processor>getLDByRegion</processor><port>associatedSnpOut</port></source></datalink><datalink><sink type="processor"><processor>parseHapMapData</processor><port>rsqCutoffString</port></sink><source type="dataflow"><port>rsqCutoff</port></source></datalink><datalink><sink type="dataflow"><port>AssociatedSNPOut</port></sink><source type="processor"><processor>parseHapMapData</processor><port>assocSNPout</port></source></datalink></datalinks><annotations><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>c11abb19-7024-4ad7-9891-e368426588e2</identification>
      </annotationBean>
      <date>2011-10-07 12:24:21.349 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.DescriptiveTitle">
        <text>Define LD Region</text>
      </annotationBean>
      <date>2010-02-17 13:12:39.135 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.Author">
        <text>Paul Martin</text>
      </annotationBean>
      <date>2010-02-17 13:12:05.186 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain></annotations></dataflow><dataflow id="33838205-a676-4300-af63-813e22b5df37" role="nested"><name>Workflow109</name><inputPorts /><outputPorts><port><name>dataset</name><annotations /></port><port><name>virtualSchema</name><annotations /></port></outputPorts><processors><processor><name>hapmartRegistryURL</name><inputPorts /><outputPorts><port><name>value</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>stringconstant-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.stringconstant.StringConstantActivity</class><inputMap /><outputMap><map from="value" to="value" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean xmlns="">
  <value>http://hapmap.ncbi.nlm.nih.gov/biomart/martservice?type=registry</value>
</net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy /></iteration></iterationStrategyStack></processor><processor><name>hapmartDatasetURL</name><inputPorts /><outputPorts><port><name>value</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>stringconstant-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.stringconstant.StringConstantActivity</class><inputMap /><outputMap><map from="value" to="value" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean xmlns="">
  <value>http://hapmap.ncbi.nlm.nih.gov/biomart/martservice?type=datasets&amp;mart=</value>
</net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy /></iteration></iterationStrategyStack></processor><processor><name>getHapMartRegistry</name><inputPorts><port><name>url</name><depth>0</depth></port></inputPorts><outputPorts><port><name>name</name><depth>0</depth><granularDepth>0</granularDepth></port><port><name>virtualSchema</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>localworker-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.localworker.LocalworkerActivity</class><inputMap><map from="url" to="url" /></inputMap><outputMap><map from="name" to="name" /><map from="virtualSchema" to="virtualSchema" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>url</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/x-taverna-web-url'</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>virtualSchema</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>name</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>import org.dom4j.Document;
import org.dom4j.Node;
import org.dom4j.io.SAXReader;

SAXReader reader = new SAXReader(false);
reader.setIncludeInternalDTDDeclarations(false);
reader.setIncludeExternalDTDDeclarations(false);

URL inputURL = null;
inputURL = new URL(url);

URLConnection con = inputURL.openConnection();
InputStream in = con.getInputStream();

Document document = reader.read(in);
Node root = document.getRootElement();
List nodes = root.selectNodes("MartURLLocation[@default=1]");

if (nodes.size() == 1) {
	virtualSchema = nodes.get(0).attributeValue("serverVirtualSchema");
	name          = nodes.get(0).attributeValue("name");
} else {
	virtualSchema = "";
	name = "";
}</script>
  <dependencies />
  <localworkerName>org.embl.ebi.escience.scuflworkers.java.WebPageFetcher</localworkerName>
</net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean></configBean><annotations><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.HostInstitution">
        <text>UserNameHere</text>
      </annotationBean>
      <date>2010-11-11 11:14:35.90 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain></annotations></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="url" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>joinHapMartDatasetURL</name><inputPorts><port><name>string2</name><depth>0</depth></port><port><name>string1</name><depth>0</depth></port></inputPorts><outputPorts><port><name>output</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>localworker-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.localworker.LocalworkerActivity</class><inputMap><map from="string2" to="string2" /><map from="string1" to="string1" /></inputMap><outputMap><map from="output" to="output" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>string1</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/plain'</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>string2</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/plain'</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>output</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/plain'</string>
      </mimeTypes>
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>output = string1 + string2;</script>
  <dependencies />
  <localworkerName>org.embl.ebi.escience.scuflworkers.java.StringConcat</localworkerName>
</net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="string2" depth="0" /><port name="string1" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>downloadHapMartDatasets</name><inputPorts><port><name>url</name><depth>0</depth></port></inputPorts><outputPorts><port><name>contents</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>localworker-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.localworker.LocalworkerActivity</class><inputMap><map from="url" to="url" /></inputMap><outputMap><map from="contents" to="contents" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>url</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/x-taverna-web-url'</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>base</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/x-taverna-web-url'</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>contents</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/plain,text/html'</string>
      </mimeTypes>
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>URL inputURL = null;
if (base != void) {
  inputURL = new URL(new URL(base), url);
}
else {
  inputURL = new URL(url);
}
URLConnection con = inputURL.openConnection();
InputStream in = con.getInputStream();

InputStreamReader isr = new InputStreamReader(in);
Reader inReader = new BufferedReader(isr);

StringBuffer buf = new StringBuffer();
int ch;
while ((ch = inReader.read()) &gt; -1) {
  buf.append((char)ch);
}
inReader.close();
contents = buf.toString();


//String NEWLINE = System.getProperty("line.separator");
//
//URL inputURL = null;
//if (base != void) {
//	inputURL = new URL(new URL(base), url);
//} else {
//	inputURL = new URL(url);
//}
//StringBuffer result = new StringBuffer();
//BufferedReader reader = new BufferedReader(new InputStreamReader(inputURL.openStream()));
//String line = null;
//while ((line = reader.readLine()) != null) {
//	result.append(line);
//	result.append(NEWLINE);
//}
//
//contents = result.toString();
</script>
  <dependencies />
  <localworkerName>org.embl.ebi.escience.scuflworkers.java.WebPageFetcher</localworkerName>
</net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="url" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>getHapMartDataset</name><inputPorts><port><name>hapmartDatasets</name><depth>0</depth></port></inputPorts><outputPorts><port><name>dataset</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>localworker-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.localworker.LocalworkerActivity</class><inputMap><map from="hapmartDatasets" to="hapmartDatasets" /></inputMap><outputMap><map from="dataset" to="dataset" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>hapmartDatasets</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/plain'</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>dataset</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>List list = new ArrayList();
if (!hapmartDatasets.equals("")) {
	String[] result = hapmartDatasets.split("\n");
	for (int i = 0; i &lt; result.length; i++) {
		if (result[i].equals("") || result[i].equals(" "))
			continue;
		String [] datasetInfo = result[i].split("\t");
		if (datasetInfo[2].equals("All Populations") &amp;&amp; datasetInfo[3].equals("1")) {
			dataset = datasetInfo[1];
			break;
		}
	}
}</script>
  <dependencies />
  <localworkerName>org.embl.ebi.escience.scuflworkers.java.SplitByRegex</localworkerName>
</net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean></configBean><annotations><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.HostInstitution">
        <text>UserNameHere</text>
      </annotationBean>
      <date>2010-11-12 09:56:17.638 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain></annotations></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="hapmartDatasets" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor></processors><conditions /><datalinks><datalink><sink type="processor"><processor>getHapMartRegistry</processor><port>url</port></sink><source type="processor"><processor>hapmartRegistryURL</processor><port>value</port></source></datalink><datalink><sink type="processor"><processor>joinHapMartDatasetURL</processor><port>string2</port></sink><source type="processor"><processor>getHapMartRegistry</processor><port>name</port></source></datalink><datalink><sink type="processor"><processor>joinHapMartDatasetURL</processor><port>string1</port></sink><source type="processor"><processor>hapmartDatasetURL</processor><port>value</port></source></datalink><datalink><sink type="processor"><processor>downloadHapMartDatasets</processor><port>url</port></sink><source type="processor"><processor>joinHapMartDatasetURL</processor><port>output</port></source></datalink><datalink><sink type="processor"><processor>getHapMartDataset</processor><port>hapmartDatasets</port></sink><source type="processor"><processor>downloadHapMartDatasets</processor><port>contents</port></source></datalink><datalink><sink type="dataflow"><port>dataset</port></sink><source type="processor"><processor>getHapMartDataset</processor><port>dataset</port></source></datalink><datalink><sink type="dataflow"><port>virtualSchema</port></sink><source type="processor"><processor>getHapMartRegistry</processor><port>virtualSchema</port></source></datalink></datalinks><annotations><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>33838205-a676-4300-af63-813e22b5df37</identification>
      </annotationBean>
      <date>2011-10-07 12:24:21.130 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2></annotations></dataflow><dataflow id="9e1f1b3f-b222-409e-9882-9a58c8d5ac02" role="nested"><name>Workflow27</name><inputPorts><port><name>baseUrl</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port></inputPorts><outputPorts><port><name>dataset</name><annotations /></port><port><name>schema</name><annotations /></port></outputPorts><processors><processor><name>getEnsemblInfo</name><inputPorts><port><name>registryXML</name><depth>0</depth></port><port><name>baseUrl</name><depth>0</depth></port></inputPorts><outputPorts><port><name>schemaOut</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="baseUrl" to="baseUrl" /><map from="registryXML" to="registryXML" /></inputMap><outputMap><map from="schemaOut" to="schemaOut" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>registryXML</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>baseUrl</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>schemaOut</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>import org.dom4j.Document;
import org.dom4j.Node;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;

schemaOut = "default";

SAXReader reader = new SAXReader(false);
reader.setIncludeInternalDTDDeclarations(false);
reader.setIncludeExternalDTDDeclarations(false);

Document document = reader.read(new StringReader(registryXML));
Element rootElement = document.getRootElement();
List els = rootElement.selectNodes("MartURLLocation");

String martName = baseUrl.equals("http://www.ensembl.org") ? "ENSEMBL_MART_ENSEMBL" : "ensembl";

String schemaOut = "";
for (int i = 0; i &lt; els.size(); i++) {
	Element el = (Element) els.get(i);
	String name = el.attributeValue("name");
	if (name.equals(martName)) {
		schemaOut = el.attributeValue("serverVirtualSchema");
		break;
	}
}</script>
  <dependencies />
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="registryXML" depth="0" /><port name="baseUrl" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>getRegistry</name><inputPorts><port><name>url</name><depth>0</depth></port><port><name>base</name><depth>0</depth></port></inputPorts><outputPorts><port><name>contents</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>localworker-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.localworker.LocalworkerActivity</class><inputMap><map from="base" to="base" /><map from="url" to="url" /></inputMap><outputMap><map from="contents" to="contents" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>url</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/x-taverna-web-url'</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>base</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/x-taverna-web-url'</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>contents</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/plain,text/html'</string>
      </mimeTypes>
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>URL inputURL = null;
if (base != void) {
  inputURL = new URL(new URL(base), url);
}
else {
  inputURL = new URL(url);
}
URLConnection con = inputURL.openConnection();
InputStream in = con.getInputStream();

InputStreamReader isr = new InputStreamReader(in);
Reader inReader = new BufferedReader(isr);

StringBuffer buf = new StringBuffer();
int ch;
while ((ch = inReader.read()) &gt; -1) {
  buf.append((char)ch);
}
inReader.close();
contents = buf.toString();


//String NEWLINE = System.getProperty("line.separator");
//
//URL inputURL = null;
//if (base != void) {
//	inputURL = new URL(new URL(base), url);
//} else {
//	inputURL = new URL(url);
//}
//StringBuffer result = new StringBuffer();
//BufferedReader reader = new BufferedReader(new InputStreamReader(inputURL.openStream()));
//String line = null;
//while ((line = reader.readLine()) != null) {
//	result.append(line);
//	result.append(NEWLINE);
//}
//
//contents = result.toString();
</script>
  <dependencies />
  <localworkerName>org.embl.ebi.escience.scuflworkers.java.WebPageFetcher</localworkerName>
</net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="url" depth="0" /><port name="base" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>getRegistryURL</name><inputPorts /><outputPorts><port><name>value</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>stringconstant-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.stringconstant.StringConstantActivity</class><inputMap /><outputMap><map from="value" to="value" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean xmlns="">
  <value>/biomart/martservice?type=registry</value>
</net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy /></iteration></iterationStrategyStack></processor><processor><name>getDatasets</name><inputPorts><port><name>url</name><depth>0</depth></port></inputPorts><outputPorts><port><name>contents</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>localworker-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.localworker.LocalworkerActivity</class><inputMap><map from="url" to="url" /></inputMap><outputMap><map from="contents" to="contents" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>url</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/x-taverna-web-url'</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>base</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/x-taverna-web-url'</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>contents</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/plain,text/html'</string>
      </mimeTypes>
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>URL inputURL = null;
if (base != void) {
  inputURL = new URL(new URL(base), url);
}
else {
  inputURL = new URL(url);
}
URLConnection con = inputURL.openConnection();
InputStream in = con.getInputStream();

InputStreamReader isr = new InputStreamReader(in);
Reader inReader = new BufferedReader(isr);

StringBuffer buf = new StringBuffer();
int ch;
while ((ch = inReader.read()) &gt; -1) {
  buf.append((char)ch);
}
inReader.close();
contents = buf.toString();


//String NEWLINE = System.getProperty("line.separator");
//
//URL inputURL = null;
//if (base != void) {
//	inputURL = new URL(new URL(base), url);
//} else {
//	inputURL = new URL(url);
//}
//StringBuffer result = new StringBuffer();
//BufferedReader reader = new BufferedReader(new InputStreamReader(inputURL.openStream()));
//String line = null;
//while ((line = reader.readLine()) != null) {
//	result.append(line);
//	result.append(NEWLINE);
//}
//
//contents = result.toString();
</script>
  <dependencies />
  <localworkerName>org.embl.ebi.escience.scuflworkers.java.WebPageFetcher</localworkerName>
</net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="url" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>getDataset</name><inputPorts><port><name>datasets</name><depth>0</depth></port></inputPorts><outputPorts><port><name>dataset</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="datasets" to="datasets" /></inputMap><outputMap><map from="dataset" to="dataset" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>datasets</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>dataset</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>String[] lines = datasets.split("[\\n\\r]+");
for (int i = 0; i &lt; lines.length; i++) {
	String line = lines[i];
	if (line == null || line.equals(" ")) {
		continue;
	}
	String[] datasetArray = lines[i].split("\\t");
	if (datasetArray[2].startsWith("Homo sapiens") &amp;&amp; datasetArray[3].equals("1")) {
		dataset = datasetArray[1];
		return;
	}
}</script>
  <dependencies />
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="datasets" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>finishDatasetUrl</name><inputPorts><port><name>baseUrl</name><depth>0</depth></port></inputPorts><outputPorts><port><name>url</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="baseUrl" to="baseUrl" /></inputMap><outputMap><map from="url" to="url" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>baseUrl</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>url</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>String martName = baseUrl.equals("http://www.ensembl.org") ? "ENSEMBL_MART_ENSEMBL" : "ensembl";

url = baseUrl + "/biomart/martservice?type=datasets&amp;mart=" + martName;</script>
  <dependencies />
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="baseUrl" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor></processors><conditions /><datalinks><datalink><sink type="processor"><processor>getEnsemblInfo</processor><port>registryXML</port></sink><source type="processor"><processor>getRegistry</processor><port>contents</port></source></datalink><datalink><sink type="processor"><processor>getEnsemblInfo</processor><port>baseUrl</port></sink><source type="dataflow"><port>baseUrl</port></source></datalink><datalink><sink type="processor"><processor>getRegistry</processor><port>url</port></sink><source type="processor"><processor>getRegistryURL</processor><port>value</port></source></datalink><datalink><sink type="processor"><processor>getRegistry</processor><port>base</port></sink><source type="dataflow"><port>baseUrl</port></source></datalink><datalink><sink type="processor"><processor>getDatasets</processor><port>url</port></sink><source type="processor"><processor>finishDatasetUrl</processor><port>url</port></source></datalink><datalink><sink type="processor"><processor>getDataset</processor><port>datasets</port></sink><source type="processor"><processor>getDatasets</processor><port>contents</port></source></datalink><datalink><sink type="processor"><processor>finishDatasetUrl</processor><port>baseUrl</port></sink><source type="dataflow"><port>baseUrl</port></source></datalink><datalink><sink type="dataflow"><port>dataset</port></sink><source type="processor"><processor>getDataset</processor><port>dataset</port></source></datalink><datalink><sink type="dataflow"><port>schema</port></sink><source type="processor"><processor>getEnsemblInfo</processor><port>schemaOut</port></source></datalink></datalinks><annotations><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>9e1f1b3f-b222-409e-9882-9a58c8d5ac02</identification>
      </annotationBean>
      <date>2011-10-07 12:24:20.977 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2></annotations></dataflow><dataflow id="ce8b5b59-bfd8-47c5-9653-42e60b7fe42d" role="nested"><name>Convert_UCSC_liftover_chain_file_to_XML</name><inputPorts><port><name>fromBuild</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>toBuild</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port></inputPorts><outputPorts><port><name>chainXML</name><annotations /></port></outputPorts><processors><processor><name>getChainUrls</name><inputPorts><port><name>urlTemplate</name><depth>0</depth></port><port><name>fromBuild</name><depth>0</depth></port><port><name>toBuild</name><depth>0</depth></port></inputPorts><outputPorts><port><name>chainUrls</name><depth>1</depth><granularDepth>1</granularDepth></port><port><name>chainConversions</name><depth>1</depth><granularDepth>1</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="fromBuild" to="fromBuild" /><map from="toBuild" to="toBuild" /><map from="urlTemplate" to="urlTemplate" /></inputMap><outputMap><map from="chainConversions" to="chainConversions" /><map from="chainUrls" to="chainUrls" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>urlTemplate</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>fromBuild</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>toBuild</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>chainUrls</name>
      <depth>1</depth>
      <mimeTypes />
      <granularDepth>1</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>chainConversions</name>
      <depth>1</depth>
      <mimeTypes />
      <granularDepth>1</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>String format(String template, String[] values) {
    for (int i = 0; i &lt; values.length; i++) {
        template = template.replaceFirst("%s", values[i]);
    }
    return template;
}

chainUrls = new ArrayList();
chainConversions = new ArrayList();

if (fromBuild.equals("") || toBuild.equals(""))
    return;

int f = Integer.parseInt(fromBuild.substring(2));
int t = Integer.parseInt(toBuild.substring(2));

if (f &gt; t &amp;&amp; (f - t &gt; 1)) {
    while (f &gt; t) {
        String [] values = {"hg" + f, "hg" + f, "Hg" + (f - 1)};
        String url = format(urlTemplate, values);
        chainUrls.add(url);
        chainConversions.add("hg" + f + "ToHg" + (f - 1));
        f--;
    }
} else {
    String toCap = "H" + toBuild.substring(1);
    String [] values = {fromBuild, fromBuild, toCap};
    String url = format(urlTemplate, values);
    chainUrls.add(url);
    chainConversions.add(fromBuild + "To" + toCap);
}</script>
  <dependencies />
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="urlTemplate" depth="0" /><port name="fromBuild" depth="0" /><port name="toBuild" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>urlTemplate</name><inputPorts /><outputPorts><port><name>value</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>stringconstant-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.stringconstant.StringConstantActivity</class><inputMap /><outputMap><map from="value" to="value" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean xmlns="">
  <value>http://hgdownload.cse.ucsc.edu/goldenPath/%s/liftOver/%sTo%s.over.chain.gz</value>
</net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy /></iteration></iterationStrategyStack></processor><processor><name>getChainXml</name><inputPorts><port><name>chainUrls</name><depth>1</depth></port><port><name>chainConversions</name><depth>1</depth></port><port><name>fromBuild</name><depth>0</depth></port><port><name>toBuild</name><depth>0</depth></port></inputPorts><outputPorts><port><name>chainXml</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="chainConversions" to="chainConversions" /><map from="fromBuild" to="fromBuild" /><map from="chainUrls" to="chainUrls" /><map from="toBuild" to="toBuild" /></inputMap><outputMap><map from="chainXml" to="chainXml" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>chainUrls</name>
      <depth>1</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>chainConversions</name>
      <depth>1</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>fromBuild</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>toBuild</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>chainXml</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.zip.GZIPInputStream;
import java.net.URL;
import org.dom4j.dom.DOMDocument;
import org.dom4j.Document;
import org.dom4j.Element;
import org.dom4j.Node;

BufferedReader getReader(String fileUrl) throws IOException {
    InputStreamReader reader;
    try {
        if (fileUrl.endsWith(".gz"))
            reader = new InputStreamReader(new GZIPInputStream(new FileInputStream(fileUrl)));
        else
            reader = new FileReader(fileUrl);
    } catch (FileNotFoundException e) {
        // try a real URL instead
        URL url = new URL(fileUrl);
        if (fileUrl.endsWith(".gz"))
            reader = new InputStreamReader(new GZIPInputStream(url.openStream()));
        else
            reader = new InputStreamReader(url.openStream());
    }
    return new BufferedReader(reader);
}

int binFromRange(int start, int end) {
    int [] binOffsetsExtended = {4096+512+64+8+1, 512+64+8+1, 64+8+1, 8+1, 1, 0};
    int [] binOffsets = {512+64+8+1, 64+8+1, 8+1, 1, 0};
    int _binFirstShift = 17;
    int _binNextShift = 3;

    int startBin = start;
    int endBin = end-1;
    startBin &gt;&gt;= _binFirstShift;
    endBin &gt;&gt;= _binFirstShift;
    for (int i = 0; i &lt; binOffsetsExtended.length; i++) {
        if (startBin == endBin)
            return binOffsetsExtended[i] + startBin;
        startBin &gt;&gt;= _binNextShift;
        endBin &gt;&gt;= _binNextShift;
    }
    return 0;
}

if (chainUrls.size() == 0) {
    chainXml = "";
    return;
}

Document chainDoc = new DOMDocument();
// Add root element.
Element rootElement = chainDoc.addElement("LiftOverMaps")
        .addAttribute("from", fromBuild)
        .addAttribute("to", toBuild);

for (int i = 0; i &lt; chainUrls.size(); i++) {
    String chainUrl = (String) chainUrls.get(i);

    BufferedReader br = getReader(chainUrl);

    Element lomapEl = rootElement.addElement("LiftOverMap")
            .addAttribute("filename", chainUrl)
            .addAttribute("conversion", (String) chainConversions.get(i));

    Node currentChromosome = null;
    String error = null;
    String line;
    while ((line = br.readLine()) != null) {
        if (line.startsWith("#"))
            continue;

        // Split line at whitespace.
        String [] lineArray = line.split("\\s+");
        if  (line.equals("")) {
            continue;
        } else if (lineArray.length &lt; 12) {
            error = "Expecting at least 12 line elements";
            break;
        } else if (lineArray.length &gt;= 12) {
            if (! lineArray[0].equals("chain"))
                error = "Expecting 'chain' line";
            int maxPos = Integer.parseInt(lineArray[3]);
            int binCount = binFromRange(maxPos - 1, maxPos) + 1;
            // Get chromosome Node or create new one.
            if (currentChromosome == null || ! currentChromosome.valueOf("@chromosome").equals(lineArray[2])) {
                // Either need to get a different chromosome node or no chromosome node stored.
                currentChromosome = lomapEl.selectSingleNode("Chromosome[@chromosome='" + lineArray[2] + "']");
                if (currentChromosome == null) {
                    currentChromosome = lomapEl.addElement("Chromosome")
                            .addAttribute("chromosome", lineArray[2])
                            .addAttribute("bin_count", "" + binCount)
                            .addAttribute("min_pos", "0")
                            .addAttribute("max_pos", lineArray[3]);
                }
            }

            // Get bin or make new bin and add chain.
            int start = Integer.parseInt(lineArray[5]);
            int end   = Integer.parseInt(lineArray[6]);
            int bin = binFromRange(start, end);
            Node binNode = currentChromosome.selectSingleNode("Bin[@id=" + bin + "]");
            if (binNode == null)
                binNode = ((Element) currentChromosome).addElement("Bin")
                        .addAttribute("id", "" + bin);
            // Check positions.
            if (Integer.parseInt(lineArray[10]) &gt;= Integer.parseInt(lineArray[11]) ||
                    Integer.parseInt(lineArray[5]) &gt;= Integer.parseInt(lineArray[6])) {
                error = "End before start";
                break;
            }
            if (Integer.parseInt(lineArray[10]) &lt; 0 || Integer.parseInt(lineArray[5]) &lt;0) {
                error = "Start before zero";
                break;
            }
            if (Integer.parseInt(lineArray[11]) &gt; Integer.parseInt(lineArray[8]) ||
                    Integer.parseInt(lineArray[6]) &gt; Integer.parseInt(lineArray[3])) {
                error = "Past end of sequence";
                break;
            }
            // Add chain.
            Node currentChain = ((Element) binNode).addElement("Chain")
                    .addAttribute("score", lineArray[1])
                    .addAttribute("tName", lineArray[2])
                    .addAttribute("tSize", lineArray[3])
                    .addAttribute("tStrand", lineArray[4])
                    .addAttribute("tStart", lineArray[5])
                    .addAttribute("tEnd", lineArray[6])
                    .addAttribute("qName", lineArray[7])
                    .addAttribute("qSize", lineArray[8])
                    .addAttribute("qStrand", lineArray[9])
                    .addAttribute("qStart", lineArray[10])
                    .addAttribute("qEnd", lineArray[11])
                    .addAttribute("id", lineArray[12]);

            // Read Blocks.
            int q = Integer.parseInt(currentChain.valueOf("@qStart"));
            int t = Integer.parseInt(currentChain.valueOf("@tStart"));
            String subLine;
            while ((subLine = br.readLine()) != null) {
                // Split subLine at whitespace.
                String [] subLineArray = subLine.split("\\s+");
                // Add new ChainBlock.
                Element chainBlock = ((Element) currentChain).addElement("ChainBlock")
                        .addAttribute("qStart", "" + q)
                        .addAttribute("tStart", "" + t);
                int size = Integer.parseInt(subLineArray[0]);
                q += size;
                t += size;
                chainBlock.addAttribute("qEnd", "" + q);
                chainBlock.addAttribute("tEnd", "" + t);
                if (subLineArray.length == 1)
                    break;
                else if (subLineArray.length &lt; 3) {
                    error = "Expecting 1 or 3 words";
                    break;
                }
                t += Integer.parseInt(subLineArray[1]);
                q += Integer.parseInt(subLineArray[2]);
            }
            if (error != null)
                break;

            if (q != Integer.parseInt(currentChain.valueOf("@qEnd"))) {
                error = "q end mismatch " + q + " vs " + currentChain.valueOf("qEnd");
            }
            if (t != Integer.parseInt(currentChain.valueOf("@tEnd"))) {
                error = "t end mismatch " + t + " vs " + currentChain.valueOf("tEnd");
            }
        }
    }

    br.close();

    if (error != null) {
        chainXml = null;
        break;
    }
}

chainXml = chainDoc.asXML();</script>
  <dependencies />
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="chainUrls" depth="1" /><port name="chainConversions" depth="1" /><port name="fromBuild" depth="0" /><port name="toBuild" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor></processors><conditions /><datalinks><datalink><sink type="processor"><processor>getChainUrls</processor><port>urlTemplate</port></sink><source type="processor"><processor>urlTemplate</processor><port>value</port></source></datalink><datalink><sink type="processor"><processor>getChainUrls</processor><port>fromBuild</port></sink><source type="dataflow"><port>fromBuild</port></source></datalink><datalink><sink type="processor"><processor>getChainUrls</processor><port>toBuild</port></sink><source type="dataflow"><port>toBuild</port></source></datalink><datalink><sink type="processor"><processor>getChainXml</processor><port>chainUrls</port></sink><source type="processor"><processor>getChainUrls</processor><port>chainUrls</port></source></datalink><datalink><sink type="processor"><processor>getChainXml</processor><port>chainConversions</port></sink><source type="processor"><processor>getChainUrls</processor><port>chainConversions</port></source></datalink><datalink><sink type="processor"><processor>getChainXml</processor><port>fromBuild</port></sink><source type="dataflow"><port>fromBuild</port></source></datalink><datalink><sink type="processor"><processor>getChainXml</processor><port>toBuild</port></sink><source type="dataflow"><port>toBuild</port></source></datalink><datalink><sink type="dataflow"><port>chainXML</port></sink><source type="processor"><processor>getChainXml</processor><port>chainXml</port></source></datalink></datalinks><annotations><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.FreeTextDescription">
        <text>Given a conversion type (e.g. hg19 to hg18), downloads the relevant chain file(s) from UCSC and processes to XML.</text>
      </annotationBean>
      <date>2010-04-08 12:46:00.748 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.Author">
        <text>Paul Martin</text>
      </annotationBean>
      <date>2010-04-08 12:43:52.528 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>ce8b5b59-bfd8-47c5-9653-42e60b7fe42d</identification>
      </annotationBean>
      <date>2011-10-07 12:24:20.756 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.DescriptiveTitle">
        <text>Convert UCSC liftover chain file to XML</text>
      </annotationBean>
      <date>2010-04-08 12:44:39.294 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain></annotations></dataflow><dataflow id="85e82a59-ba77-4af6-bb08-f70f37a00415" role="nested"><name>Workflow60</name><inputPorts /><outputPorts><port><name>ucscBuild</name><annotations /></port></outputPorts><processors><processor><name>getEnsemblBiomartDatasets</name><inputPorts><port><name>url</name><depth>0</depth></port></inputPorts><outputPorts><port><name>contents</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>localworker-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.localworker.LocalworkerActivity</class><inputMap><map from="url" to="url" /></inputMap><outputMap><map from="contents" to="contents" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>url</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/x-taverna-web-url'</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>base</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/x-taverna-web-url'</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>contents</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/plain,text/html'</string>
      </mimeTypes>
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>URL inputURL = null;
if (base != void) {
  inputURL = new URL(new URL(base), url);
}
else {
  inputURL = new URL(url);
}
URLConnection con = inputURL.openConnection();
InputStream in = con.getInputStream();

InputStreamReader isr = new InputStreamReader(in);
Reader inReader = new BufferedReader(isr);

StringBuffer buf = new StringBuffer();
int ch;
while ((ch = inReader.read()) &gt; -1) {
  buf.append((char)ch);
}
inReader.close();
contents = buf.toString();


//String NEWLINE = System.getProperty("line.separator");
//
//URL inputURL = null;
//if (base != void) {
//	inputURL = new URL(new URL(base), url);
//} else {
//	inputURL = new URL(url);
//}
//StringBuffer result = new StringBuffer();
//BufferedReader reader = new BufferedReader(new InputStreamReader(inputURL.openStream()));
//String line = null;
//while ((line = reader.readLine()) != null) {
//	result.append(line);
//	result.append(NEWLINE);
//}
//
//contents = result.toString();
</script>
  <dependencies />
  <localworkerName>org.embl.ebi.escience.scuflworkers.java.WebPageFetcher</localworkerName>
</net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="url" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>ensemblBiomartQueryURL</name><inputPorts /><outputPorts><port><name>value</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>stringconstant-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.stringconstant.StringConstantActivity</class><inputMap /><outputMap><map from="value" to="value" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean xmlns="">
  <value>http://www.ensembl.org/biomart/martservice?type=datasets&amp;mart=ENSEMBL_MART_ENSEMBL</value>
</net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy /></iteration></iterationStrategyStack></processor><processor><name>getHumanBuildFromDatasets</name><inputPorts><port><name>biomartResponse</name><depth>0</depth></port></inputPorts><outputPorts><port><name>ncbiBuild</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="biomartResponse" to="biomartResponse" /></inputMap><outputMap><map from="ncbiBuild" to="ncbiBuild" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>biomartResponse</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>ncbiBuild</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>String [] lines = biomartResponse.split("\\n");

for (int i = 0; i &lt; lines.length; i++) {
	String line = lines[i];
	// Skip blank lines.
	if (line.length() &lt; 2)
	continue;
	String [] lineArray = line.split("\\t");
	if (lineArray.length != 9)
		continue;
	if (! lineArray[2].startsWith("Homo sapiens"))
		continue;
	ncbiBuild = lineArray[4];
}

ncbiBuild = "GRCh37";</script>
  <dependencies />
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="biomartResponse" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>ncbiBuildToUcsc</name><inputPorts><port><name>buildIn</name><depth>0</depth></port></inputPorts><outputPorts><port><name>ucscBuildOut</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>dataflow-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.dataflow.DataflowActivity</class><inputMap><map from="buildIn" to="buildIn" /></inputMap><outputMap><map from="ucscBuildOut" to="ucscBuildOut" /></outputMap><configBean encoding="dataflow"><dataflow ref="b38d97b8-95ba-4edf-bde9-40ac98f699e4" /></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="buildIn" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor></processors><conditions /><datalinks><datalink><sink type="processor"><processor>getEnsemblBiomartDatasets</processor><port>url</port></sink><source type="processor"><processor>ensemblBiomartQueryURL</processor><port>value</port></source></datalink><datalink><sink type="processor"><processor>getHumanBuildFromDatasets</processor><port>biomartResponse</port></sink><source type="processor"><processor>getEnsemblBiomartDatasets</processor><port>contents</port></source></datalink><datalink><sink type="processor"><processor>ncbiBuildToUcsc</processor><port>buildIn</port></sink><source type="processor"><processor>getHumanBuildFromDatasets</processor><port>ncbiBuild</port></source></datalink><datalink><sink type="dataflow"><port>ucscBuild</port></sink><source type="processor"><processor>ncbiBuildToUcsc</processor><port>ucscBuildOut</port></source></datalink></datalinks><annotations><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>85e82a59-ba77-4af6-bb08-f70f37a00415</identification>
      </annotationBean>
      <date>2011-10-07 12:24:20.520 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2></annotations></dataflow><dataflow id="bbc18262-5e1e-45b4-b94e-bfdd572fbd88" role="nested"><name>Convert_Genomic_Co_ordinates</name><inputPorts><port><name>parameters</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>chainXML</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port></inputPorts><outputPorts><port><name>xmlOut</name><annotations /></port></outputPorts><processors><processor><name>liftOver</name><inputPorts><port><name>contiguous</name><depth>0</depth></port><port><name>minMatch</name><depth>0</depth></port><port><name>xmlIn</name><depth>0</depth></port><port><name>nodesToConvert</name><depth>0</depth></port><port><name>chainXmlString</name><depth>0</depth></port></inputPorts><outputPorts><port><name>xmlOut</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="nodesToConvert" to="nodesToConvert" /><map from="xmlIn" to="xmlIn" /><map from="contiguous" to="contiguous" /><map from="chainXmlString" to="chainXmlString" /><map from="minMatch" to="minMatch" /></inputMap><outputMap><map from="xmlOut" to="xmlOut" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>xmlIn</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>contiguous</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>minMatch</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>chainXmlString</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>nodesToConvert</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>xmlOut</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>import org.dom4j.Document;
import org.dom4j.Element;
import org.dom4j.Node;
import org.dom4j.io.SAXReader;

String mapRegion(String position, Node chain, Double minMatch) throws Exception {
    int [] binOffsetsExtended = {4096+512+64+8+1, 512+64+8+1, 64+8+1, 8+1, 1, 0};
    int [] binOffsets = {512+64+8+1, 64+8+1, 8+1, 1, 0};
    int _binFirstShift = 17;
    int _binNextShift = 3;

    // Split position into component parts.
    int i1 = position.indexOf(':');
    int i2 = position.indexOf('-');
    String chr = position.substring(0, i1);
    int start = Integer.parseInt(position.substring(i1 + 1, i2));
    int end = Integer.parseInt(position.substring(i2 + 1));

    if (start &gt; end)
        throw new Exception("start coordinate is after end coordinate (chromStart &gt; chromEnd)");

    // Get chromosome Node.
    Node chromNode = chain.selectSingleNode("Chromosome[@chromosome='" + chr + "']");
    if (chromNode == null)
        throw new Exception("No mapping information for chromosome " + chr);

    if (minMatch == null || minMatch &lt;= 0)
        minMatch = 0.95;
    else if (minMatch &gt; 1)
        minMatch = 1.0;

    start--;

    int startTmp = start;
    int endTmp   = end;
    if (start &lt; Integer.parseInt(chromNode.valueOf("@min_pos")))
        startTmp = Integer.parseInt(chromNode.valueOf("@min_pos"));
    if (end &gt; Integer.parseInt(chromNode.valueOf("@max_pos")))
        endTmp = Integer.parseInt(chromNode.valueOf("@max_pos"));
     // Find bin for position.
    int startBin = startTmp &gt;&gt; _binFirstShift;
    int endBin = (endTmp-1) &gt;&gt; _binFirstShift;
    ArrayList matchingChains = new ArrayList();
    for (int i = 0; i &lt; binOffsetsExtended.length; i++) {
        int offset = binOffsetsExtended[i];
        for (int j = startBin + offset; j &lt;= endBin + offset; j++) {
            Node binNode = chromNode.selectSingleNode("Bin[@id=" + j +"]");
            if (binNode == null)
                continue;
            List chains = binNode.selectNodes("Chain");
            for (Iterator iter = chains.listIterator(); iter.hasNext(); ) {
                Node chainNode = (Node) iter.next();
                int s = Math.max(Integer.parseInt(chainNode.valueOf("@tStart")), start);
                int e = Math.min(Integer.parseInt(chainNode.valueOf("@tEnd")), end);
                int rangeIntersection = e-s;
                if (rangeIntersection &gt; 0)
                    matchingChains.add(chainNode);
            }
        }
        startBin &gt;&gt;= _binNextShift;
        endBin &gt;&gt;= _binNextShift;
    }
    double minMatchSize = minMatch * (end - start);

    ArrayList hits = new ArrayList();
    ArrayList partial = new ArrayList();
    ArrayList missed = new ArrayList();
    for (int i = 0; i &lt; matchingChains.size(); i++) {
        Node chainNode = (Node) matchingChains.get(i);
        int total = 0, one;
        // Parse ChainBlocks
        List chainBlockNodes = chainNode.selectNodes("ChainBlock");
        for (int j = 0; j &lt; chainBlockNodes.size(); j++) {
            Node chainBlockNode = (Node) chainBlockNodes.get(j);
            int s = Math.max(Integer.parseInt(chainBlockNode.valueOf("@tStart")), start);
            int e = Math.min(Integer.parseInt(chainBlockNode.valueOf("@tEnd")), end);
            one = e-s;
            if (one &gt; 0)
                total += one;
        }
        if (total &gt;= minMatchSize)
            hits.add(chainNode);
        else if (total &gt; 0)
            partial.add(chainNode);
        else
            missed.add(chainNode);
    }

    // Check if hits or partial.
    if (hits.size() == 0)
        if (partial.size() == 0)
            return "Error: Deleted in new";
        else if (partial.size() == 1)
            return "Error: Partially deleted in new";
        else
            return "Error: Split in new";
    else if (hits.size() &gt; 1)
        return "Error: Duplicated in new";
    // Found ok hit.
    Node hit = (Node) hits.get(0);
    int oldSize = end - start;
    // Get subchain by start end.
    List chainBlockNodes = hit.selectNodes("ChainBlock");
    Node firstBlock;
    ArrayList blocks = new ArrayList();
    int tStart = Integer.MAX_VALUE, tEnd = Integer.MIN_VALUE, qStart = Integer.MAX_VALUE, qEnd = Integer.MIN_VALUE;

    int j;
    for (j = 0; j &lt; chainBlockNodes.size(); j++) {
        firstBlock = (Node) chainBlockNodes.get(j);
        if (Integer.parseInt(firstBlock.valueOf("@tEnd")) &gt; start)
            break;
    }
    if (start &lt;= Integer.parseInt(hit.valueOf("@tStart")) &amp;&amp;
            end &gt;= Integer.parseInt(hit.valueOf("@tEnd"))) {
        qStart = Integer.parseInt(hit.valueOf("@qStart"));
        qEnd = Integer.parseInt(hit.valueOf("@qEnd"));
        // Parse blocks to get new position.
        int newSize = 0;
        for (int k = 0; k &lt; chainBlockNodes.size(); k++) {
            Node block = (Node) chainBlockNodes.get(k);
            newSize += Integer.parseInt(block.valueOf("@qEnd")) - Integer.parseInt(block.valueOf("@qStart"));
        }

        qStart++; // Fix qStart to be 1-indexed.
        if (newSize &lt; oldSize * minMatch)
            return "Error: Insufficient coverage";
        if (hit.valueOf("@qStrand").equals("+"))
            return hit.valueOf("@qName") + ":" + qStart +"-" + qEnd;
    } else {
        int newSize = 0;
        for (int k = j; k &lt; chainBlockNodes.size(); k++) {
            Node oldBlock = (Node) chainBlockNodes.get(k);
            if (Integer.parseInt(oldBlock.valueOf("@tStart")) &gt;= end)
                break;
            // blockPos = {qStart, qEnd, tStart, tEnd}
            int [] blockPos = {Integer.parseInt(oldBlock.valueOf("@qStart")),
                               Integer.parseInt(oldBlock.valueOf("@qEnd")),
                               Integer.parseInt(oldBlock.valueOf("@tStart")),
                               Integer.parseInt(oldBlock.valueOf("@tEnd"))};
            if (Integer.parseInt(oldBlock.valueOf("@tStart")) &lt; start) {
                blockPos[0] += start - Integer.parseInt(oldBlock.valueOf("@tStart"));
                blockPos[2] = tStart;
            }
            if (Integer.parseInt(oldBlock.valueOf("@tEnd")) &gt; end) {
                blockPos[1] -= Integer.parseInt(oldBlock.valueOf("@tEnd")) - end;
                blockPos[3] = end;
            }
            newSize += blockPos[1] - blockPos[0];
            if (qStart &gt; blockPos[0])
                qStart = blockPos[0];
            if (qEnd &lt; blockPos[1])
                qEnd = blockPos[1];
        }
        if (newSize &lt; oldSize * minMatch)
            return "Error: Insufficient coverage";
        else if (hit.valueOf("@qStrand").equals("+")) {
            qStart++; // Fix qStart to be 1-indexed.
            return hit.valueOf("@qName") + ":" + qStart + "-" + qEnd;
        } else {
            int qSize = Integer.parseInt(hit.valueOf("@qSize"));
            return hit.valueOf("@qName") + ":" + (qSize - qEnd + 1) + "-" + (qSize - qStart);
        }
    }

    return null;
}

// Fix minMatch
double minMatchDbl = 0.95;
if (minMatch != void)
    minMatchDbl = Double.parseDouble(minMatch);

// Initialise Reader.
SAXReader reader = new SAXReader(false);
reader.setIncludeInternalDTDDeclarations(false);
reader.setIncludeExternalDTDDeclarations(false);

// Read chainXML.
Document chainXml = reader.read(new StringReader(chainXmlString));
Node docRoot = chainXml.getRootElement();

String fromBuild = docRoot.attributeValue("from");
String toBuild   = docRoot.attributeValue("to");

int f = Integer.parseInt(fromBuild.substring(2));
int t = Integer.parseInt(toBuild.substring(2));

// Read XMLInput.
Document doc = reader.read(new StringReader(xmlIn));

boolean contig = true;
if (contiguous != void)
    contig = Boolean.parseBoolean(contiguous);

// Select all Location Node regardless of document structure.
String xPath = "//" + nodesToConvert;
List nodeList = doc.selectNodes(xPath);
for (int i = 0; i &lt; nodeList.size(); i++) {
    Node parentNode = (Node) nodeList.get(i);

    List locationNodes = parentNode.selectNodes("Location[@ucscBuild='" + fromBuild + "']");
    for (int j = 0; j &lt; locationNodes.size(); j++) {
        Element locationNode = (Element) locationNodes.get(j);

        String chr = locationNode.valueOf("@chromosome");
        if (! chr.startsWith("chr"))
            chr = "chr" + chr;
        String start = locationNode.attributeValue("start");
        String end   = locationNode.attributeValue("end");
	int startPos = Integer.parseInt(start);
        int endPos   = Integer.parseInt(end);

        String error = null;
        ArrayList positions = new ArrayList();
        if (contig || (endPos - startPos &lt; 2)) {
            positions.add(chr + ":" + start + "-" + end);
        } else {
            positions.add(chr + ":" + start + "-" + (startPos + 1));
            positions.add(chr + ":" + (endPos - 1) + "-" + end);
        }

        ArrayList newPositions = new ArrayList();
        for (int k = 0; k &lt; positions.size(); k++) {
            String newPos = (String) positions.get(k);
            if (f &gt; t &amp;&amp; (f - t &gt; 1)) {
                while (f &gt; t) {
                    Node chainNode = docRoot.selectSingleNode("LiftOverMap[@conversion='hg" + f + "ToHg" + (f - 1) + "']");
                    newPos = mapRegion(newPos, chainNode, minMatchDbl);
                    if (newPos == null || newPos.startsWith("Error"))
                        break;
                    f--;
                }
            } else {
                String toCap = "H" + toBuild.substring(1);
                Node chainNode = docRoot.selectSingleNode("LiftOverMap[@conversion='" + fromBuild + "To" + toCap + "']");
                newPos = mapRegion(newPos, chainNode, minMatchDbl);
            }
            newPositions.add(newPos);
        }

        // Check for errors and combine if neccessary.
        String mappedPos;
        boolean contig = Boolean.parseBoolean(contiguous);
        if (contig) {
            mappedPos = (String) newPositions.get(0);
        } else if (newPositions.size() == 2) {
            String startPosition = (String) newPositions.get(0);
            String endPosition   = (String) newPositions.get(1);

            if (startPosition.startsWith("Error")) {
                mappedPos = startPosition;
            } else if (endPosition.startsWith("Error")) {
                mappedPos = endPosition;
            } else {
                int i1a = startPosition.indexOf(':');
                int i1b = startPosition.indexOf('-');
                int i2a = endPosition.indexOf(':');
                int i2b = endPosition.indexOf('-');

                int startA = Integer.parseInt(startPosition.substring(i1a + 1, i1b));
                int startB = Integer.parseInt(endPosition.substring(i2a + 1, i2b));
                int endA   = Integer.parseInt(startPosition.substring(i1b + 1));
                int endB   = Integer.parseInt(endPosition.substring(i2b + 1));

                if (startA &lt; startB)
                    mappedPos = startPosition.substring(0, i1a) + ':' + startA + '-' + endB;
                else
                    mappedPos = startPosition.substring(0, i1a) + ':' + startB + '-' + endA;
            }
        } else {
            mappedPos = "Error: Incorrect input!";
        }

        // Add new MapLoc.
        if (mappedPos.startsWith("Error") ) {
            parentNode.addElement("Location")
                      .addAttribute("error", mappedPos)
                      .addAttribute("ucscBuild", toBuild);
        } else {
            int i1 = mappedPos.indexOf(':');
            int i2 = mappedPos.indexOf('-');
            parentNode.addElement("Location")
                      .addAttribute("chromosome", mappedPos.substring(0, i1))
                      .addAttribute("start",      mappedPos.substring(i1 + 1, i2))
                      .addAttribute("end",        mappedPos.substring(i2 + 1))
                      .addAttribute("ucscBuild",      toBuild);
        }
    }
}

xmlOut = doc.asXML();</script>
  <dependencies />
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="contiguous" depth="0" /><port name="minMatch" depth="0" /><port name="xmlIn" depth="0" /><port name="nodesToConvert" depth="0" /><port name="chainXmlString" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>parseParameters</name><inputPorts><port><name>paramXML</name><depth>0</depth></port></inputPorts><outputPorts><port><name>contiguous</name><depth>0</depth><granularDepth>0</granularDepth></port><port><name>minMatch</name><depth>0</depth><granularDepth>0</granularDepth></port><port><name>xmlIn</name><depth>0</depth><granularDepth>0</granularDepth></port><port><name>rootNode</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>localworker-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.localworker.LocalworkerActivity</class><inputMap><map from="paramXML" to="paramXML" /></inputMap><outputMap><map from="rootNode" to="rootNode" /><map from="xmlIn" to="xmlIn" /><map from="contiguous" to="contiguous" /><map from="minMatch" to="minMatch" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>paramXML</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/xml'</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>toBuild</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>fromBuild</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>xmlIn</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>contiguous</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>minMatch</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>rootNode</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>import org.dom4j.Document;
import org.dom4j.Node;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;

String getParameter(Element root, String parameterName) {
    List nodeList = root.selectNodes("Parameter[@name='" + parameterName + "']");
    if (nodeList.size() == 1) {
        Element parameterNode = (Element) nodeList.get(0);
        String parameter = "";
        if (parameterNode.isTextOnly())
            parameter = parameterNode.getText();
        else {
            List paramElements = parameterNode.elements();
            for (int i = 0; i &lt; paramElements.size(); i++) {
                parameter += ((Element) paramElements.get(i)).asXML();
            }
        }
        if (parameter == null || parameter.equals(""))
            return null;
        else
            return parameter;
    } else if (nodeList.size() &gt; 1) {
        throw new Exception("Multiple parameters matching " + parameterName + "!");
    }
    return null;
}

SAXReader reader = new SAXReader(false);
reader.setIncludeInternalDTDDeclarations(false);
reader.setIncludeExternalDTDDeclarations(false);

Document document = reader.read(new StringReader(paramXML));
Element root = document.getRootElement();

// Set parameter defaults.
toBuild    = "hg19";
fromBuild  = "hg18";
contiguous = "true";
minMatch   = "0.95";
xmlIn      = "";
chainXML   = "";
rootNode   = "";

// Get parameters from XML.
String paramTmp;
// toBuild.
if ((paramTmp = getParameter(root, "toBuild")) != null)
    toBuild = paramTmp;
// fromBuild.
if ((paramTmp = getParameter(root, "fromBuild")) != null)
    fromBuild = paramTmp;
// contiguous.
if ((paramTmp = getParameter(root, "contiguous")) != null)
    contiguous = paramTmp;
// minMatch.
if ((paramTmp = getParameter(root, "minMatch")) != null)
    minMatch = paramTmp;
// xmlIn.
if ((paramTmp = getParameter(root, "xmlIn")) != null)
    xmlIn = paramTmp;
// rootNode.
if ((paramTmp = getParameter(root, "rootNode")) != null)
    rootNode = paramTmp;</script>
  <dependencies>
    <string>dom4j:dom4j:1.6</string>
  </dependencies>
  <localworkerName>net.sourceforge.taverna.scuflworkers.xml.XPathTextWorker</localworkerName>
</net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean></configBean><annotations><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.HostInstitution">
        <text>UserNameHere</text>
      </annotationBean>
      <date>2010-05-05 16:53:22.183 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain></annotations></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="paramXML" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor></processors><conditions /><datalinks><datalink><sink type="processor"><processor>liftOver</processor><port>contiguous</port></sink><source type="processor"><processor>parseParameters</processor><port>contiguous</port></source></datalink><datalink><sink type="processor"><processor>liftOver</processor><port>minMatch</port></sink><source type="processor"><processor>parseParameters</processor><port>minMatch</port></source></datalink><datalink><sink type="processor"><processor>liftOver</processor><port>xmlIn</port></sink><source type="processor"><processor>parseParameters</processor><port>xmlIn</port></source></datalink><datalink><sink type="processor"><processor>liftOver</processor><port>nodesToConvert</port></sink><source type="processor"><processor>parseParameters</processor><port>rootNode</port></source></datalink><datalink><sink type="processor"><processor>liftOver</processor><port>chainXmlString</port></sink><source type="dataflow"><port>chainXML</port></source></datalink><datalink><sink type="processor"><processor>parseParameters</processor><port>paramXML</port></sink><source type="dataflow"><port>parameters</port></source></datalink><datalink><sink type="dataflow"><port>xmlOut</port></sink><source type="processor"><processor>liftOver</processor><port>xmlOut</port></source></datalink></datalinks><annotations><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>bbc18262-5e1e-45b4-b94e-bfdd572fbd88</identification>
      </annotationBean>
      <date>2011-10-07 13:21:52.924 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.DescriptiveTitle">
        <text>Convert Genomic Co-ordinates</text>
      </annotationBean>
      <date>2010-04-26 16:01:35.910 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.Author">
        <text>Paul Martin</text>
      </annotationBean>
      <date>2010-04-26 16:00:57.252 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.FreeTextDescription">
        <text>Converts genomic co-ordinates between builds for the same species. Requires XML Locations as input.</text>
      </annotationBean>
      <date>2010-04-26 16:02:30.153 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>8cf4b155-da34-4076-967e-ecf59b5aca2a</identification>
      </annotationBean>
      <date>2011-10-07 12:24:21.52 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2></annotations></dataflow><dataflow id="3ce3fd14-5b92-4fe6-8198-bba08b46242d" role="nested"><name>Convert_Genomic_Co_ordinates</name><inputPorts><port><name>parameters</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>chainXML</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port></inputPorts><outputPorts><port><name>xmlOut</name><annotations /></port></outputPorts><processors><processor><name>liftOver</name><inputPorts><port><name>contiguous</name><depth>0</depth></port><port><name>minMatch</name><depth>0</depth></port><port><name>xmlIn</name><depth>0</depth></port><port><name>nodesToConvert</name><depth>0</depth></port><port><name>chainXmlString</name><depth>0</depth></port></inputPorts><outputPorts><port><name>xmlOut</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="nodesToConvert" to="nodesToConvert" /><map from="xmlIn" to="xmlIn" /><map from="contiguous" to="contiguous" /><map from="chainXmlString" to="chainXmlString" /><map from="minMatch" to="minMatch" /></inputMap><outputMap><map from="xmlOut" to="xmlOut" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>xmlIn</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>contiguous</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>minMatch</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>chainXmlString</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>nodesToConvert</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>xmlOut</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>import org.dom4j.Document;
import org.dom4j.Element;
import org.dom4j.Node;
import org.dom4j.io.SAXReader;

String mapRegion(String position, Node chain, Double minMatch) throws Exception {
    int [] binOffsetsExtended = {4096+512+64+8+1, 512+64+8+1, 64+8+1, 8+1, 1, 0};
    int [] binOffsets = {512+64+8+1, 64+8+1, 8+1, 1, 0};
    int _binFirstShift = 17;
    int _binNextShift = 3;

    // Split position into component parts.
    int i1 = position.indexOf(':');
    int i2 = position.indexOf('-');
    String chr = position.substring(0, i1);
    int start = Integer.parseInt(position.substring(i1 + 1, i2));
    int end = Integer.parseInt(position.substring(i2 + 1));

    if (start &gt; end)
        throw new Exception("start coordinate is after end coordinate (chromStart &gt; chromEnd)");

    // Get chromosome Node.
    Node chromNode = chain.selectSingleNode("Chromosome[@chromosome='" + chr + "']");
    if (chromNode == null)
        throw new Exception("No mapping information for chromosome " + chr);

    if (minMatch == null || minMatch &lt;= 0)
        minMatch = 0.95;
    else if (minMatch &gt; 1)
        minMatch = 1.0;

    start--;

    int startTmp = start;
    int endTmp   = end;
    if (start &lt; Integer.parseInt(chromNode.valueOf("@min_pos")))
        startTmp = Integer.parseInt(chromNode.valueOf("@min_pos"));
    if (end &gt; Integer.parseInt(chromNode.valueOf("@max_pos")))
        endTmp = Integer.parseInt(chromNode.valueOf("@max_pos"));
     // Find bin for position.
    int startBin = startTmp &gt;&gt; _binFirstShift;
    int endBin = (endTmp-1) &gt;&gt; _binFirstShift;
    ArrayList matchingChains = new ArrayList();
    for (int i = 0; i &lt; binOffsetsExtended.length; i++) {
        int offset = binOffsetsExtended[i];
        for (int j = startBin + offset; j &lt;= endBin + offset; j++) {
            Node binNode = chromNode.selectSingleNode("Bin[@id=" + j +"]");
            if (binNode == null)
                continue;
            List chains = binNode.selectNodes("Chain");
            for (Iterator iter = chains.listIterator(); iter.hasNext(); ) {
                Node chainNode = (Node) iter.next();
                int s = Math.max(Integer.parseInt(chainNode.valueOf("@tStart")), start);
                int e = Math.min(Integer.parseInt(chainNode.valueOf("@tEnd")), end);
                int rangeIntersection = e-s;
                if (rangeIntersection &gt; 0)
                    matchingChains.add(chainNode);
            }
        }
        startBin &gt;&gt;= _binNextShift;
        endBin &gt;&gt;= _binNextShift;
    }
    double minMatchSize = minMatch * (end - start);

    ArrayList hits = new ArrayList();
    ArrayList partial = new ArrayList();
    ArrayList missed = new ArrayList();
    for (int i = 0; i &lt; matchingChains.size(); i++) {
        Node chainNode = (Node) matchingChains.get(i);
        int total = 0, one;
        // Parse ChainBlocks
        List chainBlockNodes = chainNode.selectNodes("ChainBlock");
        for (int j = 0; j &lt; chainBlockNodes.size(); j++) {
            Node chainBlockNode = (Node) chainBlockNodes.get(j);
            int s = Math.max(Integer.parseInt(chainBlockNode.valueOf("@tStart")), start);
            int e = Math.min(Integer.parseInt(chainBlockNode.valueOf("@tEnd")), end);
            one = e-s;
            if (one &gt; 0)
                total += one;
        }
        if (total &gt;= minMatchSize)
            hits.add(chainNode);
        else if (total &gt; 0)
            partial.add(chainNode);
        else
            missed.add(chainNode);
    }

    // Check if hits or partial.
    if (hits.size() == 0)
        if (partial.size() == 0)
            return "Error: Deleted in new";
        else if (partial.size() == 1)
            return "Error: Partially deleted in new";
        else
            return "Error: Split in new";
    else if (hits.size() &gt; 1)
        return "Error: Duplicated in new";
    // Found ok hit.
    Node hit = (Node) hits.get(0);
    int oldSize = end - start;
    // Get subchain by start end.
    List chainBlockNodes = hit.selectNodes("ChainBlock");
    Node firstBlock;
    ArrayList blocks = new ArrayList();
    int tStart = Integer.MAX_VALUE, tEnd = Integer.MIN_VALUE, qStart = Integer.MAX_VALUE, qEnd = Integer.MIN_VALUE;

    int j;
    for (j = 0; j &lt; chainBlockNodes.size(); j++) {
        firstBlock = (Node) chainBlockNodes.get(j);
        if (Integer.parseInt(firstBlock.valueOf("@tEnd")) &gt; start)
            break;
    }
    if (start &lt;= Integer.parseInt(hit.valueOf("@tStart")) &amp;&amp;
            end &gt;= Integer.parseInt(hit.valueOf("@tEnd"))) {
        qStart = Integer.parseInt(hit.valueOf("@qStart"));
        qEnd = Integer.parseInt(hit.valueOf("@qEnd"));
        // Parse blocks to get new position.
        int newSize = 0;
        for (int k = 0; k &lt; chainBlockNodes.size(); k++) {
            Node block = (Node) chainBlockNodes.get(k);
            newSize += Integer.parseInt(block.valueOf("@qEnd")) - Integer.parseInt(block.valueOf("@qStart"));
        }

        qStart++; // Fix qStart to be 1-indexed.
        if (newSize &lt; oldSize * minMatch)
            return "Error: Insufficient coverage";
        if (hit.valueOf("@qStrand").equals("+"))
            return hit.valueOf("@qName") + ":" + qStart +"-" + qEnd;
    } else {
        int newSize = 0;
        for (int k = j; k &lt; chainBlockNodes.size(); k++) {
            Node oldBlock = (Node) chainBlockNodes.get(k);
            if (Integer.parseInt(oldBlock.valueOf("@tStart")) &gt;= end)
                break;
            // blockPos = {qStart, qEnd, tStart, tEnd}
            int [] blockPos = {Integer.parseInt(oldBlock.valueOf("@qStart")),
                               Integer.parseInt(oldBlock.valueOf("@qEnd")),
                               Integer.parseInt(oldBlock.valueOf("@tStart")),
                               Integer.parseInt(oldBlock.valueOf("@tEnd"))};
            if (Integer.parseInt(oldBlock.valueOf("@tStart")) &lt; start) {
                blockPos[0] += start - Integer.parseInt(oldBlock.valueOf("@tStart"));
                blockPos[2] = tStart;
            }
            if (Integer.parseInt(oldBlock.valueOf("@tEnd")) &gt; end) {
                blockPos[1] -= Integer.parseInt(oldBlock.valueOf("@tEnd")) - end;
                blockPos[3] = end;
            }
            newSize += blockPos[1] - blockPos[0];
            if (qStart &gt; blockPos[0])
                qStart = blockPos[0];
            if (qEnd &lt; blockPos[1])
                qEnd = blockPos[1];
        }
        if (newSize &lt; oldSize * minMatch)
            return "Error: Insufficient coverage";
        else if (hit.valueOf("@qStrand").equals("+")) {
            qStart++; // Fix qStart to be 1-indexed.
            return hit.valueOf("@qName") + ":" + qStart + "-" + qEnd;
        } else {
            int qSize = Integer.parseInt(hit.valueOf("@qSize"));
            return hit.valueOf("@qName") + ":" + (qSize - qEnd + 1) + "-" + (qSize - qStart);
        }
    }

    return null;
}

// Fix minMatch
double minMatchDbl = 0.95;
if (minMatch != void)
    minMatchDbl = Double.parseDouble(minMatch);

// Initialise Reader.
SAXReader reader = new SAXReader(false);
reader.setIncludeInternalDTDDeclarations(false);
reader.setIncludeExternalDTDDeclarations(false);

// Read chainXML.
Document chainXml = reader.read(new StringReader(chainXmlString));
Node docRoot = chainXml.getRootElement();

String fromBuild = docRoot.attributeValue("from");
String toBuild   = docRoot.attributeValue("to");

int f = Integer.parseInt(fromBuild.substring(2));
int t = Integer.parseInt(toBuild.substring(2));

// Read XMLInput.
Document doc = reader.read(new StringReader(xmlIn));

boolean contig = true;
if (contiguous != void)
    contig = Boolean.parseBoolean(contiguous);

// Select all Location Node regardless of document structure.
String xPath = "//" + nodesToConvert;
List nodeList = doc.selectNodes(xPath);
for (int i = 0; i &lt; nodeList.size(); i++) {
    Node parentNode = (Node) nodeList.get(i);

    List locationNodes = parentNode.selectNodes("Location[@ucscBuild='" + fromBuild + "']");
    for (int j = 0; j &lt; locationNodes.size(); j++) {
        Element locationNode = (Element) locationNodes.get(j);

        String chr = locationNode.valueOf("@chromosome");
        if (! chr.startsWith("chr"))
            chr = "chr" + chr;
        String start = locationNode.attributeValue("start");
        String end   = locationNode.attributeValue("end");
	int startPos = Integer.parseInt(start);
        int endPos   = Integer.parseInt(end);

        String error = null;
        ArrayList positions = new ArrayList();
        if (contig || (endPos - startPos &lt; 2)) {
            positions.add(chr + ":" + start + "-" + end);
        } else {
            positions.add(chr + ":" + start + "-" + (startPos + 1));
            positions.add(chr + ":" + (endPos - 1) + "-" + end);
        }

        ArrayList newPositions = new ArrayList();
        for (int k = 0; k &lt; positions.size(); k++) {
            String newPos = (String) positions.get(k);
            if (f &gt; t &amp;&amp; (f - t &gt; 1)) {
                while (f &gt; t) {
                    Node chainNode = docRoot.selectSingleNode("LiftOverMap[@conversion='hg" + f + "ToHg" + (f - 1) + "']");
                    newPos = mapRegion(newPos, chainNode, minMatchDbl);
                    if (newPos == null || newPos.startsWith("Error"))
                        break;
                    f--;
                }
            } else {
                String toCap = "H" + toBuild.substring(1);
                Node chainNode = docRoot.selectSingleNode("LiftOverMap[@conversion='" + fromBuild + "To" + toCap + "']");
                newPos = mapRegion(newPos, chainNode, minMatchDbl);
            }
            newPositions.add(newPos);
        }

        // Check for errors and combine if neccessary.
        String mappedPos;
        boolean contig = Boolean.parseBoolean(contiguous);
        if (contig) {
            mappedPos = (String) newPositions.get(0);
        } else if (newPositions.size() == 2) {
            String startPosition = (String) newPositions.get(0);
            String endPosition   = (String) newPositions.get(1);

            if (startPosition.startsWith("Error")) {
                mappedPos = startPosition;
            } else if (endPosition.startsWith("Error")) {
                mappedPos = endPosition;
            } else {
                int i1a = startPosition.indexOf(':');
                int i1b = startPosition.indexOf('-');
                int i2a = endPosition.indexOf(':');
                int i2b = endPosition.indexOf('-');

                int startA = Integer.parseInt(startPosition.substring(i1a + 1, i1b));
                int startB = Integer.parseInt(endPosition.substring(i2a + 1, i2b));
                int endA   = Integer.parseInt(startPosition.substring(i1b + 1));
                int endB   = Integer.parseInt(endPosition.substring(i2b + 1));

                if (startA &lt; startB)
                    mappedPos = startPosition.substring(0, i1a) + ':' + startA + '-' + endB;
                else
                    mappedPos = startPosition.substring(0, i1a) + ':' + startB + '-' + endA;
            }
        } else {
            mappedPos = "Error: Incorrect input!";
        }

        // Add new MapLoc.
        if (mappedPos.startsWith("Error") ) {
            parentNode.addElement("Location")
                      .addAttribute("error", mappedPos)
                      .addAttribute("ucscBuild", toBuild);
        } else {
            int i1 = mappedPos.indexOf(':');
            int i2 = mappedPos.indexOf('-');
            parentNode.addElement("Location")
                      .addAttribute("chromosome", mappedPos.substring(0, i1))
                      .addAttribute("start",      mappedPos.substring(i1 + 1, i2))
                      .addAttribute("end",        mappedPos.substring(i2 + 1))
                      .addAttribute("ucscBuild",      toBuild);
        }
    }
}

xmlOut = doc.asXML();</script>
  <dependencies />
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="contiguous" depth="0" /><port name="minMatch" depth="0" /><port name="xmlIn" depth="0" /><port name="nodesToConvert" depth="0" /><port name="chainXmlString" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>parseParameters</name><inputPorts><port><name>paramXML</name><depth>0</depth></port></inputPorts><outputPorts><port><name>contiguous</name><depth>0</depth><granularDepth>0</granularDepth></port><port><name>minMatch</name><depth>0</depth><granularDepth>0</granularDepth></port><port><name>xmlIn</name><depth>0</depth><granularDepth>0</granularDepth></port><port><name>rootNode</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>localworker-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.localworker.LocalworkerActivity</class><inputMap><map from="paramXML" to="paramXML" /></inputMap><outputMap><map from="rootNode" to="rootNode" /><map from="xmlIn" to="xmlIn" /><map from="contiguous" to="contiguous" /><map from="minMatch" to="minMatch" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>paramXML</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/xml'</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>toBuild</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>fromBuild</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>xmlIn</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>contiguous</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>minMatch</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>rootNode</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>import org.dom4j.Document;
import org.dom4j.Node;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;

String getParameter(Element root, String parameterName) {
    List nodeList = root.selectNodes("Parameter[@name='" + parameterName + "']");
    if (nodeList.size() == 1) {
        Element parameterNode = (Element) nodeList.get(0);
        String parameter = "";
        if (parameterNode.isTextOnly())
            parameter = parameterNode.getText();
        else {
            List paramElements = parameterNode.elements();
            for (int i = 0; i &lt; paramElements.size(); i++) {
                parameter += ((Element) paramElements.get(i)).asXML();
            }
        }
        if (parameter == null || parameter.equals(""))
            return null;
        else
            return parameter;
    } else if (nodeList.size() &gt; 1) {
        throw new Exception("Multiple parameters matching " + parameterName + "!");
    }
    return null;
}

SAXReader reader = new SAXReader(false);
reader.setIncludeInternalDTDDeclarations(false);
reader.setIncludeExternalDTDDeclarations(false);

Document document = reader.read(new StringReader(paramXML));
Element root = document.getRootElement();

// Set parameter defaults.
toBuild    = "hg19";
fromBuild  = "hg18";
contiguous = "true";
minMatch   = "0.95";
xmlIn      = "";
chainXML   = "";
rootNode   = "";

// Get parameters from XML.
String paramTmp;
// toBuild.
if ((paramTmp = getParameter(root, "toBuild")) != null)
    toBuild = paramTmp;
// fromBuild.
if ((paramTmp = getParameter(root, "fromBuild")) != null)
    fromBuild = paramTmp;
// contiguous.
if ((paramTmp = getParameter(root, "contiguous")) != null)
    contiguous = paramTmp;
// minMatch.
if ((paramTmp = getParameter(root, "minMatch")) != null)
    minMatch = paramTmp;
// xmlIn.
if ((paramTmp = getParameter(root, "xmlIn")) != null)
    xmlIn = paramTmp;
// rootNode.
if ((paramTmp = getParameter(root, "rootNode")) != null)
    rootNode = paramTmp;</script>
  <dependencies>
    <string>dom4j:dom4j:1.6</string>
  </dependencies>
  <localworkerName>net.sourceforge.taverna.scuflworkers.xml.XPathTextWorker</localworkerName>
</net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean></configBean><annotations><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.HostInstitution">
        <text>UserNameHere</text>
      </annotationBean>
      <date>2010-05-05 16:53:22.183 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain></annotations></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="paramXML" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor></processors><conditions /><datalinks><datalink><sink type="processor"><processor>liftOver</processor><port>contiguous</port></sink><source type="processor"><processor>parseParameters</processor><port>contiguous</port></source></datalink><datalink><sink type="processor"><processor>liftOver</processor><port>minMatch</port></sink><source type="processor"><processor>parseParameters</processor><port>minMatch</port></source></datalink><datalink><sink type="processor"><processor>liftOver</processor><port>xmlIn</port></sink><source type="processor"><processor>parseParameters</processor><port>xmlIn</port></source></datalink><datalink><sink type="processor"><processor>liftOver</processor><port>nodesToConvert</port></sink><source type="processor"><processor>parseParameters</processor><port>rootNode</port></source></datalink><datalink><sink type="processor"><processor>liftOver</processor><port>chainXmlString</port></sink><source type="dataflow"><port>chainXML</port></source></datalink><datalink><sink type="processor"><processor>parseParameters</processor><port>paramXML</port></sink><source type="dataflow"><port>parameters</port></source></datalink><datalink><sink type="dataflow"><port>xmlOut</port></sink><source type="processor"><processor>liftOver</processor><port>xmlOut</port></source></datalink></datalinks><annotations><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.Author">
        <text>Paul Martin</text>
      </annotationBean>
      <date>2010-04-26 16:00:57.252 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.FreeTextDescription">
        <text>Converts genomic co-ordinates between builds for the same species. Requires XML Locations as input.</text>
      </annotationBean>
      <date>2010-04-26 16:02:30.153 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>3ce3fd14-5b92-4fe6-8198-bba08b46242d</identification>
      </annotationBean>
      <date>2011-10-07 12:24:20.478 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.DescriptiveTitle">
        <text>Convert Genomic Co-ordinates</text>
      </annotationBean>
      <date>2010-04-26 16:01:35.910 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain></annotations></dataflow><dataflow id="e03e4fbb-32e5-460a-9c9d-c2986040dc6c" role="nested"><name>Convert_Genomic_Co_ordinates</name><inputPorts><port><name>parameters</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>chainXML</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port></inputPorts><outputPorts><port><name>xmlOut</name><annotations /></port></outputPorts><processors><processor><name>liftOver</name><inputPorts><port><name>contiguous</name><depth>0</depth></port><port><name>minMatch</name><depth>0</depth></port><port><name>xmlIn</name><depth>0</depth></port><port><name>nodesToConvert</name><depth>0</depth></port><port><name>chainXmlString</name><depth>0</depth></port></inputPorts><outputPorts><port><name>xmlOut</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="nodesToConvert" to="nodesToConvert" /><map from="xmlIn" to="xmlIn" /><map from="contiguous" to="contiguous" /><map from="chainXmlString" to="chainXmlString" /><map from="minMatch" to="minMatch" /></inputMap><outputMap><map from="xmlOut" to="xmlOut" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>xmlIn</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>contiguous</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>minMatch</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>chainXmlString</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>nodesToConvert</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>xmlOut</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>import org.dom4j.Document;
import org.dom4j.Element;
import org.dom4j.Node;
import org.dom4j.io.SAXReader;

String mapRegion(String position, Node chain, Double minMatch) throws Exception {
    int [] binOffsetsExtended = {4096+512+64+8+1, 512+64+8+1, 64+8+1, 8+1, 1, 0};
    int [] binOffsets = {512+64+8+1, 64+8+1, 8+1, 1, 0};
    int _binFirstShift = 17;
    int _binNextShift = 3;

    // Split position into component parts.
    int i1 = position.indexOf(':');
    int i2 = position.indexOf('-');
    String chr = position.substring(0, i1);
    int start = Integer.parseInt(position.substring(i1 + 1, i2));
    int end = Integer.parseInt(position.substring(i2 + 1));

    if (start &gt; end)
        throw new Exception("start coordinate is after end coordinate (chromStart &gt; chromEnd)");

    // Get chromosome Node.
    Node chromNode = chain.selectSingleNode("Chromosome[@chromosome='" + chr + "']");
    if (chromNode == null)
        throw new Exception("No mapping information for chromosome " + chr);

    if (minMatch == null || minMatch &lt;= 0)
        minMatch = 0.95;
    else if (minMatch &gt; 1)
        minMatch = 1.0;

    start--;

    int startTmp = start;
    int endTmp   = end;
    if (start &lt; Integer.parseInt(chromNode.valueOf("@min_pos")))
        startTmp = Integer.parseInt(chromNode.valueOf("@min_pos"));
    if (end &gt; Integer.parseInt(chromNode.valueOf("@max_pos")))
        endTmp = Integer.parseInt(chromNode.valueOf("@max_pos"));
     // Find bin for position.
    int startBin = startTmp &gt;&gt; _binFirstShift;
    int endBin = (endTmp-1) &gt;&gt; _binFirstShift;
    ArrayList matchingChains = new ArrayList();
    for (int i = 0; i &lt; binOffsetsExtended.length; i++) {
        int offset = binOffsetsExtended[i];
        for (int j = startBin + offset; j &lt;= endBin + offset; j++) {
            Node binNode = chromNode.selectSingleNode("Bin[@id=" + j +"]");
            if (binNode == null)
                continue;
            List chains = binNode.selectNodes("Chain");
            for (Iterator iter = chains.listIterator(); iter.hasNext(); ) {
                Node chainNode = (Node) iter.next();
                int s = Math.max(Integer.parseInt(chainNode.valueOf("@tStart")), start);
                int e = Math.min(Integer.parseInt(chainNode.valueOf("@tEnd")), end);
                int rangeIntersection = e-s;
                if (rangeIntersection &gt; 0)
                    matchingChains.add(chainNode);
            }
        }
        startBin &gt;&gt;= _binNextShift;
        endBin &gt;&gt;= _binNextShift;
    }
    double minMatchSize = minMatch * (end - start);

    ArrayList hits = new ArrayList();
    ArrayList partial = new ArrayList();
    ArrayList missed = new ArrayList();
    for (int i = 0; i &lt; matchingChains.size(); i++) {
        Node chainNode = (Node) matchingChains.get(i);
        int total = 0, one;
        // Parse ChainBlocks
        List chainBlockNodes = chainNode.selectNodes("ChainBlock");
        for (int j = 0; j &lt; chainBlockNodes.size(); j++) {
            Node chainBlockNode = (Node) chainBlockNodes.get(j);
            int s = Math.max(Integer.parseInt(chainBlockNode.valueOf("@tStart")), start);
            int e = Math.min(Integer.parseInt(chainBlockNode.valueOf("@tEnd")), end);
            one = e-s;
            if (one &gt; 0)
                total += one;
        }
        if (total &gt;= minMatchSize)
            hits.add(chainNode);
        else if (total &gt; 0)
            partial.add(chainNode);
        else
            missed.add(chainNode);
    }

    // Check if hits or partial.
    if (hits.size() == 0)
        if (partial.size() == 0)
            return "Error: Deleted in new";
        else if (partial.size() == 1)
            return "Error: Partially deleted in new";
        else
            return "Error: Split in new";
    else if (hits.size() &gt; 1)
        return "Error: Duplicated in new";
    // Found ok hit.
    Node hit = (Node) hits.get(0);
    int oldSize = end - start;
    // Get subchain by start end.
    List chainBlockNodes = hit.selectNodes("ChainBlock");
    Node firstBlock;
    ArrayList blocks = new ArrayList();
    int tStart = Integer.MAX_VALUE, tEnd = Integer.MIN_VALUE, qStart = Integer.MAX_VALUE, qEnd = Integer.MIN_VALUE;

    int j;
    for (j = 0; j &lt; chainBlockNodes.size(); j++) {
        firstBlock = (Node) chainBlockNodes.get(j);
        if (Integer.parseInt(firstBlock.valueOf("@tEnd")) &gt; start)
            break;
    }
    if (start &lt;= Integer.parseInt(hit.valueOf("@tStart")) &amp;&amp;
            end &gt;= Integer.parseInt(hit.valueOf("@tEnd"))) {
        qStart = Integer.parseInt(hit.valueOf("@qStart"));
        qEnd = Integer.parseInt(hit.valueOf("@qEnd"));
        // Parse blocks to get new position.
        int newSize = 0;
        for (int k = 0; k &lt; chainBlockNodes.size(); k++) {
            Node block = (Node) chainBlockNodes.get(k);
            newSize += Integer.parseInt(block.valueOf("@qEnd")) - Integer.parseInt(block.valueOf("@qStart"));
        }

        qStart++; // Fix qStart to be 1-indexed.
        if (newSize &lt; oldSize * minMatch)
            return "Error: Insufficient coverage";
        if (hit.valueOf("@qStrand").equals("+"))
            return hit.valueOf("@qName") + ":" + qStart +"-" + qEnd;
    } else {
        int newSize = 0;
        for (int k = j; k &lt; chainBlockNodes.size(); k++) {
            Node oldBlock = (Node) chainBlockNodes.get(k);
            if (Integer.parseInt(oldBlock.valueOf("@tStart")) &gt;= end)
                break;
            // blockPos = {qStart, qEnd, tStart, tEnd}
            int [] blockPos = {Integer.parseInt(oldBlock.valueOf("@qStart")),
                               Integer.parseInt(oldBlock.valueOf("@qEnd")),
                               Integer.parseInt(oldBlock.valueOf("@tStart")),
                               Integer.parseInt(oldBlock.valueOf("@tEnd"))};
            if (Integer.parseInt(oldBlock.valueOf("@tStart")) &lt; start) {
                blockPos[0] += start - Integer.parseInt(oldBlock.valueOf("@tStart"));
                blockPos[2] = tStart;
            }
            if (Integer.parseInt(oldBlock.valueOf("@tEnd")) &gt; end) {
                blockPos[1] -= Integer.parseInt(oldBlock.valueOf("@tEnd")) - end;
                blockPos[3] = end;
            }
            newSize += blockPos[1] - blockPos[0];
            if (qStart &gt; blockPos[0])
                qStart = blockPos[0];
            if (qEnd &lt; blockPos[1])
                qEnd = blockPos[1];
        }
        if (newSize &lt; oldSize * minMatch)
            return "Error: Insufficient coverage";
        else if (hit.valueOf("@qStrand").equals("+")) {
            qStart++; // Fix qStart to be 1-indexed.
            return hit.valueOf("@qName") + ":" + qStart + "-" + qEnd;
        } else {
            int qSize = Integer.parseInt(hit.valueOf("@qSize"));
            return hit.valueOf("@qName") + ":" + (qSize - qEnd + 1) + "-" + (qSize - qStart);
        }
    }

    return null;
}

// Fix minMatch
double minMatchDbl = 0.95;
if (minMatch != void)
    minMatchDbl = Double.parseDouble(minMatch);

// Initialise Reader.
SAXReader reader = new SAXReader(false);
reader.setIncludeInternalDTDDeclarations(false);
reader.setIncludeExternalDTDDeclarations(false);

// Read chainXML.
Document chainXml = reader.read(new StringReader(chainXmlString));
Node docRoot = chainXml.getRootElement();

String fromBuild = docRoot.attributeValue("from");
String toBuild   = docRoot.attributeValue("to");

int f = Integer.parseInt(fromBuild.substring(2));
int t = Integer.parseInt(toBuild.substring(2));

// Read XMLInput.
Document doc = reader.read(new StringReader(xmlIn));

boolean contig = true;
if (contiguous != void)
    contig = Boolean.parseBoolean(contiguous);

// Select all Location Node regardless of document structure.
String xPath = "//" + nodesToConvert;
List nodeList = doc.selectNodes(xPath);
for (int i = 0; i &lt; nodeList.size(); i++) {
    Node parentNode = (Node) nodeList.get(i);

    List locationNodes = parentNode.selectNodes("Location[@ucscBuild='" + fromBuild + "']");
    for (int j = 0; j &lt; locationNodes.size(); j++) {
        Element locationNode = (Element) locationNodes.get(j);

        String chr = locationNode.valueOf("@chromosome");
        if (! chr.startsWith("chr"))
            chr = "chr" + chr;
        String start = locationNode.attributeValue("start");
        String end   = locationNode.attributeValue("end");
	int startPos = Integer.parseInt(start);
        int endPos   = Integer.parseInt(end);

        String error = null;
        ArrayList positions = new ArrayList();
        if (contig || (endPos - startPos &lt; 2)) {
            positions.add(chr + ":" + start + "-" + end);
        } else {
            positions.add(chr + ":" + start + "-" + (startPos + 1));
            positions.add(chr + ":" + (endPos - 1) + "-" + end);
        }

        ArrayList newPositions = new ArrayList();
        for (int k = 0; k &lt; positions.size(); k++) {
            String newPos = (String) positions.get(k);
            if (f &gt; t &amp;&amp; (f - t &gt; 1)) {
                while (f &gt; t) {
                    Node chainNode = docRoot.selectSingleNode("LiftOverMap[@conversion='hg" + f + "ToHg" + (f - 1) + "']");
                    newPos = mapRegion(newPos, chainNode, minMatchDbl);
                    if (newPos == null || newPos.startsWith("Error"))
                        break;
                    f--;
                }
            } else {
                String toCap = "H" + toBuild.substring(1);
                Node chainNode = docRoot.selectSingleNode("LiftOverMap[@conversion='" + fromBuild + "To" + toCap + "']");
                newPos = mapRegion(newPos, chainNode, minMatchDbl);
            }
            newPositions.add(newPos);
        }

        // Check for errors and combine if neccessary.
        String mappedPos;
        boolean contig = Boolean.parseBoolean(contiguous);
        if (contig) {
            mappedPos = (String) newPositions.get(0);
        } else if (newPositions.size() == 2) {
            String startPosition = (String) newPositions.get(0);
            String endPosition   = (String) newPositions.get(1);

            if (startPosition.startsWith("Error")) {
                mappedPos = startPosition;
            } else if (endPosition.startsWith("Error")) {
                mappedPos = endPosition;
            } else {
                int i1a = startPosition.indexOf(':');
                int i1b = startPosition.indexOf('-');
                int i2a = endPosition.indexOf(':');
                int i2b = endPosition.indexOf('-');

                int startA = Integer.parseInt(startPosition.substring(i1a + 1, i1b));
                int startB = Integer.parseInt(endPosition.substring(i2a + 1, i2b));
                int endA   = Integer.parseInt(startPosition.substring(i1b + 1));
                int endB   = Integer.parseInt(endPosition.substring(i2b + 1));

                if (startA &lt; startB)
                    mappedPos = startPosition.substring(0, i1a) + ':' + startA + '-' + endB;
                else
                    mappedPos = startPosition.substring(0, i1a) + ':' + startB + '-' + endA;
            }
        } else {
            mappedPos = "Error: Incorrect input!";
        }

        // Add new MapLoc.
        if (mappedPos.startsWith("Error") ) {
            parentNode.addElement("Location")
                      .addAttribute("error", mappedPos)
                      .addAttribute("ucscBuild", toBuild);
        } else {
            int i1 = mappedPos.indexOf(':');
            int i2 = mappedPos.indexOf('-');
            parentNode.addElement("Location")
                      .addAttribute("chromosome", mappedPos.substring(0, i1))
                      .addAttribute("start",      mappedPos.substring(i1 + 1, i2))
                      .addAttribute("end",        mappedPos.substring(i2 + 1))
                      .addAttribute("ucscBuild",      toBuild);
        }
    }
}

xmlOut = doc.asXML();</script>
  <dependencies />
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="contiguous" depth="0" /><port name="minMatch" depth="0" /><port name="xmlIn" depth="0" /><port name="nodesToConvert" depth="0" /><port name="chainXmlString" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>parseParameters</name><inputPorts><port><name>paramXML</name><depth>0</depth></port></inputPorts><outputPorts><port><name>contiguous</name><depth>0</depth><granularDepth>0</granularDepth></port><port><name>minMatch</name><depth>0</depth><granularDepth>0</granularDepth></port><port><name>xmlIn</name><depth>0</depth><granularDepth>0</granularDepth></port><port><name>rootNode</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>localworker-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.localworker.LocalworkerActivity</class><inputMap><map from="paramXML" to="paramXML" /></inputMap><outputMap><map from="rootNode" to="rootNode" /><map from="xmlIn" to="xmlIn" /><map from="contiguous" to="contiguous" /><map from="minMatch" to="minMatch" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>paramXML</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/xml'</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>toBuild</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>fromBuild</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>xmlIn</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>contiguous</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>minMatch</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>rootNode</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>import org.dom4j.Document;
import org.dom4j.Node;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;

String getParameter(Element root, String parameterName) {
    List nodeList = root.selectNodes("Parameter[@name='" + parameterName + "']");
    if (nodeList.size() == 1) {
        Element parameterNode = (Element) nodeList.get(0);
        String parameter = "";
        if (parameterNode.isTextOnly())
            parameter = parameterNode.getText();
        else {
            List paramElements = parameterNode.elements();
            for (int i = 0; i &lt; paramElements.size(); i++) {
                parameter += ((Element) paramElements.get(i)).asXML();
            }
        }
        if (parameter == null || parameter.equals(""))
            return null;
        else
            return parameter;
    } else if (nodeList.size() &gt; 1) {
        throw new Exception("Multiple parameters matching " + parameterName + "!");
    }
    return null;
}

SAXReader reader = new SAXReader(false);
reader.setIncludeInternalDTDDeclarations(false);
reader.setIncludeExternalDTDDeclarations(false);

Document document = reader.read(new StringReader(paramXML));
Element root = document.getRootElement();

// Set parameter defaults.
toBuild    = "hg19";
fromBuild  = "hg18";
contiguous = "true";
minMatch   = "0.95";
xmlIn      = "";
chainXML   = "";
rootNode   = "";

// Get parameters from XML.
String paramTmp;
// toBuild.
if ((paramTmp = getParameter(root, "toBuild")) != null)
    toBuild = paramTmp;
// fromBuild.
if ((paramTmp = getParameter(root, "fromBuild")) != null)
    fromBuild = paramTmp;
// contiguous.
if ((paramTmp = getParameter(root, "contiguous")) != null)
    contiguous = paramTmp;
// minMatch.
if ((paramTmp = getParameter(root, "minMatch")) != null)
    minMatch = paramTmp;
// xmlIn.
if ((paramTmp = getParameter(root, "xmlIn")) != null)
    xmlIn = paramTmp;
// rootNode.
if ((paramTmp = getParameter(root, "rootNode")) != null)
    rootNode = paramTmp;</script>
  <dependencies>
    <string>dom4j:dom4j:1.6</string>
  </dependencies>
  <localworkerName>net.sourceforge.taverna.scuflworkers.xml.XPathTextWorker</localworkerName>
</net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean></configBean><annotations><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.HostInstitution">
        <text>UserNameHere</text>
      </annotationBean>
      <date>2010-05-05 16:53:22.183 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain></annotations></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="paramXML" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor></processors><conditions /><datalinks><datalink><sink type="processor"><processor>liftOver</processor><port>contiguous</port></sink><source type="processor"><processor>parseParameters</processor><port>contiguous</port></source></datalink><datalink><sink type="processor"><processor>liftOver</processor><port>minMatch</port></sink><source type="processor"><processor>parseParameters</processor><port>minMatch</port></source></datalink><datalink><sink type="processor"><processor>liftOver</processor><port>xmlIn</port></sink><source type="processor"><processor>parseParameters</processor><port>xmlIn</port></source></datalink><datalink><sink type="processor"><processor>liftOver</processor><port>nodesToConvert</port></sink><source type="processor"><processor>parseParameters</processor><port>rootNode</port></source></datalink><datalink><sink type="processor"><processor>liftOver</processor><port>chainXmlString</port></sink><source type="dataflow"><port>chainXML</port></source></datalink><datalink><sink type="processor"><processor>parseParameters</processor><port>paramXML</port></sink><source type="dataflow"><port>parameters</port></source></datalink><datalink><sink type="dataflow"><port>xmlOut</port></sink><source type="processor"><processor>liftOver</processor><port>xmlOut</port></source></datalink></datalinks><annotations><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.Author">
        <text>Paul Martin</text>
      </annotationBean>
      <date>2010-04-26 16:00:57.252 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>e03e4fbb-32e5-460a-9c9d-c2986040dc6c</identification>
      </annotationBean>
      <date>2011-10-07 12:24:21.216 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.FreeTextDescription">
        <text>Converts genomic co-ordinates between builds for the same species. Requires XML Locations as input.</text>
      </annotationBean>
      <date>2010-04-26 16:02:30.153 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.DescriptiveTitle">
        <text>Convert Genomic Co-ordinates</text>
      </annotationBean>
      <date>2010-04-26 16:01:35.910 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain></annotations></dataflow><dataflow id="ee79c9fd-face-426c-ae25-628ff75f8ad1" role="nested"><name>Workflow60</name><inputPorts><port><name>AssociatedXML</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>ensemblBiomartBuild</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>dataset</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>virtualSchema</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>baseUrl</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port></inputPorts><outputPorts><port><name>AssociatedXmlOutput</name><annotations /></port></outputPorts><processors><processor><name>getAssociatedRegionLocations</name><inputPorts><port><name>associatedXML</name><depth>0</depth></port><port><name>ensemblBiomartBuild</name><depth>0</depth></port></inputPorts><outputPorts><port><name>queries</name><depth>1</depth><granularDepth>1</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="ensemblBiomartBuild" to="ensemblBiomartBuild" /><map from="associatedXML" to="associatedXML" /></inputMap><outputMap><map from="queries" to="queries" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>associatedXML</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>ensemblBiomartBuild</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>queries</name>
      <depth>1</depth>
      <mimeTypes />
      <granularDepth>1</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>import org.dom4j.Document;
import org.dom4j.Node;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;

queries   = new ArrayList();

SAXReader reader = new SAXReader(false);
reader.setIncludeInternalDTDDeclarations(false);
reader.setIncludeExternalDTDDeclarations(false);

// Process XML string into Document.
Document document = reader.read(new StringReader(associatedXML));

// Get AssociatedRegion Nodes. Could either be root Node or several levels deep.
List associatedRegionNodes = document.selectNodes("//AssociatedRegion");

// Process associatedRegionNodes and add location info to arrays.
for (int i = 0; i &lt; associatedRegionNodes.size(); i++) {
	Node associatedRegionNode = (Node) associatedRegionNodes.get(i);
	// Get Location Node matching ensemblBiomartBuild
	Node locationNode = associatedRegionNode.selectSingleNode("Location[@ucscBuild='" + ensemblBiomartBuild + "']");
	if (locationNode != null) {
		//String error = locationNode.attributeValue("error");
		//if (error == null || error.equals("")) 
		String chr = locationNode.attributeValue("chromosome");
		if (chr != null)
			chr = chr.replace("chr", "");
		String start = locationNode.attributeValue("start");
		String end   = locationNode.attributeValue("end");

		if (chr == null || start == null || end == null)
			continue;
		// Add location info to arrays.
		queries.add(chr + "\t" + start + "\t" + end);
	}
}</script>
  <dependencies />
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="associatedXML" depth="0" /><port name="ensemblBiomartBuild" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>createGeneXML</name><inputPorts><port><name>ensemblBiomartBuild</name><depth>0</depth></port><port><name>biomartResultsArray</name><depth>1</depth></port></inputPorts><outputPorts><port><name>geneXML</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="biomartResultsArray" to="biomartResultsArray" /><map from="ensemblBiomartBuild" to="ensemblBiomartBuild" /></inputMap><outputMap><map from="geneXML" to="geneXML" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>ensemblBiomartBuild</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>biomartResultsArray</name>
      <depth>1</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>geneXML</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>import org.dom4j.dom.DOMDocument;
import org.dom4j.Document;
import org.dom4j.Node;
import org.dom4j.Element;

void addGene(Element rootElement, String [] attributes) {
	Element gene = rootElement.addElement("Gene")
		.addAttribute("ensgId", attributes[0])
		.addAttribute("source", attributes[5])
		.addAttribute("status", attributes[6])
		.addAttribute("geneBiotype", attributes[7]);
	addGeneName(gene, "ucscId", attributes[1]);
	addGeneName(gene, "entrezGene", attributes[2]);
	addGeneName(gene, "associatedName", attributes[3]);
	addGeneName(gene, "description",  attributes[4]);
	addLocation(gene, "chr" + attributes[8], attributes[9], attributes[10]);
}

void addGeneName(Element gene, String type, String name) {
	// Check for null or blank arguments.
	if (gene == null || type == null || type.equals("") || name == null || name.equals(""))
		return;

	// Get existing GeneName Nodes.
	List geneNameNodes = gene.selectNodes("GeneName[@type='" + type + "']");
	boolean addGeneName = true;
	for (int i = 0; i &lt; geneNameNodes.size(); i++) {
		Node geneNameNode = (Node) geneNameNodes.get(i);
		String storedName = geneNameNode.attributeValue("name");
		if (storedName == null || storedName.equals("")) {
			// Remove empty/incomplete GeneName Element.
			geneNameNode.detach();
		} else if (storedName.equals(name)) {
			addGeneName = false;
		}
	}

	if (addGeneName) {
		gene.addElement("GeneName")
			.addAttribute("type", type)
			.addAttribute("name", name);
	}
}

void addLocation(Element gene, String chr, String start, String end) {
	// Check for null or blank arguments.
	if (gene == null || chr == null || chr.equals("") || start == null || start.equals("") || end == null || end.equals(""))
		return;

	// Get existing Location Nodes.
	List locationNodes = gene.selectNodes("Location[@chromosome='" + chr + "']");
	boolean addLocation = true;
	for (int i = 0; i &lt; locationNodes.size(); i++) {
		Node locationNode = (Node) locationNodes.get(i);
		String storedStart = locationNode.attributeValue("start");
		String storedEnd   = locationNode.attributeValue("end");
		if (storedStart == null || storedStart.equals("") || storedEnd == null || storedEnd.equals("")) {
			// Remove empty/incomplete GeneName Element.
			locationNode.detach();
		} else if (storedStart.equals(start) &amp;&amp; storedEnd.equals(end)) {
			addLocation = false;
		}
	}

	if (addLocation == true) {
		gene.addElement("Location")
			.addAttribute("chromosome", chr)
			.addAttribute("start",      start)
			.addAttribute("end",        end)
			.addAttribute("ucscBuild",  ensemblBiomartBuild);
	}
}

Document geneDoc = new DOMDocument();
// Add Root Element.
Element rootElement = geneDoc.addElement("Genes");

for (int i = 0; i &lt; biomartResultsArray.size(); i++) {
	String biomartResultsString = (String) biomartResultsArray.get(i);
	String [] biomartResults = biomartResultsString.split("\\n");
	for (int j = 0; j &lt; biomartResults.length; j++) {
		String biomartResult = biomartResults[j];
		if (biomartResult.startsWith("Ensembl"))
			continue;
		String [] biomartResultArray = biomartResult.split("\\t");
		if (biomartResultArray.length != 11)
			continue;
		Node geneNode = rootElement.selectSingleNode("Gene[@ensgId='" + biomartResultArray[0] + "']");
		if (geneNode == null) {
			addGene(rootElement, biomartResultArray);
		} else {
			// Try adding names.
			addGeneName(geneNode, "ucscId", biomartResultArray[1]);
			addGeneName(geneNode, "entrezGene", biomartResultArray[2]);
			addGeneName(geneNode, "associatedName", biomartResultArray[3]);
			addGeneName(geneNode, "description",  biomartResultArray[4]);
			// Try adding Location.
			addLocation(geneNode, "chr" + biomartResultArray[8], biomartResultArray[9], biomartResultArray[10]);
		}
	}		
}

geneXML = geneDoc.asXML();</script>
  <dependencies />
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="ensemblBiomartBuild" depth="0" /><port name="biomartResultsArray" depth="1" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>addGenesToAssociatedXML</name><inputPorts><port><name>geneXML</name><depth>0</depth></port><port><name>associatedXmlIn</name><depth>0</depth></port><port><name>ensemblBiomartBuild</name><depth>0</depth></port></inputPorts><outputPorts><port><name>associatedXmlOut</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="ensemblBiomartBuild" to="ensemblBiomartBuild" /><map from="geneXML" to="geneXML" /><map from="associatedXmlIn" to="associatedXmlIn" /></inputMap><outputMap><map from="associatedXmlOut" to="associatedXmlOut" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>associatedXmlIn</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>geneXML</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>ensemblBiomartBuild</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>associatedXmlOut</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>import org.dom4j.Document;
import org.dom4j.Node;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;

SAXReader reader = new SAXReader(false);
reader.setIncludeInternalDTDDeclarations(false);
reader.setIncludeExternalDTDDeclarations(false);

// Process XML string into Document.
Document associatedXmlDocument = reader.read(new StringReader(associatedXmlIn));
Document geneXmlDocument = reader.read(new StringReader(geneXML));

// Get list of genes.
Element geneRootElement = geneXmlDocument.getRootElement();
List geneNodes = geneRootElement.selectNodes("Gene");

// Get AssociatedRegion Nodes. Could either be root Node or several levels deep.
List associatedRegionNodes = associatedXmlDocument.selectNodes("//AssociatedRegion");

// Process associatedRegionNodes and add gene info.
for (int i = 0; i &lt; associatedRegionNodes.size(); i++) {
	Node associatedRegionNode = (Node) associatedRegionNodes.get(i);
	Node associatedRegionGenesNode = associatedRegionNode.selectSingleNode("AssociatedRegionGenes");

	// Get Location info.
	Node locationNode = associatedRegionNode.selectSingleNode("Location[@ucscBuild='" + ensemblBiomartBuild + "']");
	String error = locationNode.attributeValue("error");
	if (error != null &amp;&amp; error.length() &gt; 0)
		continue;
	String chr = locationNode.attributeValue("chromosome");
	int start  = Integer.parseInt(locationNode.attributeValue("start"));
	int end    = Integer.parseInt(locationNode.attributeValue("end"));

	if (associatedRegionGenesNode == null)
		associatedRegionGenesNode = associatedRegionNode.addElement("AssociatedRegionGenes");
	for (int j = 0; j &lt; geneNodes.size(); j++) {
		Node geneNode = (Node) geneNodes.get(j);
		Node geneLocationNode = geneNode.selectSingleNode("Location[@ucscBuild='" + ensemblBiomartBuild + "']");
		if (geneLocationNode == null)
			continue;
		String geneChr = geneLocationNode.attributeValue("chromosome");
		int geneStart  = Integer.parseInt(geneLocationNode.attributeValue("start"));
		int geneEnd    = Integer.parseInt(geneLocationNode.attributeValue("end"));

		if (geneChr.equals(chr) &amp;&amp; geneStart &lt;= end &amp;&amp; geneEnd &gt;= start) {
			// Add gene to associatedRegionGenesNode
			Element geneElement = geneNode.createCopy();
			associatedRegionGenesNode.add(geneElement);
		}
	}
}

associatedXmlOut = associatedXmlDocument.asXML();</script>
  <dependencies />
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="geneXML" depth="0" /><port name="associatedXmlIn" depth="0" /><port name="ensemblBiomartBuild" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>getBiomartResponse</name><inputPorts><port><name>queries</name><depth>1</depth></port><port><name>virtualSchema</name><depth>0</depth></port><port><name>dataset</name><depth>0</depth></port><port><name>baseUrl</name><depth>0</depth></port></inputPorts><outputPorts><port><name>biomartResponse</name><depth>1</depth><granularDepth>1</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>dataflow-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.dataflow.DataflowActivity</class><inputMap><map from="baseUrl" to="baseUrl" /><map from="dataset" to="dataset" /><map from="virtualSchema" to="virtualSchema" /><map from="queries" to="queries" /></inputMap><outputMap><map from="biomartResponse" to="biomartResponse" /></outputMap><configBean encoding="dataflow"><dataflow ref="5c8893fa-adf1-498d-9cce-6b650207bb72" /></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="queries" depth="1" /><port name="virtualSchema" depth="0" /><port name="dataset" depth="0" /><port name="baseUrl" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor></processors><conditions /><datalinks><datalink><sink type="processor"><processor>getAssociatedRegionLocations</processor><port>associatedXML</port></sink><source type="dataflow"><port>AssociatedXML</port></source></datalink><datalink><sink type="processor"><processor>getAssociatedRegionLocations</processor><port>ensemblBiomartBuild</port></sink><source type="dataflow"><port>ensemblBiomartBuild</port></source></datalink><datalink><sink type="processor"><processor>createGeneXML</processor><port>ensemblBiomartBuild</port></sink><source type="dataflow"><port>ensemblBiomartBuild</port></source></datalink><datalink><sink type="processor"><processor>createGeneXML</processor><port>biomartResultsArray</port></sink><source type="processor"><processor>getBiomartResponse</processor><port>biomartResponse</port></source></datalink><datalink><sink type="processor"><processor>addGenesToAssociatedXML</processor><port>geneXML</port></sink><source type="processor"><processor>createGeneXML</processor><port>geneXML</port></source></datalink><datalink><sink type="processor"><processor>addGenesToAssociatedXML</processor><port>associatedXmlIn</port></sink><source type="dataflow"><port>AssociatedXML</port></source></datalink><datalink><sink type="processor"><processor>addGenesToAssociatedXML</processor><port>ensemblBiomartBuild</port></sink><source type="dataflow"><port>ensemblBiomartBuild</port></source></datalink><datalink><sink type="processor"><processor>getBiomartResponse</processor><port>queries</port></sink><source type="processor"><processor>getAssociatedRegionLocations</processor><port>queries</port></source></datalink><datalink><sink type="processor"><processor>getBiomartResponse</processor><port>virtualSchema</port></sink><source type="dataflow"><port>virtualSchema</port></source></datalink><datalink><sink type="processor"><processor>getBiomartResponse</processor><port>dataset</port></sink><source type="dataflow"><port>dataset</port></source></datalink><datalink><sink type="processor"><processor>getBiomartResponse</processor><port>baseUrl</port></sink><source type="dataflow"><port>baseUrl</port></source></datalink><datalink><sink type="dataflow"><port>AssociatedXmlOutput</port></sink><source type="processor"><processor>addGenesToAssociatedXML</processor><port>associatedXmlOut</port></source></datalink></datalinks><annotations><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>0d1e4568-5f54-45f0-b002-86ba82a67b2e</identification>
      </annotationBean>
      <date>2012-03-19 10:42:56.489 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>4b45658d-2c15-4d03-b4e4-cf29a8626c21</identification>
      </annotationBean>
      <date>2012-03-19 10:55:03.622 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>b44f94f9-fb55-49d4-b4dc-924f7a900471</identification>
      </annotationBean>
      <date>2011-10-07 13:25:05.809 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>bf6bee48-be7a-4990-ad1a-cb39b03bae03</identification>
      </annotationBean>
      <date>2011-10-07 13:48:47.717 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>09530105-23d0-4bb7-81da-3151db9af74e</identification>
      </annotationBean>
      <date>2011-10-07 12:23:49.453 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>173d6f11-5142-42f7-bbb2-c70dabd640e9</identification>
      </annotationBean>
      <date>2012-01-24 10:30:52.897 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>73a6f7f2-aac3-4afc-ae68-ff06a6188299</identification>
      </annotationBean>
      <date>2011-10-07 13:42:35.744 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>ee79c9fd-face-426c-ae25-628ff75f8ad1</identification>
      </annotationBean>
      <date>2012-03-19 10:58:25.427 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>38fe35fa-4838-4572-82f6-b35a2d69c8c5</identification>
      </annotationBean>
      <date>2011-10-07 12:18:06.680 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>f10b2c66-966a-4f6b-874b-6c4090e6268e</identification>
      </annotationBean>
      <date>2012-03-19 10:50:50.802 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>626e6950-b84d-4bc9-98a0-8530e2666bcd</identification>
      </annotationBean>
      <date>2011-10-07 13:36:16.677 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2></annotations></dataflow><dataflow id="4fc654ce-22bb-41fa-bac0-b514769627b8" role="nested"><name>gets_associated_SNP_info_from_NCBI</name><inputPorts><port><name>SNPList</name><depth>1</depth><granularDepth>1</granularDepth><annotations><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.FreeTextDescription">
        <text />
      </annotationBean>
      <date>2010-01-22 13:26:27.843 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.MimeType">
        <text>text/plain</text>
      </annotationBean>
      <date>2010-01-22 13:26:27.796 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain></annotations></port></inputPorts><outputPorts><port><name>output</name><annotations><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.MimeType">
        <text>text/xml</text>
      </annotationBean>
      <date>2010-01-22 13:26:27.859 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain></annotations></port><port><name>build</name><annotations /></port></outputPorts><processors><processor><name>eUtilsDB</name><inputPorts /><outputPorts><port><name>value</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>stringconstant-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.stringconstant.StringConstantActivity</class><inputMap /><outputMap><map from="value" to="value" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean xmlns="">
  <value>snp</value>
</net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>0</initialDelay>
  <maxDelay>0</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross /></strategy></iteration></iterationStrategyStack></processor><processor><name>removeDuplicateSNPs</name><inputPorts><port><name>associatedSNPs</name><depth>1</depth></port></inputPorts><outputPorts><port><name>strippedlist</name><depth>1</depth><granularDepth>1</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>localworker-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.localworker.LocalworkerActivity</class><inputMap><map from="associatedSNPs" to="associatedSNPs" /></inputMap><outputMap><map from="strippedlist" to="strippedlist" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>associatedSNPs</name>
      <depth>1</depth>
      <mimeTypes>
        <string>l('text/plain')</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>strippedlist</name>
      <depth>1</depth>
      <mimeTypes />
      <granularDepth>1</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>import org.dom4j.Document;
import org.dom4j.Node;
import org.dom4j.io.SAXReader;

SAXReader reader = new SAXReader(false);
reader.setIncludeInternalDTDDeclarations(false);
reader.setIncludeExternalDTDDeclarations(false);

List strippedlist = new ArrayList();
for (int i = 0; i &lt; associatedSNPs.size(); i++) {
    String xmlText = associatedSNPs.get(i);
    Document document = reader.read(new StringReader(xmlText));
    Node node = document.selectSingleNode("AssociatedSNP");
    String rsId = node.attributeValue("rsId");
    rsId = rsId.replace("rs", "");
    if (strippedlist.contains(rsId) == false)
        strippedlist.add(rsId);
}</script>
  <dependencies />
  <localworkerName>org.embl.ebi.escience.scuflworkers.java.StringStripDuplicates</localworkerName>
</net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean></configBean><annotations><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.HostInstitution">
        <text>UserNameHere</text>
      </annotationBean>
      <date>2010-04-28 16:33:59.106 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain></annotations></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>0</initialDelay>
  <maxDelay>0</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="associatedSNPs" depth="1" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>eFetchXML</name><inputPorts><port><name>db</name><depth>0</depth></port><port><name>id</name><depth>0</depth></port></inputPorts><outputPorts><port><name>output</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>wsdl-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLInputSplitterActivity</class><inputMap><map from="id" to="id" /><map from="db" to="db" /></inputMap><outputMap><map from="output" to="output" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLSplitterConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>db</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/plain'</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>id</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/plain'</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>WebEnv</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/plain'</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>query_key</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/plain'</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>tool</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/plain'</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>email</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/plain'</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>retstart</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/plain'</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>retmax</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/plain'</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>rettype</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/plain'</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>strand</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/plain'</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>seq_start</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/plain'</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>seq_stop</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/plain'</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>complexity</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/plain'</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>report</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/plain'</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>output</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/xml'</string>
      </mimeTypes>
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <wrappedTypeXML>&lt;s:extensions xmlns:s="http://org.embl.ebi.escience/xscufl/0.1alpha"&gt;&lt;s:complextype optional="false" unbounded="false" typename="eFetchRequest" name="parameters" qname="{http://www.ncbi.nlm.nih.gov/soap/eutils/efetch}eFetchRequest"&gt;&lt;s:elements&gt;&lt;s:basetype optional="true" unbounded="false" typename="string" name="db" qname="{http://www.ncbi.nlm.nih.gov/soap/eutils/efetch}&amp;gt;eFetchRequest&amp;gt;db" /&gt;&lt;s:basetype optional="true" unbounded="false" typename="string" name="id" qname="{http://www.ncbi.nlm.nih.gov/soap/eutils/efetch}&amp;gt;eFetchRequest&amp;gt;id" /&gt;&lt;s:basetype optional="true" unbounded="false" typename="string" name="WebEnv" qname="{http://www.ncbi.nlm.nih.gov/soap/eutils/efetch}&amp;gt;eFetchRequest&amp;gt;WebEnv" /&gt;&lt;s:basetype optional="true" unbounded="false" typename="string" name="query_key" qname="{http://www.ncbi.nlm.nih.gov/soap/eutils/efetch}&amp;gt;eFetchRequest&amp;gt;query_key" /&gt;&lt;s:basetype optional="true" unbounded="false" typename="string" name="tool" qname="{http://www.ncbi.nlm.nih.gov/soap/eutils/efetch}&amp;gt;eFetchRequest&amp;gt;tool" /&gt;&lt;s:basetype optional="true" unbounded="false" typename="string" name="email" qname="{http://www.ncbi.nlm.nih.gov/soap/eutils/efetch}&amp;gt;eFetchRequest&amp;gt;email" /&gt;&lt;s:basetype optional="true" unbounded="false" typename="string" name="retstart" qname="{http://www.ncbi.nlm.nih.gov/soap/eutils/efetch}&amp;gt;eFetchRequest&amp;gt;retstart" /&gt;&lt;s:basetype optional="true" unbounded="false" typename="string" name="retmax" qname="{http://www.ncbi.nlm.nih.gov/soap/eutils/efetch}&amp;gt;eFetchRequest&amp;gt;retmax" /&gt;&lt;s:basetype optional="true" unbounded="false" typename="string" name="rettype" qname="{http://www.ncbi.nlm.nih.gov/soap/eutils/efetch}&amp;gt;eFetchRequest&amp;gt;rettype" /&gt;&lt;s:basetype optional="true" unbounded="false" typename="string" name="strand" qname="{http://www.ncbi.nlm.nih.gov/soap/eutils/efetch}&amp;gt;eFetchRequest&amp;gt;strand" /&gt;&lt;s:basetype optional="true" unbounded="false" typename="string" name="seq_start" qname="{http://www.ncbi.nlm.nih.gov/soap/eutils/efetch}&amp;gt;eFetchRequest&amp;gt;seq_start" /&gt;&lt;s:basetype optional="true" unbounded="false" typename="string" name="seq_stop" qname="{http://www.ncbi.nlm.nih.gov/soap/eutils/efetch}&amp;gt;eFetchRequest&amp;gt;seq_stop" /&gt;&lt;s:basetype optional="true" unbounded="false" typename="string" name="complexity" qname="{http://www.ncbi.nlm.nih.gov/soap/eutils/efetch}&amp;gt;eFetchRequest&amp;gt;complexity" /&gt;&lt;s:basetype optional="true" unbounded="false" typename="string" name="report" qname="{http://www.ncbi.nlm.nih.gov/soap/eutils/efetch}&amp;gt;eFetchRequest&amp;gt;report" /&gt;&lt;/s:elements&gt;&lt;/s:complextype&gt;&lt;/s:extensions&gt;</wrappedTypeXML>
</net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLSplitterConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>0</initialDelay>
  <maxDelay>0</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="db" depth="0" /><port name="id" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>fetchSNPs</name><inputPorts><port><name>parameters</name><depth>0</depth></port></inputPorts><outputPorts><port><name>attachmentList</name><depth>1</depth><granularDepth>1</granularDepth></port><port><name>parameters</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>wsdl-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.wsdl.WSDLActivity</class><inputMap><map from="parameters" to="parameters" /></inputMap><outputMap><map from="attachmentList" to="attachmentList" /><map from="parameters" to="parameters" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.wsdl.WSDLActivityConfigurationBean xmlns="">
  <wsdl>http://eutils.ncbi.nlm.nih.gov/entrez/eutils/soap/eutils.wsdl</wsdl>
  <operation>run_eFetch</operation>
</net.sf.taverna.t2.activities.wsdl.WSDLActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>4</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>0</initialDelay>
  <maxDelay>0</maxDelay>
  <maxRetries>1</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="parameters" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>getRsXML</name><inputPorts><port><name>xpath</name><depth>0</depth></port><port><name>xml-text</name><depth>0</depth></port></inputPorts><outputPorts><port><name>nodelistAsXML</name><depth>1</depth><granularDepth>1</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>localworker-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.localworker.LocalworkerActivity</class><inputMap><map from="xml-text" to="xml-text" /><map from="xpath" to="xpath" /></inputMap><outputMap><map from="nodelistAsXML" to="nodelistAsXML" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>xpath</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/plain'</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>xml-text</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/xml'</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>nodelist</name>
      <depth>1</depth>
      <mimeTypes>
        <string>l('text/plain')</string>
      </mimeTypes>
      <granularDepth>1</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>nodelistAsXML</name>
      <depth>1</depth>
      <mimeTypes>
        <string>l('text/plain')</string>
      </mimeTypes>
      <granularDepth>1</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies>
    <net.sf.taverna.raven.repository.BasicArtifact>
      <groupId>dom4j</groupId>
      <artifactId>dom4j</artifactId>
      <version>1.6</version>
      <hashCode>716010169</hashCode>
    </net.sf.taverna.raven.repository.BasicArtifact>
  </artifactDependencies>
  <script>import org.dom4j.Document;
import org.dom4j.Node;
import org.dom4j.io.SAXReader;

SAXReader reader = new SAXReader(false);
reader.setIncludeInternalDTDDeclarations(false);
reader.setIncludeExternalDTDDeclarations(false);

Document document = reader.read(new StringReader(xmltext));
List nodelist = document.selectNodes(xpath);

// Process the elements in the nodelist
ArrayList outputList = new ArrayList();
ArrayList outputXmlList = new ArrayList();

String val = null;
String xmlVal = null;
for (Iterator iter = nodelist.iterator(); iter.hasNext();) {
	Node element = (Node) iter.next();
	xmlVal = element.asXML();
	val = element.getStringValue();
	if (val != null &amp;&amp; !val.equals("")) {
		outputList.add(val);
		outputXmlList.add(xmlVal);
	}

}

List nodelist=outputList;
List nodelistAsXML=outputXmlList;</script>
  <dependencies>
    <string>dom4j:dom4j:1.6</string>
  </dependencies>
  <localworkerName>net.sourceforge.taverna.scuflworkers.xml.XPathTextWorker</localworkerName>
</net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>2</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="xpath" depth="0" /><port name="xml-text" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>rsPath</name><inputPorts /><outputPorts><port><name>value</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>stringconstant-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.stringconstant.StringConstantActivity</class><inputMap /><outputMap><map from="value" to="value" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean xmlns="">
  <value>/*[local-name(.)='eFetchResult']/*[local-name(.)='ExchangeSet']/*[local-name(.)='Rs']</value>
</net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy /></iteration></iterationStrategyStack></processor><processor><name>Transform_XML</name><inputPorts><port><name>inFileURL</name><depth>0</depth></port><port><name>xslFileURL</name><depth>0</depth></port></inputPorts><outputPorts><port><name>outputStr</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>localworker-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.localworker.LocalworkerActivity</class><inputMap><map from="xslFileURL" to="xslFileURL" /><map from="inFileURL" to="inFileURL" /></inputMap><outputMap><map from="outputStr" to="outputStr" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>xslFileURL</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/plain'</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>outFileURL</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/plain'</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>inFileURL</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/plain'</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>outputExt</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/plain'</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>outputStr</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/xml'</string>
      </mimeTypes>
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;

import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.SourceLocator;
import javax.xml.transform.Templates;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;

BufferedReader getReader (String fileUrl) throws IOException {
		InputStreamReader reader;
		try {
			reader = new FileReader(fileUrl);
		}
		catch (FileNotFoundException e) {
			// try a real URL instead
			URL url = new URL(fileUrl);
			reader = new InputStreamReader (url.openStream());
		}
		return new BufferedReader(reader);
	}
	
BufferedWriter getWriter (String fileUrl) throws IOException {
		Writer writer;
		try {
			writer = new FileWriter(fileUrl);
		}
		catch (FileNotFoundException e) {
			// try a real URL instead
			URL url = new URL(fileUrl);
			writer = new OutputStreamWriter (url.openConnection().getOutputStream());
		}
		return new BufferedWriter(writer);
	}
	
String xslFilename = xslFileURL;
String outFilename;
if (outFileURL != void) {
    outFilename = outFileURL;
}

String ext;
if (outputExt != void) {
    ext = outputExt;
}

if (((outFilename == null) || outFilename.equals("")) &amp;&amp; (ext != null)) {
		outFilename = FileNameUtil.replacePathExtension(inFileURL, ext);
}

// Create transformer factory
TransformerFactory factory = TransformerFactory.newInstance();

// Use the factory to create a template containing the xsl file
Templates template = factory.newTemplates(new StreamSource(getReader(xslFilename)));

// Use the template to create a transformer
Transformer xformer = template.newTransformer();

// Prepare the input and output files
Source source = new StreamSource(getReader(inFileURL));
StringWriter resultStr = new StringWriter();
Result result = new StreamResult(resultStr);

// Apply the xsl file to the source file and write the result to the
// output file
xformer.transform(source, result);

outputStr = resultStr.toString();

if ((outFilename != null) &amp;&amp; !outFilename.equals("")) {

	BufferedWriter out = getWriter(outFilename);

	out.write(outputStr);
	out.close();
}</script>
  <dependencies />
  <localworkerName>net.sourceforge.taverna.scuflworkers.xml.XSLTWorker</localworkerName>
</net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>2</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="inFileURL" depth="0" /><port name="xslFileURL" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>Create_and_populate_XML_file</name><inputPorts><port><name>content</name><depth>0</depth></port></inputPorts><outputPorts><port><name>filePath</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="content" to="content" /></inputMap><outputMap><map from="filePath" to="filePath" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>content</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/plain'</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>filePath</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>File f = File.createTempFile("taverna", ".xml");

BufferedWriter writer = new BufferedWriter(new FileWriter(f));
writer.write(content);
writer.close();

filePath = f.getCanonicalPath();</script>
  <dependencies />
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>0</initialDelay>
  <maxDelay>0</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="content" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>flattenSNPs</name><inputPorts><port><name>inputlist</name><depth>2</depth></port></inputPorts><outputPorts><port><name>outputlist</name><depth>1</depth><granularDepth>1</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>localworker-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.localworker.LocalworkerActivity</class><inputMap><map from="inputlist" to="inputlist" /></inputMap><outputMap><map from="outputlist" to="outputlist" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>inputlist</name>
      <depth>2</depth>
      <mimeTypes>
        <string>l(l(''))</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>[B</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>outputlist</name>
      <depth>1</depth>
      <mimeTypes>
        <string>l('')</string>
      </mimeTypes>
      <granularDepth>1</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>flatten(inputs, outputs, depth) {
	for (i = inputs.iterator(); i.hasNext();) {
	    element = i.next();
		if (element instanceof Collection &amp;&amp; depth &gt; 0) {
			flatten(element, outputs, depth - 1);
		} else {
			outputs.add(element);
		}
	}
}

outputlist = new ArrayList();

flatten(inputlist, outputlist, 1);</script>
  <dependencies />
  <localworkerName>org.embl.ebi.escience.scuflworkers.java.FlattenList</localworkerName>
</net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="inputlist" depth="2" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>mergeXML</name><inputPorts><port><name>dbSNP</name><depth>1</depth></port><port><name>snpXML</name><depth>1</depth></port></inputPorts><outputPorts><port><name>xmlOut</name><depth>1</depth><granularDepth>1</granularDepth></port><port><name>rsIds</name><depth>1</depth><granularDepth>1</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="dbSNP" to="dbSNP" /><map from="snpXML" to="snpXML" /></inputMap><outputMap><map from="xmlOut" to="xmlOut" /><map from="rsIds" to="rsIds" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>dbSNP</name>
      <depth>1</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>snpXML</name>
      <depth>1</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>xmlOut</name>
      <depth>1</depth>
      <mimeTypes />
      <granularDepth>1</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>rsIds</name>
      <depth>1</depth>
      <mimeTypes />
      <granularDepth>1</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>import org.dom4j.Document;
import org.dom4j.Node;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;

// Initialise Reader.
SAXReader reader = new SAXReader(false);
reader.setIncludeInternalDTDDeclarations(false);
reader.setIncludeExternalDTDDeclarations(false);

xmlOut = new ArrayList();
rsIds  = new ArrayList();

HashMap rsToDbSnp = new HashMap();

// Process dbSNP to document.
for (int i = 0; i &lt; dbSNP.size(); i++) {
    String xml = (String) dbSNP.get(i);
    Document dbSNPdoc = reader.read(new StringReader(xml));
    // Get rsId.
    Element root = dbSNPdoc.getRootElement();
    Node snpInfoNode = root.selectSingleNode("SnpInfo");
    String rsId = snpInfoNode.attributeValue("rsId");
    if (! rsId.startsWith("rs"))
        rsId = "rs" + rsId;
    // Get merge history.
    List mergeHistoryNodes = dbSNPdoc.selectNodes("//MergeHistory");
    for (int j = 0; j &lt; mergeHistoryNodes.size(); j++) {
        Node mergeHistoryNode = (Node) mergeHistoryNodes.get(j);
        String oldRsId = mergeHistoryNode.attributeValue("rsId");
        if (! oldRsId.startsWith("rs"))
            oldRsId = "rs" + oldRsId;
        rsToDbSnp.put(oldRsId, root);
    }
    rsToDbSnp.put(rsId, root);
    rsIds.add(rsId);
}

// Process snpXML.
for (int i = 0; i &lt; snpXML.size(); i++) {
    String xml = (String) snpXML.get(i);
    Document snpXMLdoc = reader.read(new StringReader(xml));
    // Get rsId.
    Element root = snpXMLdoc.getRootElement();
    String rsId = root.attributeValue("rsId");
    if (! rsId.startsWith("rs"))
        rsId = "rs" + rsId;
    
    Element dbSNPxml = (Element) rsToDbSnp.get(rsId);
    if (dbSNPxml == null)
        xmlOut.add(xml);
    else {
        Node snpInfoNode = dbSNPxml.selectSingleNode("SnpInfo");
	Node snpInfoNodeCopy = snpInfoNode.clone();
        snpInfoNodeCopy.detach();
        root.add(snpInfoNodeCopy);
        List snpRegionNodes = dbSNPxml.selectNodes("SnpRegion");
        for (int i = 0; i &lt; snpRegionNodes.size(); i++) {
            Node snpRegionNode = (Node) snpRegionNodes.get(i);
            Node snpRegionNodeCopy = snpRegionNode.clone();
            snpRegionNodeCopy.detach();
            root.add(snpRegionNodeCopy);
        }
        xmlOut.add(snpXMLdoc.asXML());
    }
}</script>
  <dependencies />
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><dot><port name="dbSNP" depth="1" /><port name="snpXML" depth="1" /></dot></strategy></iteration></iterationStrategyStack></processor><processor><name>addHapMapAttribute</name><inputPorts><port><name>snpXML</name><depth>1</depth></port><port><name>hapmapSNPs</name><depth>1</depth></port></inputPorts><outputPorts><port><name>snpXMLOut</name><depth>1</depth><granularDepth>1</granularDepth></port><port><name>dbSnpBuild</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="hapmapSNPs" to="hapmapSNPs" /><map from="snpXML" to="snpXML" /></inputMap><outputMap><map from="snpXMLOut" to="snpXMLOut" /><map from="dbSnpBuild" to="dbSnpBuild" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>snpXML</name>
      <depth>1</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>hapmapSNPs</name>
      <depth>1</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>snpXMLOut</name>
      <depth>1</depth>
      <mimeTypes />
      <granularDepth>1</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>dbSnpBuild</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>import org.dom4j.Document;
import org.dom4j.Node;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;

String getUcscBuild(String buildIn) {
    if (buildIn == null || buildIn.equals(""))
        return null;
    // Replace GRCh with NCBI.
    if (buildIn.toLowerCase().startsWith("grch"))
        buildIn = buildIn.toLowerCase().replace("grch", "NCBI");
    // Process NCBIxx to hgxx.
    if (buildIn.toLowerCase().startsWith("ncbi")) {
        int ncbiBuild = Integer.parseInt(buildIn.substring(4));
        int ncbiOffset = ncbiBuild - 34;
        if (ncbiOffset &lt; 0)
            continue;
        return "hg" + (ncbiOffset + 16);
        // Catch possible problem with an hg based build string.
    } else if (buildIn.toLowerCase().startsWith("hg")) {
        int hgBuild = Integer.parseInt(buildIn.substring(2));
        // Check for versions prior to 16.
        if (hgBuild &lt; 16) {
            return null;
        }
        return "hg" + hgBuild;
    } else {
        int num;
        int index;
        if ((index = buildIn.indexOf('.')) != -1) {
	    num = Integer.parseInt(buildIn.substring(0, index));
        } else {
            num = Integer.parseInt(buildIn);
        }
        if (num &lt; 34 &amp;&amp; num &gt; 15) { // Assume hg version.
            return "hg" + num;
        } else if (num &gt; 33) {
            // Assume NCBI version.
            int ncbiOffset = num - 34;
            return "hg" + (ncbiOffset + 16);
        } else {
            return null;
        }
    }
    return null;
}

// Initialise Reader.
SAXReader reader = new SAXReader(false);
reader.setIncludeInternalDTDDeclarations(false);
reader.setIncludeExternalDTDDeclarations(false);

snpXMLOut = new ArrayList();

for (int i = 0; i &lt; snpXML.size(); i++) {
    String xml = (String) snpXML.get(i);
    Document dbSNPdoc = reader.read(new StringReader(xml));

    Element root = dbSNPdoc.getRootElement();
    // Get dbSNP rsId.
    Element snpInfoNode = root.selectSingleNode("SnpInfo");
    if (snpInfoNode == null) {
        snpXMLOut.add(dbSNPdoc.asXML());
        continue;
    }
    String rsId = snpInfoNode.attributeValue("rsId");
    if (! rsId.startsWith("rs"))
        rsId = "rs" + rsId;

    // Check if rsId is in HapMap list.
    if (hapmapSNPs.contains(rsId))
        snpInfoNode.addAttribute("isHapMap", "true");
    else
        snpInfoNode.addAttribute("isHapMap", "false");

    // Get SnpRegions.
    List snpRegionNodes = root.selectNodes("SnpRegion");
    for (int i = 0; i &lt; snpRegionNodes.size(); i++) {
        Node snpRegionNode = (Node) snpRegionNodes.get(i);
        List locationNodes = snpRegionNode.selectNodes("Location");
        for (int j = 0; j &lt; locationNodes.size(); j++) {
            Node locationNode = (Node) locationNodes.get(j);
            // Check UCSC build.
            String ucscBuild = locationNode.attributeValue("ucscBuild");
            if (ucscBuild != null &amp;&amp; ! ucscBuild.equals(""))
                continue;
            String build = locationNode.attributeValue("build");
            if (build == null || build.equals(""))
                continue;
            String ucscBuild = getUcscBuild(build);
            if (ucscBuild == null || ucscBuild.equals(""))
                continue;
            // addAttribute.
            locationNode.addAttribute("ucscBuild", ucscBuild);
            dbSnpBuild = ucscBuild;
        }
    }

    snpXMLOut.add(dbSNPdoc.asXML());
}</script>
  <dependencies />
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><dot><port name="hapmapSNPs" depth="1" /><port name="snpXML" depth="1" /></dot></strategy></iteration></iterationStrategyStack></processor><processor><name>createRsXsl</name><inputPorts /><outputPorts><port><name>filePath</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap /><outputMap><map from="filePath" to="filePath" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <inputs />
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>filePath</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;
import org.dom4j.dom.DOMDocument;

void addXslAttribute(Element element, String name, String select1, String select2) {
	Element attribute = element.addElement("xsl:attribute").addAttribute("name", name);
	attribute.addElement("xsl:value-of").addAttribute("select", select1);
	if (select2 != null &amp;&amp; !select2.equals("")) {
		attribute.addElement("xsl:text").addText("_");
		attribute.addElement("xsl:value-of").addAttribute("select", select2);
	}
}

Document xslDoc = new DOMDocument();
// Add Root Element.
Element rootElement = xslDoc.addElement("xsl:stylesheet")
	.addAttribute("version", "2.0")
	.addAttribute("xmlns:xsl", "http://www.w3.org/1999/XSL/Transform")
	.addAttribute("xmlns:snp", "http://www.ncbi.nlm.nih.gov/soap/eutils/efetch");
rootElement.addNamespace("xsl", "http://www.w3.org/1999/XSL/Transform");
// Add Output Method Element.
rootElement.addElement("xsl:output")
	.addAttribute("method", "xml")
	.addAttribute("indent", "yes");
// Add root template Element.
Element rootTemplate = rootElement
	.addElement("xsl:template")
	.addAttribute("match", "/");
rootTemplate.addElement("xsl:apply-templates")
	.addAttribute("select", "snp:Rs");
// Add snp:Rs Element.
Element snpRs = rootElement.addElement("xsl:template")
	.addAttribute("match", "snp:Rs");
Element dbSnp = snpRs.addElement("xsl:element")
	.addAttribute("name", "dbSNP");
dbSnp.addElement("xsl:apply-templates")
	.addAttribute("select", "snp:Assembly");
Element snpInfo = dbSnp.addElement("xsl:element")
	.addAttribute("name", "SnpInfo");
addXslAttribute(snpInfo, "rsId", "@rsId", null);
addXslAttribute(snpInfo, "dbSnpBuild", "snp:Assembly/@dbSnpBuild", null);
snpInfo.addElement("xsl:apply-templates")
	.addAttribute("select", "snp:Create");
snpInfo.addElement("xsl:apply-templates")
	.addAttribute("select", "snp:Update");
snpInfo.addElement("xsl:apply-templates")
	.addAttribute("select", "snp:Sequence");
snpInfo.addElement("xsl:apply-templates")
	.addAttribute("select", "snp:MergeHistory");
// Add snp:Create Element.
Element snpCreate = rootElement.addElement("xsl:template")
	.addAttribute("match", "snp:Create");
Element created = snpCreate.addElement("xsl:element")
	.addAttribute("name", "Created");
created.addElement("xsl:value-of")
	.addAttribute("select", "@build");
// Add snp:Update Element.
Element snpUpdate = rootElement.addElement("xsl:template")
	.addAttribute("match", "snp:Update");
Element updated = snpUpdate.addElement("xsl:element")
	.addAttribute("name", "Updated");
updated.addElement("xsl:value-of")
	.addAttribute("select", "@build");
// Add snp:Sequence Element.
Element snpSequence = rootElement.addElement("xsl:template")
	.addAttribute("match", "snp:Sequence");
Element sequence = snpSequence.addElement("xsl:element")
	.addAttribute("name", "Sequence");
sequence.addElement("xsl:apply-templates")
	.addAttribute("select", "snp:Seq5");
sequence.addElement("xsl:apply-templates")
	.addAttribute("select", "snp:Observed");
sequence.addElement("xsl:apply-templates")
	.addAttribute("select", "snp:Seq3");
// Add snp:Seq5 Element.
Element snpSeq5 = rootElement.addElement("xsl:template")
	.addAttribute("match", "snp:Seq5");
Element seq5 = snpSeq5.addElement("xsl:element")
	.addAttribute("name", "Seq5");
seq5.addElement("xsl:value-of")
	.addAttribute("select", ".");
// Add snp:Observed Element.
Element snpObserved = rootElement.addElement("xsl:template")
	.addAttribute("match", "snp:Observed");
Element observed = snpObserved.addElement("xsl:element")
	.addAttribute("name", "Observed");
observed.addElement("xsl:value-of")
	.addAttribute("select", ".");
// Add snp:Seq3 Element.
Element snpSeq3 = rootElement.addElement("xsl:template")
	.addAttribute("match", "snp:Seq3");
Element seq3 = snpSeq3.addElement("xsl:element")
	.addAttribute("name", "Seq3");
seq3.addElement("xsl:value-of")
	.addAttribute("select", ".");
// Add snp::Assembly Element.
Element snpAssembly = rootElement.addElement("xsl:template")
	.addAttribute("match", "snp:Assembly");
Element refTest = snpAssembly.addElement("xsl:if")
	.addAttribute("test", "@reference");
Element curTest = refTest.addElement("xsl:if")
	.addAttribute("test", "@current");
curTest.addElement("xsl:apply-templates")
	.addAttribute("select", "snp:Component");
// Add snp:Component Element.
Element snpComponent = rootElement.addElement("xsl:template")
	.addAttribute("match", "snp:Component");
snpComponent.addElement("xsl:apply-templates")
	.addAttribute("name", "snp:MapLoc");
// Add snp:MapLoc Template.
Element snpMapLoc = rootElement.addElement("xsl:template")
	.addAttribute("match", "snp:MapLoc");
Element mapTest = snpMapLoc.addElement("xsl:if")
	.addAttribute("test", "@physMapInt &gt; 0");
Element snpRegion = mapTest.addElement("xsl:element")
	.addAttribute("name", "SnpRegion");
addXslAttribute(snpRegion, "id", "../@chromosome", "@physMapInt + 1");
Element location = snpRegion.addElement("xsl:element")
	.addAttribute("name", "Location");
addXslAttribute(location, "alnQuality", "@alnQuality", null);
addXslAttribute(location, "chromosome", "../@chromosome", null);
addXslAttribute(location, "start", "@physMapInt + 1", null);
addXslAttribute(location, "end", "@physMapInt + 1", null);
addXslAttribute(location, "build", "translate(../../@genomeBuild, '_', '.')", null);
// Add snpMergeHistory Element.
Element snpMergeHistory = rootElement.addElement("xsl:template")
	.addAttribute("match", "snp:MergeHistory");
Element mergeHistory = snpMergeHistory.addElement("xsl:element")
	.addAttribute("name", "MergeHistory");
addXslAttribute(mergeHistory, "buildId", "@buildId", null);
addXslAttribute(mergeHistory, "rsId", "@rsId", null);

File f = File.createTempFile("taverna", ".xsl");

BufferedWriter writer = new BufferedWriter(new FileWriter(f));
writer.write(xslDoc.asXML());
writer.close();

filePath = f.getCanonicalPath();</script>
  <dependencies />
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy /></iteration></iterationStrategyStack></processor><processor><name>getHapMartInfo</name><inputPorts /><outputPorts><port><name>dataset</name><depth>0</depth><granularDepth>0</granularDepth></port><port><name>virtualSchema</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>dataflow-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.dataflow.DataflowActivity</class><inputMap /><outputMap><map from="dataset" to="dataset" /><map from="virtualSchema" to="virtualSchema" /></outputMap><configBean encoding="dataflow"><dataflow ref="33838205-a676-4300-af63-813e22b5df37" /></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy /></iteration></iterationStrategyStack></processor><processor><name>checkHapMap</name><inputPorts><port><name>dataset</name><depth>0</depth></port><port><name>virtualSchema</name><depth>0</depth></port><port><name>rsIds</name><depth>1</depth></port></inputPorts><outputPorts><port><name>hapmapRsIds</name><depth>1</depth><granularDepth>1</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>dataflow-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.dataflow.DataflowActivity</class><inputMap><map from="dataset" to="dataset" /><map from="virtualSchema" to="virtualSchema" /><map from="rsIds" to="rsIds" /></inputMap><outputMap><map from="hapmapRsIds" to="hapmapRsIds" /></outputMap><configBean encoding="dataflow"><dataflow ref="cdfa8c3b-8e12-4e91-bed6-cbf331ea9c29" /></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><dot><port name="dataset" depth="0" /><port name="virtualSchema" depth="0" /><port name="rsIds" depth="1" /></dot></strategy></iteration></iterationStrategyStack></processor></processors><conditions /><datalinks><datalink><sink type="processor"><processor>removeDuplicateSNPs</processor><port>associatedSNPs</port></sink><source type="dataflow"><port>SNPList</port></source></datalink><datalink><sink type="processor"><processor>eFetchXML</processor><port>db</port></sink><source type="processor"><processor>eUtilsDB</processor><port>value</port></source></datalink><datalink><sink type="processor"><processor>eFetchXML</processor><port>id</port></sink><source type="processor"><processor>removeDuplicateSNPs</processor><port>strippedlist</port></source></datalink><datalink><sink type="processor"><processor>fetchSNPs</processor><port>parameters</port></sink><source type="processor"><processor>eFetchXML</processor><port>output</port></source></datalink><datalink><sink type="processor"><processor>getRsXML</processor><port>xpath</port></sink><source type="processor"><processor>rsPath</processor><port>value</port></source></datalink><datalink><sink type="processor"><processor>getRsXML</processor><port>xml-text</port></sink><source type="processor"><processor>fetchSNPs</processor><port>parameters</port></source></datalink><datalink><sink type="processor"><processor>Transform_XML</processor><port>inFileURL</port></sink><source type="processor"><processor>Create_and_populate_XML_file</processor><port>filePath</port></source></datalink><datalink><sink type="processor"><processor>Transform_XML</processor><port>xslFileURL</port></sink><source type="processor"><processor>createRsXsl</processor><port>filePath</port></source></datalink><datalink><sink type="processor"><processor>Create_and_populate_XML_file</processor><port>content</port></sink><source type="processor"><processor>flattenSNPs</processor><port>outputlist</port></source></datalink><datalink><sink type="processor"><processor>flattenSNPs</processor><port>inputlist</port></sink><source type="processor"><processor>getRsXML</processor><port>nodelistAsXML</port></source></datalink><datalink><sink type="processor"><processor>mergeXML</processor><port>dbSNP</port></sink><source type="processor"><processor>Transform_XML</processor><port>outputStr</port></source></datalink><datalink><sink type="processor"><processor>mergeXML</processor><port>snpXML</port></sink><source type="dataflow"><port>SNPList</port></source></datalink><datalink><sink type="processor"><processor>addHapMapAttribute</processor><port>snpXML</port></sink><source type="processor"><processor>mergeXML</processor><port>xmlOut</port></source></datalink><datalink><sink type="processor"><processor>addHapMapAttribute</processor><port>hapmapSNPs</port></sink><source type="processor"><processor>checkHapMap</processor><port>hapmapRsIds</port></source></datalink><datalink><sink type="processor"><processor>checkHapMap</processor><port>dataset</port></sink><source type="processor"><processor>getHapMartInfo</processor><port>dataset</port></source></datalink><datalink><sink type="processor"><processor>checkHapMap</processor><port>virtualSchema</port></sink><source type="processor"><processor>getHapMartInfo</processor><port>virtualSchema</port></source></datalink><datalink><sink type="processor"><processor>checkHapMap</processor><port>rsIds</port></sink><source type="processor"><processor>mergeXML</processor><port>rsIds</port></source></datalink><datalink><sink type="dataflow"><port>output</port></sink><source type="processor"><processor>addHapMapAttribute</processor><port>snpXMLOut</port></source></datalink><datalink><sink type="dataflow"><port>build</port></sink><source type="processor"><processor>addHapMapAttribute</processor><port>dbSnpBuild</port></source></datalink></datalinks><annotations><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.DescriptiveTitle">
        <text>gets associated SNP info from NCBI</text>
      </annotationBean>
      <date>2010-02-17 12:17:27.734 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.Author">
        <text>Paul Martin</text>
      </annotationBean>
      <date>2010-01-22 13:26:31.265 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.FreeTextDescription">
        <text />
      </annotationBean>
      <date>2010-01-22 13:26:31.265 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>4fc654ce-22bb-41fa-bac0-b514769627b8</identification>
      </annotationBean>
      <date>2012-03-19 11:12:41.815 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>7ce1555c-38cf-48e9-aafd-49c201204347</identification>
      </annotationBean>
      <date>2011-10-07 12:24:20.566 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>5b7cc1d3-6e9c-49df-b19e-872bdeba068d</identification>
      </annotationBean>
      <date>2012-01-24 10:31:33.961 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2></annotations></dataflow><dataflow id="cd4d2d50-1ab7-4f8d-960f-cc0647bd3e89" role="nested"><name>Convert_Genomic_Co_ordinates</name><inputPorts><port><name>parameters</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>chainXML</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port></inputPorts><outputPorts><port><name>xmlOut</name><annotations /></port></outputPorts><processors><processor><name>liftOver</name><inputPorts><port><name>contiguous</name><depth>0</depth></port><port><name>minMatch</name><depth>0</depth></port><port><name>xmlIn</name><depth>0</depth></port><port><name>nodesToConvert</name><depth>0</depth></port><port><name>chainXmlString</name><depth>0</depth></port></inputPorts><outputPorts><port><name>xmlOut</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="nodesToConvert" to="nodesToConvert" /><map from="xmlIn" to="xmlIn" /><map from="contiguous" to="contiguous" /><map from="chainXmlString" to="chainXmlString" /><map from="minMatch" to="minMatch" /></inputMap><outputMap><map from="xmlOut" to="xmlOut" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>xmlIn</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>contiguous</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>minMatch</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>chainXmlString</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>nodesToConvert</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>xmlOut</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>import org.dom4j.Document;
import org.dom4j.Element;
import org.dom4j.Node;
import org.dom4j.io.SAXReader;

String mapRegion(String position, Node chain, Double minMatch) throws Exception {
    int [] binOffsetsExtended = {4096+512+64+8+1, 512+64+8+1, 64+8+1, 8+1, 1, 0};
    int [] binOffsets = {512+64+8+1, 64+8+1, 8+1, 1, 0};
    int _binFirstShift = 17;
    int _binNextShift = 3;

    // Split position into component parts.
    int i1 = position.indexOf(':');
    int i2 = position.indexOf('-');
    String chr = position.substring(0, i1);
    int start = Integer.parseInt(position.substring(i1 + 1, i2));
    int end = Integer.parseInt(position.substring(i2 + 1));

    if (start &gt; end)
        throw new Exception("start coordinate is after end coordinate (chromStart &gt; chromEnd)");

    // Get chromosome Node.
    Node chromNode = chain.selectSingleNode("Chromosome[@chromosome='" + chr + "']");
    if (chromNode == null)
        throw new Exception("No mapping information for chromosome " + chr);

    if (minMatch == null || minMatch &lt;= 0)
        minMatch = 0.95;
    else if (minMatch &gt; 1)
        minMatch = 1.0;

    start--;

    int startTmp = start;
    int endTmp   = end;
    if (start &lt; Integer.parseInt(chromNode.valueOf("@min_pos")))
        startTmp = Integer.parseInt(chromNode.valueOf("@min_pos"));
    if (end &gt; Integer.parseInt(chromNode.valueOf("@max_pos")))
        endTmp = Integer.parseInt(chromNode.valueOf("@max_pos"));
     // Find bin for position.
    int startBin = startTmp &gt;&gt; _binFirstShift;
    int endBin = (endTmp-1) &gt;&gt; _binFirstShift;
    ArrayList matchingChains = new ArrayList();
    for (int i = 0; i &lt; binOffsetsExtended.length; i++) {
        int offset = binOffsetsExtended[i];
        for (int j = startBin + offset; j &lt;= endBin + offset; j++) {
            Node binNode = chromNode.selectSingleNode("Bin[@id=" + j +"]");
            if (binNode == null)
                continue;
            List chains = binNode.selectNodes("Chain");
            for (Iterator iter = chains.listIterator(); iter.hasNext(); ) {
                Node chainNode = (Node) iter.next();
                int s = Math.max(Integer.parseInt(chainNode.valueOf("@tStart")), start);
                int e = Math.min(Integer.parseInt(chainNode.valueOf("@tEnd")), end);
                int rangeIntersection = e-s;
                if (rangeIntersection &gt; 0)
                    matchingChains.add(chainNode);
            }
        }
        startBin &gt;&gt;= _binNextShift;
        endBin &gt;&gt;= _binNextShift;
    }
    double minMatchSize = minMatch * (end - start);

    ArrayList hits = new ArrayList();
    ArrayList partial = new ArrayList();
    ArrayList missed = new ArrayList();
    for (int i = 0; i &lt; matchingChains.size(); i++) {
        Node chainNode = (Node) matchingChains.get(i);
        int total = 0, one;
        // Parse ChainBlocks
        List chainBlockNodes = chainNode.selectNodes("ChainBlock");
        for (int j = 0; j &lt; chainBlockNodes.size(); j++) {
            Node chainBlockNode = (Node) chainBlockNodes.get(j);
            int s = Math.max(Integer.parseInt(chainBlockNode.valueOf("@tStart")), start);
            int e = Math.min(Integer.parseInt(chainBlockNode.valueOf("@tEnd")), end);
            one = e-s;
            if (one &gt; 0)
                total += one;
        }
        if (total &gt;= minMatchSize)
            hits.add(chainNode);
        else if (total &gt; 0)
            partial.add(chainNode);
        else
            missed.add(chainNode);
    }

    // Check if hits or partial.
    if (hits.size() == 0)
        if (partial.size() == 0)
            return "Error: Deleted in new";
        else if (partial.size() == 1)
            return "Error: Partially deleted in new";
        else
            return "Error: Split in new";
    else if (hits.size() &gt; 1)
        return "Error: Duplicated in new";
    // Found ok hit.
    Node hit = (Node) hits.get(0);
    int oldSize = end - start;
    // Get subchain by start end.
    List chainBlockNodes = hit.selectNodes("ChainBlock");
    Node firstBlock;
    ArrayList blocks = new ArrayList();
    int tStart = Integer.MAX_VALUE, tEnd = Integer.MIN_VALUE, qStart = Integer.MAX_VALUE, qEnd = Integer.MIN_VALUE;

    int j;
    for (j = 0; j &lt; chainBlockNodes.size(); j++) {
        firstBlock = (Node) chainBlockNodes.get(j);
        if (Integer.parseInt(firstBlock.valueOf("@tEnd")) &gt; start)
            break;
    }
    if (start &lt;= Integer.parseInt(hit.valueOf("@tStart")) &amp;&amp;
            end &gt;= Integer.parseInt(hit.valueOf("@tEnd"))) {
        qStart = Integer.parseInt(hit.valueOf("@qStart"));
        qEnd = Integer.parseInt(hit.valueOf("@qEnd"));
        // Parse blocks to get new position.
        int newSize = 0;
        for (int k = 0; k &lt; chainBlockNodes.size(); k++) {
            Node block = (Node) chainBlockNodes.get(k);
            newSize += Integer.parseInt(block.valueOf("@qEnd")) - Integer.parseInt(block.valueOf("@qStart"));
        }

        qStart++; // Fix qStart to be 1-indexed.
        if (newSize &lt; oldSize * minMatch)
            return "Error: Insufficient coverage";
        if (hit.valueOf("@qStrand").equals("+"))
            return hit.valueOf("@qName") + ":" + qStart +"-" + qEnd;
    } else {
        int newSize = 0;
        for (int k = j; k &lt; chainBlockNodes.size(); k++) {
            Node oldBlock = (Node) chainBlockNodes.get(k);
            if (Integer.parseInt(oldBlock.valueOf("@tStart")) &gt;= end)
                break;
            // blockPos = {qStart, qEnd, tStart, tEnd}
            int [] blockPos = {Integer.parseInt(oldBlock.valueOf("@qStart")),
                               Integer.parseInt(oldBlock.valueOf("@qEnd")),
                               Integer.parseInt(oldBlock.valueOf("@tStart")),
                               Integer.parseInt(oldBlock.valueOf("@tEnd"))};
            if (Integer.parseInt(oldBlock.valueOf("@tStart")) &lt; start) {
                blockPos[0] += start - Integer.parseInt(oldBlock.valueOf("@tStart"));
                blockPos[2] = tStart;
            }
            if (Integer.parseInt(oldBlock.valueOf("@tEnd")) &gt; end) {
                blockPos[1] -= Integer.parseInt(oldBlock.valueOf("@tEnd")) - end;
                blockPos[3] = end;
            }
            newSize += blockPos[1] - blockPos[0];
            if (qStart &gt; blockPos[0])
                qStart = blockPos[0];
            if (qEnd &lt; blockPos[1])
                qEnd = blockPos[1];
        }
        if (newSize &lt; oldSize * minMatch)
            return "Error: Insufficient coverage";
        else if (hit.valueOf("@qStrand").equals("+")) {
            qStart++; // Fix qStart to be 1-indexed.
            return hit.valueOf("@qName") + ":" + qStart + "-" + qEnd;
        } else {
            int qSize = Integer.parseInt(hit.valueOf("@qSize"));
            return hit.valueOf("@qName") + ":" + (qSize - qEnd + 1) + "-" + (qSize - qStart);
        }
    }

    return null;
}

// Fix minMatch
double minMatchDbl = 0.95;
if (minMatch != void)
    minMatchDbl = Double.parseDouble(minMatch);

// Initialise Reader.
SAXReader reader = new SAXReader(false);
reader.setIncludeInternalDTDDeclarations(false);
reader.setIncludeExternalDTDDeclarations(false);

// Read chainXML.
Document chainXml = reader.read(new StringReader(chainXmlString));
Node docRoot = chainXml.getRootElement();

String fromBuild = docRoot.attributeValue("from");
String toBuild   = docRoot.attributeValue("to");

int f = Integer.parseInt(fromBuild.substring(2));
int t = Integer.parseInt(toBuild.substring(2));

// Read XMLInput.
Document doc = reader.read(new StringReader(xmlIn));

boolean contig = true;
if (contiguous != void)
    contig = Boolean.parseBoolean(contiguous);

// Select all Location Node regardless of document structure.
String xPath = "//" + nodesToConvert;
List nodeList = doc.selectNodes(xPath);
for (int i = 0; i &lt; nodeList.size(); i++) {
    Node parentNode = (Node) nodeList.get(i);

    List locationNodes = parentNode.selectNodes("Location[@ucscBuild='" + fromBuild + "']");
    for (int j = 0; j &lt; locationNodes.size(); j++) {
        Element locationNode = (Element) locationNodes.get(j);

        String chr = locationNode.valueOf("@chromosome");
        if (! chr.startsWith("chr"))
            chr = "chr" + chr;
        String start = locationNode.attributeValue("start");
        String end   = locationNode.attributeValue("end");
	int startPos = Integer.parseInt(start);
        int endPos   = Integer.parseInt(end);

        String error = null;
        ArrayList positions = new ArrayList();
        if (contig || (endPos - startPos &lt; 2)) {
            positions.add(chr + ":" + start + "-" + end);
        } else {
            positions.add(chr + ":" + start + "-" + (startPos + 1));
            positions.add(chr + ":" + (endPos - 1) + "-" + end);
        }

        ArrayList newPositions = new ArrayList();
        for (int k = 0; k &lt; positions.size(); k++) {
            String newPos = (String) positions.get(k);
            if (f &gt; t &amp;&amp; (f - t &gt; 1)) {
                while (f &gt; t) {
                    Node chainNode = docRoot.selectSingleNode("LiftOverMap[@conversion='hg" + f + "ToHg" + (f - 1) + "']");
                    newPos = mapRegion(newPos, chainNode, minMatchDbl);
                    if (newPos == null || newPos.startsWith("Error"))
                        break;
                    f--;
                }
            } else {
                String toCap = "H" + toBuild.substring(1);
                Node chainNode = docRoot.selectSingleNode("LiftOverMap[@conversion='" + fromBuild + "To" + toCap + "']");
                newPos = mapRegion(newPos, chainNode, minMatchDbl);
            }
            newPositions.add(newPos);
        }

        // Check for errors and combine if neccessary.
        String mappedPos;
        boolean contig = Boolean.parseBoolean(contiguous);
        if (contig) {
            mappedPos = (String) newPositions.get(0);
        } else if (newPositions.size() == 2) {
            String startPosition = (String) newPositions.get(0);
            String endPosition   = (String) newPositions.get(1);

            if (startPosition.startsWith("Error")) {
                mappedPos = startPosition;
            } else if (endPosition.startsWith("Error")) {
                mappedPos = endPosition;
            } else {
                int i1a = startPosition.indexOf(':');
                int i1b = startPosition.indexOf('-');
                int i2a = endPosition.indexOf(':');
                int i2b = endPosition.indexOf('-');

                int startA = Integer.parseInt(startPosition.substring(i1a + 1, i1b));
                int startB = Integer.parseInt(endPosition.substring(i2a + 1, i2b));
                int endA   = Integer.parseInt(startPosition.substring(i1b + 1));
                int endB   = Integer.parseInt(endPosition.substring(i2b + 1));

                if (startA &lt; startB)
                    mappedPos = startPosition.substring(0, i1a) + ':' + startA + '-' + endB;
                else
                    mappedPos = startPosition.substring(0, i1a) + ':' + startB + '-' + endA;
            }
        } else {
            mappedPos = "Error: Incorrect input!";
        }

        // Add new MapLoc.
        if (mappedPos.startsWith("Error") ) {
            parentNode.addElement("Location")
                      .addAttribute("error", mappedPos)
                      .addAttribute("ucscBuild", toBuild);
        } else {
            int i1 = mappedPos.indexOf(':');
            int i2 = mappedPos.indexOf('-');
            parentNode.addElement("Location")
                      .addAttribute("chromosome", mappedPos.substring(0, i1))
                      .addAttribute("start",      mappedPos.substring(i1 + 1, i2))
                      .addAttribute("end",        mappedPos.substring(i2 + 1))
                      .addAttribute("ucscBuild",      toBuild);
        }
    }
}

xmlOut = doc.asXML();</script>
  <dependencies />
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="contiguous" depth="0" /><port name="minMatch" depth="0" /><port name="xmlIn" depth="0" /><port name="nodesToConvert" depth="0" /><port name="chainXmlString" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>parseParameters</name><inputPorts><port><name>paramXML</name><depth>0</depth></port></inputPorts><outputPorts><port><name>contiguous</name><depth>0</depth><granularDepth>0</granularDepth></port><port><name>minMatch</name><depth>0</depth><granularDepth>0</granularDepth></port><port><name>xmlIn</name><depth>0</depth><granularDepth>0</granularDepth></port><port><name>rootNode</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>localworker-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.localworker.LocalworkerActivity</class><inputMap><map from="paramXML" to="paramXML" /></inputMap><outputMap><map from="rootNode" to="rootNode" /><map from="xmlIn" to="xmlIn" /><map from="contiguous" to="contiguous" /><map from="minMatch" to="minMatch" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>paramXML</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/xml'</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>toBuild</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>fromBuild</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>xmlIn</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>contiguous</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>minMatch</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>rootNode</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>import org.dom4j.Document;
import org.dom4j.Node;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;

String getParameter(Element root, String parameterName) {
    List nodeList = root.selectNodes("Parameter[@name='" + parameterName + "']");
    if (nodeList.size() == 1) {
        Element parameterNode = (Element) nodeList.get(0);
        String parameter = "";
        if (parameterNode.isTextOnly())
            parameter = parameterNode.getText();
        else {
            List paramElements = parameterNode.elements();
            for (int i = 0; i &lt; paramElements.size(); i++) {
                parameter += ((Element) paramElements.get(i)).asXML();
            }
        }
        if (parameter == null || parameter.equals(""))
            return null;
        else
            return parameter;
    } else if (nodeList.size() &gt; 1) {
        throw new Exception("Multiple parameters matching " + parameterName + "!");
    }
    return null;
}

SAXReader reader = new SAXReader(false);
reader.setIncludeInternalDTDDeclarations(false);
reader.setIncludeExternalDTDDeclarations(false);

Document document = reader.read(new StringReader(paramXML));
Element root = document.getRootElement();

// Set parameter defaults.
toBuild    = "hg19";
fromBuild  = "hg18";
contiguous = "true";
minMatch   = "0.95";
xmlIn      = "";
chainXML   = "";
rootNode   = "";

// Get parameters from XML.
String paramTmp;
// toBuild.
if ((paramTmp = getParameter(root, "toBuild")) != null)
    toBuild = paramTmp;
// fromBuild.
if ((paramTmp = getParameter(root, "fromBuild")) != null)
    fromBuild = paramTmp;
// contiguous.
if ((paramTmp = getParameter(root, "contiguous")) != null)
    contiguous = paramTmp;
// minMatch.
if ((paramTmp = getParameter(root, "minMatch")) != null)
    minMatch = paramTmp;
// xmlIn.
if ((paramTmp = getParameter(root, "xmlIn")) != null)
    xmlIn = paramTmp;
// rootNode.
if ((paramTmp = getParameter(root, "rootNode")) != null)
    rootNode = paramTmp;</script>
  <dependencies>
    <string>dom4j:dom4j:1.6</string>
  </dependencies>
  <localworkerName>net.sourceforge.taverna.scuflworkers.xml.XPathTextWorker</localworkerName>
</net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean></configBean><annotations><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.HostInstitution">
        <text>UserNameHere</text>
      </annotationBean>
      <date>2010-05-05 16:53:22.183 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain></annotations></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="paramXML" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor></processors><conditions /><datalinks><datalink><sink type="processor"><processor>liftOver</processor><port>contiguous</port></sink><source type="processor"><processor>parseParameters</processor><port>contiguous</port></source></datalink><datalink><sink type="processor"><processor>liftOver</processor><port>minMatch</port></sink><source type="processor"><processor>parseParameters</processor><port>minMatch</port></source></datalink><datalink><sink type="processor"><processor>liftOver</processor><port>xmlIn</port></sink><source type="processor"><processor>parseParameters</processor><port>xmlIn</port></source></datalink><datalink><sink type="processor"><processor>liftOver</processor><port>nodesToConvert</port></sink><source type="processor"><processor>parseParameters</processor><port>rootNode</port></source></datalink><datalink><sink type="processor"><processor>liftOver</processor><port>chainXmlString</port></sink><source type="dataflow"><port>chainXML</port></source></datalink><datalink><sink type="processor"><processor>parseParameters</processor><port>paramXML</port></sink><source type="dataflow"><port>parameters</port></source></datalink><datalink><sink type="dataflow"><port>xmlOut</port></sink><source type="processor"><processor>liftOver</processor><port>xmlOut</port></source></datalink></datalinks><annotations><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.DescriptiveTitle">
        <text>Convert Genomic Co-ordinates</text>
      </annotationBean>
      <date>2010-04-26 16:01:35.910 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.Author">
        <text>Paul Martin</text>
      </annotationBean>
      <date>2010-04-26 16:00:57.252 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.FreeTextDescription">
        <text>Converts genomic co-ordinates between builds for the same species. Requires XML Locations as input.</text>
      </annotationBean>
      <date>2010-04-26 16:02:30.153 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>cd4d2d50-1ab7-4f8d-960f-cc0647bd3e89</identification>
      </annotationBean>
      <date>2011-10-07 12:24:21.91 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2></annotations></dataflow><dataflow id="3e68e183-ce8e-4ade-86d7-01cde22fb9a9" role="nested"><name>Workflow19</name><inputPorts><port><name>associatedSnp</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port></inputPorts><outputPorts><port><name>out</name><annotations /></port></outputPorts><processors><processor><name>getRecombinationHotspots</name><inputPorts><port><name>driver</name><depth>0</depth></port><port><name>url</name><depth>0</depth></port><port><name>userid</name><depth>0</depth></port><port><name>hapmap5sql</name><depth>0</depth></port><port><name>hapmap3sql</name><depth>0</depth></port><port><name>perlegen5sql</name><depth>0</depth></port><port><name>perlegen3sql</name><depth>0</depth></port><port><name>associatedSnpXML</name><depth>0</depth></port></inputPorts><outputPorts><port><name>associatedSNPOut</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>localworker-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.localworker.LocalworkerActivity</class><inputMap><map from="hapmap3sql" to="hapmap3sql" /><map from="associatedSnpXML" to="associatedSnpXML" /><map from="hapmap5sql" to="hapmap5sql" /><map from="userid" to="userid" /><map from="driver" to="driver" /><map from="perlegen5sql" to="perlegen5sql" /><map from="perlegen3sql" to="perlegen3sql" /><map from="url" to="url" /></inputMap><outputMap><map from="associatedSNPOut" to="associatedSNPOut" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>driver</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>userid</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>url</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>hapmap5sql</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>hapmap3sql</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>perlegen5sql</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>perlegen3sql</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>associatedSnpXML</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>associatedSNPOut</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>// SQL imports.
import java.sql.Driver;
import java.sql.DriverManager;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;

// XML imports.
import org.dom4j.Document;
import org.dom4j.Node;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;

if ((driver == void) || (driver == null) || driver.equals(""))
	throw new RuntimeException("The driver must be specified");

if ((url == void) || (url == null) || url.equals(""))
	throw new RuntimeException("The url must be specified");

Class c = Thread.currentThread().getContextClassLoader().loadClass(driver);
if (c == null)
	throw new RuntimeException("Class " + driver + " not found");

Driver d = c.newInstance();
if (d == null)
	throw new RuntimeException("Could not create instance of driver");

Properties p = new Properties();
if ((userid == void) || (userid == null))
	userid = "";

p.setProperty("user", userid);

Connection con = null;
PreparedStatement psHapmap5 = null;
PreparedStatement psHapmap3 = null;
PreparedStatement psPerlegen5 = null;
PreparedStatement psPerlegen3 = null;
ResultSet rs = null; // Reuse.
try {
	// Connect and prepare statements.
	con = d.connect(url, p);
	psHapmap5   = con.prepareStatement(hapmap5sql);
	psHapmap3   = con.prepareStatement(hapmap3sql);
	psPerlegen5 = con.prepareStatement(perlegen5sql);
	psPerlegen3 = con.prepareStatement(perlegen3sql);

        // Parse associatedSnpXML.
	SAXReader reader = new SAXReader(false);
	reader.setIncludeInternalDTDDeclarations(false);
	reader.setIncludeExternalDTDDeclarations(false);
	Document document = reader.read(new StringReader(associatedSnpXML));
	Element root = document.getRootElement();

	// Get and process LDRegion Nodes.
	List ldRegionNodes = root.selectNodes("LDRegion");
	for (int i = 0; i &lt; ldRegionNodes.size(); i++) {
		Node ldRegionNode = (Node) ldRegionNodes.get(i);
		String id = ldRegionNode.attributeValue("id");
		// Get correct Location Node 
		Node locationNode = ldRegionNode.selectSingleNode("Location[@ucscBuild='hg17']");
		if (locationNode == null)
			continue;
		// Store Location info.
		String chr   = locationNode.attributeValue("chromosome");
		String start = locationNode.attributeValue("start");
		String end   = locationNode.attributeValue("end");
		String error = locationNode.attributeValue("error");

		if (chr == null || start == null || end == null || error != null)
			continue;

		// Hotspot vars.
		int hapmap5start = -1, hapmap5end = -1, hapmap3start = -1, hapmap3end = -1;
		int perlegen5start = -1, perlegen5end = -1, perlegen3start = -1, perlegen3end = -1;
		// Get Hotspots.
		psHapmap5.setObject(1, chr);
		psHapmap5.setObject(2, start);
		rs = psHapmap5.executeQuery();
		if (rs.first()) { // Only expecting 0 or 1 results.
			hapmap5start = rs.getInt(1) + 1; // UCSC starts are 0 indexed.
			hapmap5end   = rs.getInt(2);
		}
		rs.close();

		psHapmap3.setObject(1, chr);
		psHapmap3.setObject(2, end);
		rs = psHapmap3.executeQuery();
		if (rs.first()) { // Only expecting 0 or 1 results.
			hapmap3start = rs.getInt(1) + 1; // UCSC starts are 0 indexed.
			hapmap3end   = rs.getInt(2);
		}
		rs.close();

		psPerlegen5.setObject(1, chr);
		psPerlegen5.setObject(2, start);
		rs = psPerlegen5.executeQuery();
		if (rs.first()) { // Only expecting 0 or 1 results.
			perlegen5start = rs.getInt(1) + 1; // UCSC starts are 0 indexed.
			perlegen5end   = rs.getInt(2);
		}
		rs.close();

		psPerlegen3.setObject(1, chr);
		psPerlegen3.setObject(2, end);
		rs = psPerlegen3.executeQuery();
		if (rs.first()) { // Only expecting 0 or 1 results.
			perlegen3start = rs.getInt(1) + 1; // UCSC starts are 0 indexed.
			perlegen3end   = rs.getInt(2);
		}
		rs.close();

		// Compare hotspots. Select hotspot nearest to the LDRegion regardless of extent.
		// If equal then compare extents and select furthest. If still equal hapmap.
		int hotspot5start, hotspot5end, hotspot3start, hotspot3end;
		String hotspot5type = "LD";
		String hotspot3type = "LD";
		// Hotspot 5'.
		if (hapmap5start == -1 &amp;&amp; hapmap5end == -1 &amp;&amp; perlegen5start == -1 &amp;&amp; perlegen5end == -1) {
			hotspot5start = start;
			hotspot5end   = start;
		} else if (hapmap5start == -1 &amp;&amp; hapmap5end == -1) {
			hotspot5start = perlegen5start;
			hotspot5end   = perlegen5end;
		} else if (perlegen5start == -1 &amp;&amp; perlegen5end == -1) {
			hotspot5start = hapmap5start;
			hotspot5end   = hapmap5end;
		} else if (hapmap5end &gt; perlegen5end) {
			hotspot5start = hapmap5start;
			hotspot5end   = hapmap5end;
			hotspot5type  = "HapMap";
		} else if (perlegen5end &gt; hapmap5end) {
			hotspot5start = perlegen5start;
			hotspot5end   = perlegen5end;
			hotspot5type  = "Perlegen";
		} else if (hapmap5start &lt; perlegen5start) {
			hotspot5start = hapmap5start;
			hotspot5end   = hapmap5end;
			hotspot5type  = "HapMap";
		} else if (perlegen5start &lt; hapmap5start) {
			hotspot5start = perlegen5start;
			hotspot5end   = perlegen5end;
			hotspot5type  = "Perlegen";
		} else {
			hotspot5start = hapmap5start;
			hotspot5end   = hapmap5end;
			hotspot5type  = "HapMap";
		}
		// Hotspot 3'.
		if (hapmap3start == -1 &amp;&amp; hapmap3end == -1 &amp;&amp; perlegen3start == -1 &amp;&amp; perlegen3end == -1) {
			hotspot3start = start;
			hotspot3end   = start;
		} else if (hapmap3start == -1 &amp;&amp; hapmap3end == -1) {
			hotspot3start = perlegen3start;
			hotspot3end   = perlegen3end;
		} else if (perlegen3start == -1 &amp;&amp; perlegen3end == -1) {
			hotspot3start = hapmap3start;
			hotspot3end   = hapmap3end;
		} else if (hapmap3start &lt; perlegen3start) {
			hotspot3start = hapmap3start;
			hotspot3end   = hapmap3end;
			hotspot3type  = "HapMap";
		} else if (perlegen3start &lt; hapmap3start) {
			hotspot3start = perlegen3start;
			hotspot3end   = perlegen3end;
			hotspot3type  = "Perlegen";
		} else if (hapmap3end &gt; perlegen3end) {
			hotspot3start = hapmap3start;
			hotspot3end   = hapmap3end;
			hotspot3type  = "HapMap";
		} else if (perlegen3end &gt; hapmap3end) {
			hotspot3start = perlegen3start;
			hotspot3end   = perlegen3end;
			hotspot3type  = "Perlegen";
		} else {
			hotspot3start = hapmap3start;
			hotspot3end   = hapmap3end;
			hotspot3type  = "HapMap";
		}
			
		// Add HotspotRegion, Location, Hotspot5, Hotspot3 &amp; AssociatedRegion.
		Element hotspotElement = root.addElement("HotspotRegion")
						.addAttribute("id", id);
		hotspotElement.addElement("Location")
				.addAttribute("chromosome", chr)
				.addAttribute("start", hotspot5start + "")
				.addAttribute("end", hotspot3end + "")
				.addAttribute("ucscBuild", "hg17");
		Element hotspot5element = hotspotElement.addElement("Hotspot5")
							.addAttribute("source", hotspot5type);
		hotspot5element.addElement("Location")
				.addAttribute("chromosome", chr)
				.addAttribute("start", hotspot5start + "")
				.addAttribute("end", hotspot5end + "")
				.addAttribute("ucscBuild", "hg17");
		Element hotspot3element = hotspotElement.addElement("Hotspot3")
							.addAttribute("source", hotspot3type);
		hotspot3element.addElement("Location")
				.addAttribute("chromosome", chr)
				.addAttribute("start", hotspot3start + "")
				.addAttribute("end", hotspot3end + "")
				.addAttribute("ucscBuild", "hg17");
		Element assocRegionElement = root.addElement("AssociatedRegion")
						.addAttribute("id", id);
		assocRegionElement.addElement("Location")
				.addAttribute("chromosome", chr)
				.addAttribute("start", hotspot5start + "")
				.addAttribute("end", hotspot3end + "")
				.addAttribute("ucscBuild", "hg17");
	}
	associatedSNPOut = document.asXML();
} finally {
	if (rs != null)
		rs.close();
	if (psHapmap5 != null)
		psHapmap5.close();
	if (psHapmap3 != null)
		psHapmap3.close();
	if (psPerlegen5 != null)
		psPerlegen5.close();
	if (psPerlegen3 != null)
		psPerlegen3.close();
	if (con != null)
		con.close();
}
  

 </script>
  <dependencies />
  <localworkerName>net.sourceforge.taverna.scuflworkers.jdbc.SQLQueryWorker</localworkerName>
</net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean></configBean><annotations><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.HostInstitution">
        <text>UserNameHere</text>
      </annotationBean>
      <date>2010-12-10 09:36:13.997 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain></annotations></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="driver" depth="0" /><port name="url" depth="0" /><port name="userid" depth="0" /><port name="hapmap5sql" depth="0" /><port name="hapmap3sql" depth="0" /><port name="perlegen5sql" depth="0" /><port name="perlegen3sql" depth="0" /><port name="associatedSnpXML" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>driver</name><inputPorts /><outputPorts><port><name>value</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>stringconstant-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.stringconstant.StringConstantActivity</class><inputMap /><outputMap><map from="value" to="value" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean xmlns="">
  <value>com.mysql.jdbc.Driver</value>
</net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy /></iteration></iterationStrategyStack></processor><processor><name>url</name><inputPorts /><outputPorts><port><name>value</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>stringconstant-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.stringconstant.StringConstantActivity</class><inputMap /><outputMap><map from="value" to="value" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean xmlns="">
  <value>jdbc:mysql://genome-mysql.cse.ucsc.edu:3306/hg17</value>
</net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy /></iteration></iterationStrategyStack></processor><processor><name>userid</name><inputPorts /><outputPorts><port><name>value</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>stringconstant-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.stringconstant.StringConstantActivity</class><inputMap /><outputMap><map from="value" to="value" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean xmlns="">
  <value>genome</value>
</net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy /></iteration></iterationStrategyStack></processor><processor><name>getHapMapHotspots5_SQL</name><inputPorts /><outputPorts><port><name>value</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>stringconstant-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.stringconstant.StringConstantActivity</class><inputMap /><outputMap><map from="value" to="value" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean xmlns="">
  <value>SELECT chromStart, chromEnd FROM snpRecombHotspotHapmap WHERE chrom = ? AND chromEnd &lt;= ? ORDER BY chromEnd DESC LIMIT 1</value>
</net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy /></iteration></iterationStrategyStack></processor><processor><name>getHapMapHotspots3_SQL</name><inputPorts /><outputPorts><port><name>value</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>stringconstant-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.stringconstant.StringConstantActivity</class><inputMap /><outputMap><map from="value" to="value" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean xmlns="">
  <value>SELECT chromStart, chromEnd FROM snpRecombHotspotHapmap WHERE chrom = ? AND chromStart &gt;= ? ORDER BY chromStart ASC LIMIT 1</value>
</net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy /></iteration></iterationStrategyStack></processor><processor><name>getPerlegenHotspots5_SQL</name><inputPorts /><outputPorts><port><name>value</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>stringconstant-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.stringconstant.StringConstantActivity</class><inputMap /><outputMap><map from="value" to="value" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean xmlns="">
  <value>SELECT chromStart, chromEnd FROM snpRecombHotspotPerlegen WHERE chrom = ? AND chromEnd &lt;= ? ORDER BY chromEnd DESC LIMIT 1</value>
</net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy /></iteration></iterationStrategyStack></processor><processor><name>getPerlegenHotspots3_SQL</name><inputPorts /><outputPorts><port><name>value</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>stringconstant-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.stringconstant.StringConstantActivity</class><inputMap /><outputMap><map from="value" to="value" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean xmlns="">
  <value>SELECT chromStart, chromEnd FROM snpRecombHotspotPerlegen WHERE chrom = ? AND chromStart &gt;= ? ORDER BY chromStart ASC LIMIT 1</value>
</net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy /></iteration></iterationStrategyStack></processor></processors><conditions /><datalinks><datalink><sink type="processor"><processor>getRecombinationHotspots</processor><port>driver</port></sink><source type="processor"><processor>driver</processor><port>value</port></source></datalink><datalink><sink type="processor"><processor>getRecombinationHotspots</processor><port>url</port></sink><source type="processor"><processor>url</processor><port>value</port></source></datalink><datalink><sink type="processor"><processor>getRecombinationHotspots</processor><port>userid</port></sink><source type="processor"><processor>userid</processor><port>value</port></source></datalink><datalink><sink type="processor"><processor>getRecombinationHotspots</processor><port>hapmap5sql</port></sink><source type="processor"><processor>getHapMapHotspots5_SQL</processor><port>value</port></source></datalink><datalink><sink type="processor"><processor>getRecombinationHotspots</processor><port>hapmap3sql</port></sink><source type="processor"><processor>getHapMapHotspots3_SQL</processor><port>value</port></source></datalink><datalink><sink type="processor"><processor>getRecombinationHotspots</processor><port>perlegen5sql</port></sink><source type="processor"><processor>getPerlegenHotspots5_SQL</processor><port>value</port></source></datalink><datalink><sink type="processor"><processor>getRecombinationHotspots</processor><port>perlegen3sql</port></sink><source type="processor"><processor>getPerlegenHotspots3_SQL</processor><port>value</port></source></datalink><datalink><sink type="processor"><processor>getRecombinationHotspots</processor><port>associatedSnpXML</port></sink><source type="dataflow"><port>associatedSnp</port></source></datalink><datalink><sink type="dataflow"><port>out</port></sink><source type="processor"><processor>getRecombinationHotspots</processor><port>associatedSNPOut</port></source></datalink></datalinks><annotations><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>3e68e183-ce8e-4ade-86d7-01cde22fb9a9</identification>
      </annotationBean>
      <date>2011-10-07 12:24:21.256 BST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2></annotations></dataflow></workflow>