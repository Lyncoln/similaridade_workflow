<workflow xmlns="http://taverna.sf.net/2008/xml/t2flow" version="1" producedBy="taverna-2.3.0"><dataflow id="ed4889e6-398e-4c32-9ace-b0609f19690d" role="top"><name>Workflow8</name><inputPorts><port><name>msHybrid_Pars</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>FTICR_Data_Dir</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>pepAlign_Pars</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>Result_Dir</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>IT_Data_Dirs</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>Log_File</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>Tandem_Param_File</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>FASTA_File</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>Prophet_Pars</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>msRecal_Pars</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>Iterations</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port></inputPorts><outputPorts><port><name>Hybrid_IT_mzXML_Files</name><annotations /></port><port><name>Recal_FT_mzXML_File</name><annotations /></port><port><name>Final_count</name><annotations /></port></outputPorts><processors><processor><name>Workflow_3</name><inputPorts><port><name>msRecal_Pars</name><depth>0</depth></port><port><name>Prophet_Pars</name><depth>0</depth></port><port><name>Tandem_Param_File</name><depth>0</depth></port><port><name>Log_File</name><depth>0</depth></port><port><name>FASTA_File</name><depth>0</depth></port><port><name>pepAlign_Pars</name><depth>0</depth></port><port><name>msHybrid_Pars</name><depth>0</depth></port><port><name>Loop_cnt</name><depth>0</depth></port><port><name>FT_mzXML_File</name><depth>0</depth></port><port><name>IT_mzXML_Files</name><depth>1</depth></port></inputPorts><outputPorts><port><name>IT_mzXML_Files</name><depth>1</depth><granularDepth>1</granularDepth></port><port><name>FT_mzXML_File</name><depth>0</depth><granularDepth>0</granularDepth></port><port><name>Loop_cnt</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>dataflow-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.dataflow.DataflowActivity</class><inputMap><map from="Prophet_Pars" to="Prophet_Pars" /><map from="msHybrid_Pars" to="msHybrid_Pars" /><map from="Tandem_Param_File" to="Tandem_Param_File" /><map from="IT_mzXML_Files" to="IT_mzXML_Files" /><map from="msRecal_Pars" to="msRecal_Pars" /><map from="Log_File" to="Log_File" /><map from="Loop_cnt" to="Loop_cnt" /><map from="pepAlign_Pars" to="pepAlign_Pars" /><map from="FT_mzXML_File" to="FT_mzXML_File" /><map from="FASTA_File" to="FASTA_File" /></inputMap><outputMap><map from="IT_mzXML_Files" to="IT_mzXML_Files" /><map from="Loop_cnt" to="Loop_cnt" /><map from="FT_mzXML_File" to="FT_mzXML_File" /></outputMap><configBean encoding="dataflow"><dataflow ref="358c1cf3-c331-414f-bf98-4b9390f76106" /></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Loop</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.LoopConfiguration xmlns="">
  <conditionXML>&lt;activity xmlns="http://taverna.sf.net/2008/xml/t2flow"&gt;&lt;raven&gt;&lt;group&gt;net.sf.taverna.t2.activities&lt;/group&gt;&lt;artifact&gt;beanshell-activity&lt;/artifact&gt;&lt;version&gt;1.2&lt;/version&gt;&lt;/raven&gt;&lt;class&gt;net.sf.taverna.t2.activities.beanshell.BeanshellActivity&lt;/class&gt;&lt;inputMap /&gt;&lt;outputMap /&gt;&lt;configBean encoding="xstream"&gt;&lt;net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns=""&gt;&#xD;
  &lt;script&gt;loop = "" + ! Loop_cnt.equals("0"); &#xD;
if ("true".matches(loop)) {&#xD;
   Thread.sleep(5000);&#xD;
}&lt;/script&gt;&#xD;
  &lt;dependencies /&gt;&#xD;
  &lt;classLoaderSharing&gt;workflow&lt;/classLoaderSharing&gt;&#xD;
  &lt;localDependencies /&gt;&#xD;
  &lt;artifactDependencies /&gt;&#xD;
  &lt;inputs&gt;&#xD;
    &lt;net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean&gt;&#xD;
      &lt;translatedElementType&gt;java.lang.String&lt;/translatedElementType&gt;&#xD;
      &lt;allowsLiteralValues&gt;true&lt;/allowsLiteralValues&gt;&#xD;
      &lt;name&gt;Loop_cnt&lt;/name&gt;&#xD;
      &lt;depth&gt;0&lt;/depth&gt;&#xD;
    &lt;/net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean&gt;&#xD;
    &lt;net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean&gt;&#xD;
      &lt;translatedElementType&gt;java.lang.Object&lt;/translatedElementType&gt;&#xD;
      &lt;allowsLiteralValues&gt;true&lt;/allowsLiteralValues&gt;&#xD;
      &lt;name&gt;IT_mzXML_Files&lt;/name&gt;&#xD;
      &lt;depth&gt;1&lt;/depth&gt;&#xD;
    &lt;/net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean&gt;&#xD;
    &lt;net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean&gt;&#xD;
      &lt;translatedElementType&gt;java.lang.Object&lt;/translatedElementType&gt;&#xD;
      &lt;allowsLiteralValues&gt;true&lt;/allowsLiteralValues&gt;&#xD;
      &lt;name&gt;FT_mzXML_File&lt;/name&gt;&#xD;
      &lt;depth&gt;0&lt;/depth&gt;&#xD;
    &lt;/net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean&gt;&#xD;
  &lt;/inputs&gt;&#xD;
  &lt;outputs&gt;&#xD;
    &lt;net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean&gt;&#xD;
      &lt;granularDepth&gt;0&lt;/granularDepth&gt;&#xD;
      &lt;name&gt;loop&lt;/name&gt;&#xD;
      &lt;depth&gt;0&lt;/depth&gt;&#xD;
    &lt;/net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean&gt;&#xD;
    &lt;net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean&gt;&#xD;
      &lt;granularDepth&gt;0&lt;/granularDepth&gt;&#xD;
      &lt;name&gt;Loop_cnt&lt;/name&gt;&#xD;
      &lt;depth&gt;0&lt;/depth&gt;&#xD;
    &lt;/net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean&gt;&#xD;
    &lt;net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean&gt;&#xD;
      &lt;granularDepth&gt;1&lt;/granularDepth&gt;&#xD;
      &lt;name&gt;IT_mzXML_Files&lt;/name&gt;&#xD;
      &lt;depth&gt;1&lt;/depth&gt;&#xD;
    &lt;/net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean&gt;&#xD;
    &lt;net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean&gt;&#xD;
      &lt;granularDepth&gt;0&lt;/granularDepth&gt;&#xD;
      &lt;name&gt;FT_mzXML_File&lt;/name&gt;&#xD;
      &lt;depth&gt;0&lt;/depth&gt;&#xD;
    &lt;/net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean&gt;&#xD;
  &lt;/outputs&gt;&#xD;
&lt;/net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean&gt;&lt;/configBean&gt;&lt;annotations /&gt;&lt;/activity&gt;</conditionXML>
  <runFirst>true</runFirst>
  <properties>
    <property name="compareValue" value="0" />
    <property name="comparePort" value="Loop_cnt" />
    <property name="delay" value="5" />
    <property name="comparison" value="EqualTo" />
    <property name="isFeedBack" value="true" />
  </properties>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.LoopConfiguration></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="msRecal_Pars" depth="0" /><port name="Prophet_Pars" depth="0" /><port name="Tandem_Param_File" depth="0" /><port name="Log_File" depth="0" /><port name="FASTA_File" depth="0" /><port name="pepAlign_Pars" depth="0" /><port name="msHybrid_Pars" depth="0" /><port name="Loop_cnt" depth="0" /><port name="FT_mzXML_File" depth="0" /><port name="IT_mzXML_Files" depth="1" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>CompassXport</name><inputPorts><port><name>Raw_Data_Dir</name><depth>0</depth></port><port><name>Log_File</name><depth>0</depth></port><port><name>Result_Dir</name><depth>0</depth></port><port><name>Mode</name><depth>0</depth></port></inputPorts><outputPorts><port><name>mzXML_Output</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>dataflow-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.dataflow.DataflowActivity</class><inputMap><map from="Raw_Data_Dir" to="Raw_Data_Dir" /><map from="Log_File" to="Log_File" /><map from="Mode" to="Mode" /><map from="Result_Dir" to="Result_Dir" /></inputMap><outputMap><map from="mzXML_Output" to="mzXML_Output" /></outputMap><configBean encoding="dataflow"><dataflow ref="f46c7767-32be-4981-a430-f1aa790ba7c3" /></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="Raw_Data_Dir" depth="0" /><port name="Log_File" depth="0" /><port name="Result_Dir" depth="0" /><port name="Mode" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>Mode_value</name><inputPorts /><outputPorts><port><name>value</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>stringconstant-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.stringconstant.StringConstantActivity</class><inputMap /><outputMap><map from="value" to="value" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean xmlns="">
  <value>0</value>
</net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy /></iteration></iterationStrategyStack></processor><processor><name>Multi_CompassXport</name><inputPorts><port><name>Mode</name><depth>0</depth></port><port><name>Result_Dir</name><depth>0</depth></port><port><name>Log_File</name><depth>0</depth></port><port><name>Raw_Data_Dir</name><depth>0</depth></port></inputPorts><outputPorts><port><name>mzXML_Output</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>dataflow-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.dataflow.DataflowActivity</class><inputMap><map from="Raw_Data_Dir" to="Raw_Data_Dir" /><map from="Log_File" to="Log_File" /><map from="Mode" to="Mode" /><map from="Result_Dir" to="Result_Dir" /></inputMap><outputMap><map from="mzXML_Output" to="mzXML_Output" /></outputMap><configBean encoding="dataflow"><dataflow ref="8b0bd9e6-efa7-4e0a-ba70-48275316a048" /></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="Mode" depth="0" /><port name="Result_Dir" depth="0" /><port name="Log_File" depth="0" /><port name="Raw_Data_Dir" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>List_Data_Dirs</name><inputPorts><port><name>directory</name><depth>0</depth></port><port><name>extension</name><depth>0</depth></port></inputPorts><outputPorts><port><name>filelist</name><depth>1</depth><granularDepth>1</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>localworker-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.localworker.LocalworkerActivity</class><inputMap><map from="extension" to="extension" /><map from="directory" to="directory" /></inputMap><outputMap><map from="filelist" to="filelist" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>directory</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/plain'</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>extension</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/plain'</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>filelist</name>
      <depth>1</depth>
      <mimeTypes />
      <granularDepth>1</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>/****************** Input descriptions ****************/
// input port: String directory (depth 0)
// input port: String extension (depth 0)
// output port: String filelist (depth 0)


/****************** Class Declarations ****************/
class FileExtFilter implements FileFilter {
	public FileExtFilter(String ext) {
		this.ext = ext;
	}
	public boolean accept(File file) {
		return (file.getName().endsWith(ext) &amp;&amp; file.isDirectory());
	}
	String ext = null;
}// class


/************** Main matter, input checking ************/
if (extension == void || extension.equals("")) {
	throw new RuntimeException("The 'extension' parameter cannot be null.");
}// if
if (directory == void || directory.equals("")) {
	throw new RuntimeException("The 'directory' parameter cannot be null.");
}// if
File dirObj = new File(directory);
if (!dirObj.exists()) {
	throw new RuntimeException(
		"The 'directory' parameter specified does not exist.");
}// if

/************ Main matter, Running algorithm **********/
File[] fileObjList = dirObj.listFiles(new FileExtFilter(extension));
List filelist = new ArrayList();
for (int i = 0; i &lt; fileObjList.length; i++) {
	filelist.add(fileObjList[i].getAbsolutePath());
}


</script>
  <dependencies />
  <localworkerName>net.sourceforge.taverna.scuflworkers.io.FileListByExtTask</localworkerName>
</net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean></configBean><annotations><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.HostInstitution">
        <text>UserNameHere</text>
      </annotationBean>
      <date>2010-11-15 16:53:24.371 CET</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain></annotations></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="directory" depth="0" /><port name="extension" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>Dir_Ext</name><inputPorts /><outputPorts><port><name>value</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>stringconstant-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.stringconstant.StringConstantActivity</class><inputMap /><outputMap><map from="value" to="value" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean xmlns="">
  <value>.d</value>
</net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy /></iteration></iterationStrategyStack></processor></processors><conditions /><datalinks><datalink><sink type="processor"><processor>Workflow_3</processor><port>msRecal_Pars</port></sink><source type="dataflow"><port>msRecal_Pars</port></source></datalink><datalink><sink type="processor"><processor>Workflow_3</processor><port>Prophet_Pars</port></sink><source type="dataflow"><port>Prophet_Pars</port></source></datalink><datalink><sink type="processor"><processor>Workflow_3</processor><port>Tandem_Param_File</port></sink><source type="dataflow"><port>Tandem_Param_File</port></source></datalink><datalink><sink type="processor"><processor>Workflow_3</processor><port>Log_File</port></sink><source type="dataflow"><port>Log_File</port></source></datalink><datalink><sink type="processor"><processor>Workflow_3</processor><port>FASTA_File</port></sink><source type="dataflow"><port>FASTA_File</port></source></datalink><datalink><sink type="processor"><processor>Workflow_3</processor><port>pepAlign_Pars</port></sink><source type="dataflow"><port>pepAlign_Pars</port></source></datalink><datalink><sink type="processor"><processor>Workflow_3</processor><port>msHybrid_Pars</port></sink><source type="dataflow"><port>msHybrid_Pars</port></source></datalink><datalink><sink type="processor"><processor>Workflow_3</processor><port>Loop_cnt</port></sink><source type="dataflow"><port>Iterations</port></source></datalink><datalink><sink type="processor"><processor>Workflow_3</processor><port>FT_mzXML_File</port></sink><source type="processor"><processor>CompassXport</processor><port>mzXML_Output</port></source></datalink><datalink><sink type="processor"><processor>Workflow_3</processor><port>IT_mzXML_Files</port></sink><source type="processor"><processor>Multi_CompassXport</processor><port>mzXML_Output</port></source></datalink><datalink><sink type="processor"><processor>CompassXport</processor><port>Raw_Data_Dir</port></sink><source type="dataflow"><port>FTICR_Data_Dir</port></source></datalink><datalink><sink type="processor"><processor>CompassXport</processor><port>Log_File</port></sink><source type="dataflow"><port>Log_File</port></source></datalink><datalink><sink type="processor"><processor>CompassXport</processor><port>Result_Dir</port></sink><source type="dataflow"><port>Result_Dir</port></source></datalink><datalink><sink type="processor"><processor>CompassXport</processor><port>Mode</port></sink><source type="processor"><processor>Mode_value</processor><port>value</port></source></datalink><datalink><sink type="processor"><processor>Multi_CompassXport</processor><port>Mode</port></sink><source type="processor"><processor>Mode_value</processor><port>value</port></source></datalink><datalink><sink type="processor"><processor>Multi_CompassXport</processor><port>Result_Dir</port></sink><source type="dataflow"><port>Result_Dir</port></source></datalink><datalink><sink type="processor"><processor>Multi_CompassXport</processor><port>Log_File</port></sink><source type="dataflow"><port>Log_File</port></source></datalink><datalink><sink type="processor"><processor>Multi_CompassXport</processor><port>Raw_Data_Dir</port></sink><source type="processor"><processor>List_Data_Dirs</processor><port>filelist</port></source></datalink><datalink><sink type="processor"><processor>List_Data_Dirs</processor><port>directory</port></sink><source type="dataflow"><port>IT_Data_Dirs</port></source></datalink><datalink><sink type="processor"><processor>List_Data_Dirs</processor><port>extension</port></sink><source type="processor"><processor>Dir_Ext</processor><port>value</port></source></datalink><datalink><sink type="dataflow"><port>Hybrid_IT_mzXML_Files</port></sink><source type="processor"><processor>Workflow_3</processor><port>IT_mzXML_Files</port></source></datalink><datalink><sink type="dataflow"><port>Recal_FT_mzXML_File</port></sink><source type="processor"><processor>Workflow_3</processor><port>FT_mzXML_File</port></source></datalink><datalink><sink type="dataflow"><port>Final_count</port></sink><source type="processor"><processor>Workflow_3</processor><port>Loop_cnt</port></source></datalink></datalinks><annotations><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>53cbaa68-d4a8-4f2b-a9e4-4faad365e343</identification>
      </annotationBean>
      <date>2011-04-06 16:05:51.664 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>b3d764f0-c7dd-4a8b-8b83-0810ab360d93</identification>
      </annotationBean>
      <date>2011-03-30 21:42:17.615 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>b80ea570-b9b1-42f5-8f48-16ea0d6f6142</identification>
      </annotationBean>
      <date>2011-12-01 13:10:08.547 CET</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>15057fc2-a57d-45bf-a2a3-d2aa0c313f03</identification>
      </annotationBean>
      <date>2011-04-07 16:52:04.704 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>8a04a313-ecef-4ee7-bf1e-920d5b5c4a08</identification>
      </annotationBean>
      <date>2011-03-31 19:56:53.850 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>1fe897ef-d6f8-44fe-badd-a18e3f64f857</identification>
      </annotationBean>
      <date>2011-03-30 21:09:34.670 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>bcb696e9-9a66-46e4-9047-f331a8dfd5df</identification>
      </annotationBean>
      <date>2011-03-30 20:56:00.583 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>74e936d5-9db2-4b1d-abd5-993d8790e823</identification>
      </annotationBean>
      <date>2011-04-06 16:45:14.393 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>f1b2bbff-a505-4104-b760-0d67a5b06197</identification>
      </annotationBean>
      <date>2011-04-07 15:23:49.470 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>a6b121c9-db0e-4848-b26d-d21e6ab5572a</identification>
      </annotationBean>
      <date>2011-04-06 15:55:24.591 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>ab7939a5-b2ed-44f6-9761-2c2c96d5952d</identification>
      </annotationBean>
      <date>2011-03-31 19:51:07.6 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>19a56845-39f4-4fac-a2c2-541e7ae099ab</identification>
      </annotationBean>
      <date>2011-03-30 12:01:56.913 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>56974a31-f924-4d6f-ac13-d1cbcaa82a4b</identification>
      </annotationBean>
      <date>2011-03-30 21:27:08.353 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>ea833fc1-8cd3-4125-a50c-854ef49a38c4</identification>
      </annotationBean>
      <date>2011-04-06 16:49:41.95 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>ac76aea1-ec46-49ad-a95a-b77437d0341f</identification>
      </annotationBean>
      <date>2011-03-30 20:45:46.292 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>9242241f-363f-4f8e-ab01-89e023c6de05</identification>
      </annotationBean>
      <date>2011-04-06 16:32:04.519 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>15239b7c-db01-4c9a-8fea-2fcba7ef37ce</identification>
      </annotationBean>
      <date>2011-03-31 17:42:32.995 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>ed4889e6-398e-4c32-9ace-b0609f19690d</identification>
      </annotationBean>
      <date>2012-01-02 12:01:52.866 CET</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>df4ecc84-21fb-494d-89c4-0243ee3759e2</identification>
      </annotationBean>
      <date>2011-04-12 17:21:33.383 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>104e7a81-6709-4287-95b0-e6855280e03d</identification>
      </annotationBean>
      <date>2011-04-06 18:18:18.893 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2></annotations></dataflow><dataflow id="19f9afea-461d-42a4-9e3c-b1beff044faa" role="nested"><name>Workflow1</name><inputPorts><port><name>FASTA_File</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>mzXML_File</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>Tandem_Param_File</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>Log_File</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port></inputPorts><outputPorts><port><name>pepXML_Output</name><annotations /></port></outputPorts><processors><processor><name>Tandem</name><inputPorts><port><name>fasta_file</name><depth>0</depth></port><port><name>log_file</name><depth>0</depth></port><port><name>parameter_file</name><depth>0</depth></port><port><name>mzxml_file</name><depth>0</depth></port></inputPorts><outputPorts><port><name>tandem_file</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="log_file" to="log_file" /><map from="mzxml_file" to="mzxml_file" /><map from="fasta_file" to="fasta_file" /><map from="parameter_file" to="parameter_file" /></inputMap><outputMap><map from="tandem_file" to="tandem_file" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>mzxml_file</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>fasta_file</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>parameter_file</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>log_file</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>tandem_file</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>/****************** Input descriptions ****************/
// input port: String mzxml_file (Depth 0)
// input port: String fasta_file (Depth 0)
// input port: String parameter_file (Depth 0)
// input port: String log_file (Depth 0)
// output port: String tandem_file (Depth 0)


/****************** Class Declarations ****************/
class InProcStreamReader extends Thread
{
    private StringBuffer sb;
    public  InputStream is;
    
    InProcStreamReader(InputStream is) {
        this.is = is;
    }// InProcStreamReader(InputStream is) 
    
    public void run() {
        try {
            InputStreamReader isr = new InputStreamReader(is);
            sb = new StringBuffer();
            while ((c = isr.read()) != -1)
                sb.append((char) c);
        } catch (IOException ioe)
        {
          ioe.printStackTrace();  
        }/// catch
    }// run

    public String getOutput() { 
      return sb.toString();
    }// getOutput
}// InProcStreamReader


/****************** Global variables ******************/
tppDir = "C:\\Inetpub\\tpp-bin\\";
installDir = "C:\\Users\\nmpalmblad\\MCP_Workflows\\MCP_Workflows\\";


/****************** Global functions ******************/
// Replaces substrings in a string with a replacement string
String replace(String str, String pattern, String replace) { 
  int s = 0; 
  int e = 0; 
  StringBuffer result = new StringBuffer(); 
  while ((e = str.indexOf(pattern, s)) &gt;= 0) { 
    result.append(str.substring(s, e)); 
    result.append(replace); 
    s = e+pattern.length(); 
  } // while
  result.append(str.substring(s)); 
  return result.toString(); 
}//  String replace(String str, String pattern, String replace) 

// Generates a file based on a name and a new extension (without the .)
String genNewFileName(String inputFile, String extension) {
  int dotPos = inputFile.lastIndexOf(".");
  String strFilename = inputFile.substring(0, dotPos);
  return strFilename + "." + extension;
}// String genNewFileName(String inputFile, String extension) 

// Generates tandem output file name
String genOutputFileName(String inputFile) {
  return genNewFileName(inputFile, "tandem");
}// String genOutputFileName(String inputFile)

// Generates taxonomy file name
String genTaxonomyFileName(String inputFile) {
  return genNewFileName(inputFile, "taxonomy.xml");
}// String genTaxonomyFileName((String inputFile)

// Modifies the taxonomy predicate file and returns the path of the new file */
String modTaxonomyPredicate(String fasta_location, String inputFile) {   
  String taxFileName = genTaxonomyFileName( inputFile );
  BufferedReader input = new BufferedReader( new FileReader( installDir + "Tools\\Tandem\\taxonomy_pred.xml" ));
  BufferedWriter output = new BufferedWriter( new FileWriter( taxFileName ));
  try {
    String line = null; 
    while (( line = input.readLine()) != null){      
      if (line.indexOf("$FASTA_LOCATION$") &gt;= 0) {  
        line = replace( line, "$FASTA_LOCATION$", fasta_location );
        output.write( line + '\n');
      } else {
        output.write( line + '\n');
      }// else
    }// while
  }// try
  finally {
    input.close();
    output.close();
  }// finally

  return taxFileName;

}// String modTaxonomyPredicate(String fasta_location) 

// Generates parameter file name
String genParameterFileName(String inputFile) {
  return genNewFileName(inputFile, "param.xml");
}// String genParameterFileName((String inputFile)

// Modifies the param predicate file and returns the path of the new file */
String modParamPredicate(String mzxmlFile, String taxonFile, String paramFile, String outputFile) {   
  BufferedReader input = new BufferedReader(new FileReader(installDir + "Tools\\Tandem\\tandem_pred.params"));
  BufferedReader parinput = new BufferedReader(new FileReader(paramFile));
  String paramFileName = genParameterFileName( mzxmlFile );
  BufferedWriter output = new BufferedWriter( new FileWriter( paramFileName ));
  String line = null; //not declared within while loop
  try {
    while (( line = input.readLine()) != null){
      if (line.indexOf("$PARAMS$") &gt;= 0) {
        while (( line = parinput.readLine()) != null){
          output.write( line + '\n'); 
        }
      } else if (line.indexOf("$TAXONOMY_LOCATION$") &gt;= 0) {
        line = replace( line, "$TAXONOMY_LOCATION$", taxonFile );
        output.write( line + '\n'); 
      } else if (line.indexOf("$SPECTRUM_LOCATION$") &gt;= 0) {
        line = replace( line, "$SPECTRUM_LOCATION$", mzxmlFile );
        output.write( line + '\n');
      } else if (line.indexOf("$OUTPUT_LOCATION$") &gt;= 0) {
        line = replace( line, "$OUTPUT_LOCATION$", outputFile );
        output.write( line + '\n');
      } else {
        output.write( line + '\n');
      }// else
    }// while
  }// try
  finally {
    input.close();
    parinput.close();
    output.close();
  }// finally

  return paramFileName;

}// String modParamPredicate(String mzxmlFile, String taxonFile, String outputFile) 


/************** Main matter, input checking ************/
if (mzxml_file == void || mzxml_file.equals("")) {
	throw new RuntimeException("The 'mzxml_file' port cannot be null.");
} else if (fasta_file == void || fasta_file.equals("")) {
	throw new RuntimeException("The 'fasta_file' port cannot be null.");
} else if (parameter_file == void || parameter_file.equals("")) {
	throw new RuntimeException("The 'parameter_file' port cannot be null.");
}// else

/************ Main matter, Running executable **********/
// Setting up the command line 
appArray = new ArrayList();

// Adding the command itself
appArray.add(tppDir + "Tandem.exe");

// Creating tandem configuration files and setting them as input
taxonFile = modTaxonomyPredicate(fasta_file, mzxml_file);
tmpout = genOutputFileName(mzxml_file);
appArray.add(modParamPredicate(mzxml_file, taxonFile, parameter_file, tmpout));

// Preparing execution of tandem
workDir = new File(tppDir);
launcher = new ProcessBuilder(appArray);
launcher.directory = workDir;
proc = launcher.start();

outputReader = new InProcStreamReader(proc.getInputStream());
outputReader.start();

// any error???
exitVal = proc.waitFor();
outputReader.join();


/************** Main matter, generating log ************/
fstream = new FileWriter(log_file, true);
out = new BufferedWriter(fstream);

if (!(log_file == void || log_file.equals(""))) {
  out.write("=============== X!Tandem ==============="); 
  out.newLine();
  out.write("Parameters: ");
  for (i=0; i&lt;appArray.size(); i++)
    out.write(appArray.get(i).toString());
  out.newLine();
  out.write("Output:");
  out.newLine();
  out.write(outputReader.getOutput()); 
  out.newLine();
  out.close();
}// if

// final step, assigning the output
if (exitVal == 0)
  tandem_file = tmpout;
else
  tandem_file = NULL;


</script>
  <dependencies />
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="fasta_file" depth="0" /><port name="log_file" depth="0" /><port name="parameter_file" depth="0" /><port name="mzxml_file" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>Tandem2pepXML</name><inputPorts><port><name>input_file</name><depth>0</depth></port><port><name>log_file</name><depth>0</depth></port></inputPorts><outputPorts><port><name>output_file</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>localworker-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.localworker.LocalworkerActivity</class><inputMap><map from="log_file" to="log_file" /><map from="input_file" to="input_file" /></inputMap><outputMap><map from="output_file" to="output_file" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>input_file</name>
      <depth>0</depth>
      <mimeTypes>
        <string>'text/plain'</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>log_file</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>output_file</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>/****************** Input descriptions ****************/
// input port: String input_file (depth 0)
// output port: String output_file (depth 0)


/****************** Class Declarations ****************/
class InProcStreamReader extends Thread
{
    private StringBuffer sb;
    public  InputStream is;
    
    InProcStreamReader(InputStream is) {
        this.is = is;
    }// InProcStreamReader(InputStream is) 
    
    public void run() {
        try {
            InputStreamReader isr = new InputStreamReader(is);
            sb = new StringBuffer();
            while ((c = isr.read()) != -1)
                sb.append((char) c);
        } catch (IOException ioe)
        {
          ioe.printStackTrace();  
        }/// catch
    }// run

    public String getOutput() { 
      return sb.toString();
    }// getOutput
}// InProcStreamReader


/****************** Global variables ******************/
T2XDir = "C:\\Users\\nmpalmblad\\MCP_Workflows\\MCP_Workflows\\";


/****************** Global functions ******************/
// Deletes a  file
void deleteFile(String fileName) {
  // A File object to represent the filename
  File f = new File(fileName);
  
  // Make sure the file or directory exists and isn't write protected
  if (!f.exists())
    throw new IllegalArgumentException("Delete: no such file or directory: " + fileName);

  if (!f.canWrite())
    throw new IllegalArgumentException("Delete: write protected: " + fileName);

  // If it is a directory, make sure it is empty
  if (f.isDirectory()) {
    String[] files = f.list();
    if (files.length &gt; 0)
      throw new IllegalArgumentException("Delete: directory not empty: " + fileName);
  }// if

  // Attempt to delete it
  boolean success = f.delete();

  if (!success)
    throw new IllegalArgumentException("Delete: deletion failed");
  
}// void deleteFile(String fileName) 

// Generates output file name based on input file
String genOutputFileName(String inputFile) {
  String result;

  for (int i = inputFile.length()-1; i &gt;= 0; i--) {
    if (inputFile.charAt(i) == '.')  {
      return inputFile.substring(0, i+1) + "pep.xml";
    }// if
  }// for

  return "temp.pep.xml";
}


/************** Main matter, input checking ************/
if (input_file == void || input_file.equals("")) {
	throw new RuntimeException("The 'input_file' port cannot be null.");
}

/************ Main matter, Running executable **********/
// Setting up the command line 
appArray = new ArrayList();

// Adding the command itself
appArray.add(T2XDir + "Tools\\Tandem2XML\\Tandem2XML.exe");

// Adding the input file
appArray.add(input_file);

// Setting the output file, and deleting previous instances
tmpout = genOutputFileName(input_file);
foutput = new File(tmpout);
if (foutput.exists()) {
  deleteFile(tmpout);
}// if
appArray.add(tmpout);

// Preparing execution of tandem
workDir = new File(T2XDir);
launcher = new ProcessBuilder(appArray);
launcher.directory = workDir;
proc = launcher.start();

outputReader = new InProcStreamReader(proc.getInputStream());
outputReader.start();

// any error? if so, dun delete the intermediate file
int exitVal = proc.waitFor();
outputReader.join();
if (exitVal == 0)
  deleteFile(input_file);  


/************** Main matter, generating log ************/
fstream = new FileWriter(log_file, true);
out = new BufferedWriter(fstream);

if (!(log_file == void || log_file.equals(""))) {
  out.write("=============== Tandem2pepXML ==============="); 
  out.newLine();
  out.write("Parameters: ");
  for (i=0; i&lt;appArray.size(); i++)
    out.write(appArray.get(i).toString());
  out.newLine();
  out.write("Output:");
  out.newLine();
  out.write(outputReader.getOutput()); 
  out.newLine();
  out.close();
}// if

// final step, assigning the output
if (exitVal == 0)
  output_file = tmpout;
else
  output_file = NULL;

</script>
  <dependencies />
  <localworkerName>net.sourceforge.taverna.scuflworkers.io.LocalCommand</localworkerName>
</net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean></configBean><annotations><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.HostInstitution">
        <text>UserNameHere</text>
      </annotationBean>
      <date>2012-01-02 12:01:05.282 CET</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain></annotations></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="input_file" depth="0" /><port name="log_file" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor></processors><conditions /><datalinks><datalink><sink type="processor"><processor>Tandem</processor><port>fasta_file</port></sink><source type="dataflow"><port>FASTA_File</port></source></datalink><datalink><sink type="processor"><processor>Tandem</processor><port>log_file</port></sink><source type="dataflow"><port>Log_File</port></source></datalink><datalink><sink type="processor"><processor>Tandem</processor><port>parameter_file</port></sink><source type="dataflow"><port>Tandem_Param_File</port></source></datalink><datalink><sink type="processor"><processor>Tandem</processor><port>mzxml_file</port></sink><source type="dataflow"><port>mzXML_File</port></source></datalink><datalink><sink type="processor"><processor>Tandem2pepXML</processor><port>input_file</port></sink><source type="processor"><processor>Tandem</processor><port>tandem_file</port></source></datalink><datalink><sink type="processor"><processor>Tandem2pepXML</processor><port>log_file</port></sink><source type="dataflow"><port>Log_File</port></source></datalink><datalink><sink type="dataflow"><port>pepXML_Output</port></sink><source type="processor"><processor>Tandem2pepXML</processor><port>output_file</port></source></datalink></datalinks><annotations><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>b82bd131-139e-4072-b2eb-8e358f3b80ef</identification>
      </annotationBean>
      <date>2011-12-01 13:05:51.521 CET</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>7f7c6977-8634-446c-9e28-b2bbe9c0d435</identification>
      </annotationBean>
      <date>2011-04-12 16:37:50.373 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>23b08ec0-6c7b-4bbd-a796-7233d2a93c7a</identification>
      </annotationBean>
      <date>2011-03-01 11:42:27.896 CET</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>d47a341b-2046-43b1-87f1-1f0c97748198</identification>
      </annotationBean>
      <date>2011-01-31 11:01:17.418 CET</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>e5fa5551-84b5-4cae-be10-8bbc6ae85402</identification>
      </annotationBean>
      <date>2011-03-30 10:58:44.949 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>eb2a5ac6-dda2-4b48-8d7c-58c36f9502f7</identification>
      </annotationBean>
      <date>2011-04-12 16:35:36.741 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>34b7fea4-4cf7-4dc4-b6f9-7f3c955af477</identification>
      </annotationBean>
      <date>2011-12-01 13:04:42.550 CET</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>45d1674a-08d8-46da-8c83-01d62ac6a2da</identification>
      </annotationBean>
      <date>2011-01-14 17:22:58.378 CET</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>26e3310c-558b-484d-9bf8-dbd94bdab7d9</identification>
      </annotationBean>
      <date>2011-04-06 18:18:09.939 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>19f72c62-ed1a-4c8f-bb6e-01fb1bd800b5</identification>
      </annotationBean>
      <date>2011-04-07 16:38:29.321 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>19f9afea-461d-42a4-9e3c-b1beff044faa</identification>
      </annotationBean>
      <date>2012-01-02 12:01:38.855 CET</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>e5d118e3-2916-4365-ae29-4984d3e1b4f6</identification>
      </annotationBean>
      <date>2011-01-14 16:49:18.610 CET</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>ea9bb0fd-35d6-45af-8773-506a8bcadc24</identification>
      </annotationBean>
      <date>2011-03-02 15:12:29.703 CET</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>6f68c5e2-efc6-45e1-ab95-5d47022afb03</identification>
      </annotationBean>
      <date>2011-01-14 16:44:26.34 CET</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>fecc8412-b94b-4aa3-8e49-120f5833de64</identification>
      </annotationBean>
      <date>2011-04-12 16:39:16.474 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2></annotations></dataflow><dataflow id="7002c2b8-81bc-40aa-b029-fb216294ba2d" role="nested"><name>Workflow78</name><inputPorts><port><name>Tandem_Param_File</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>FASTA_File</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>Log_File</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>mzXML_File</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>Prophet_Pars</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port></inputPorts><outputPorts><port><name>pepXML_Output</name><annotations /></port></outputPorts><processors><processor><name>PeptideProphet</name><inputPorts><port><name>arguments</name><depth>0</depth></port><port><name>log_file</name><depth>0</depth></port><port><name>input_files</name><depth>1</depth></port></inputPorts><outputPorts><port><name>output_file</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="input_files" to="input_files" /><map from="arguments" to="arguments" /><map from="log_file" to="log_file" /></inputMap><outputMap><map from="output_file" to="output_file" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>input_files</name>
      <depth>1</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>arguments</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>log_file</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>output_file</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>/****************** Input descriptions ****************/
//input port: ArrayList input_files (depth 1)
//input port: String arguments (depth 0)
//input port: String log_file (depth 0)
//output port: String output_file (depth 0)


/****************** Class Declarations ****************/
class InProcStreamReader extends Thread
{
    private StringBuffer sb;
    public  InputStream is;
    
    InProcStreamReader(InputStream is) {
        this.is = is;
    }// InProcStreamReader(InputStream is) 
    
    public void run() {
        try {
            InputStreamReader isr = new InputStreamReader(is);
            sb = new StringBuffer();
            while ((c = isr.read()) != -1)
                sb.append((char) c);
        } catch (IOException ioe)
        {
          ioe.printStackTrace();  
        }/// catch
    }// run

    public String getOutput() { 
      return sb.toString();
    }// getOutput
}// InProcStreamReader


/****************** Global variables ******************/
tppDir = "C:\\Inetpub\\tpp-bin\\";


/****************** Global functions ******************/
// Replaces substrings in a string with a replacement string
String replace(String str, String pattern, String replace) { 
  int s = 0; 
  int e = 0; 
  StringBuffer result = new StringBuffer(); 
  while ((e = str.indexOf(pattern, s)) &gt;= 0) { 
    result.append(str.substring(s, e)); 
    result.append(replace); 
    s = e+pattern.length(); 
  }// while
  result.append(str.substring(s)); 
  return result.toString(); 
}//  String replace(String str, String pattern, String replace) 

// Generates the output file name based on the input file
String genOutputFileName(String inputFile) {
  return replace(inputFile, "pep.xml", "interact.pep.xml");
}// String genOutputFileName(String inputFile)

// Splits argument string into separate array elements
String[] filterArguments(String arguments) {
  String[] retval = arguments.split(" ");
  return retval;
}// String[] filterArguments(String arguments) {


/************** Main matter, input checking ************/
if (input_files == void) {
  throw new RuntimeException("The 'input_files' port cannot be null.");
}// if


/************ Main matter, Running executable **********/
// Setting up the command line 
appArray = new ArrayList();

// Adding the command itself
appArray.add(tppDir + "xinteract.exe");

// Setting the output file
tmpout = genOutputFileName(input_files.get(0));
fin = new File(tmpout);
if (fin.exists())
  fin.delete();
appArray.add("-N"+tmpout);

// Filtering out arguments, or setting defaults
if (arguments == void || arguments.equals("")) {
  arguments = "-p0.05 -l7 -MONO -OigGtus";
}// if
arglist = filterArguments(arguments);
if (!(arglist ==  void || arglist[0].equals(""))) { 
  for (int i = 0; i &lt; arglist.length; i++) {
    appArray.add(arglist[i]);
  }// for
}// if

// Adding the inputs 
for (int i = 0; i &lt; input_files.size(); i++) {
  if (!input_files.get(i).contains("interact")) {
    appArray.add(input_files.get(i));
  }// if
}// for

workdir = new File(tppDir);
launcher = new ProcessBuilder(appArray);
launcher.directory = workdir;
proc = launcher.start();

outputReader = new InProcStreamReader(proc.getInputStream());
outputReader.start();

// any error???
exitVal = proc.waitFor();
outputReader.join();


/************** Main matter, generating log ************/
fstream = new FileWriter(log_file, true);
out = new BufferedWriter(fstream);

if (!(log_file == void || log_file.equals(""))) {
  out.write("=============== PeptideProphet ==============="); 
  out.newLine();
  out.write("Parameters: ");
  for (i=0; i&lt;appArray.size(); i++)
    out.write(appArray.get(i).toString());
  out.newLine();
  out.write("Output:");
  out.newLine();
  out.write(outputReader.getOutput()); 
  out.newLine();
  out.close();
}// if

// final step, assigning the output
if (exitVal == 0)
  output_file = tmpout;
else
  output_file = NULL;

</script>
  <dependencies />
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="arguments" depth="0" /><port name="log_file" depth="0" /><port name="input_files" depth="1" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>Workflow_1a</name><inputPorts><port><name>FASTA_File</name><depth>0</depth></port><port><name>Log_File</name><depth>0</depth></port><port><name>Tandem_Param_File</name><depth>0</depth></port><port><name>mzXML_File</name><depth>0</depth></port></inputPorts><outputPorts><port><name>pepXML_Output</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>dataflow-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.dataflow.DataflowActivity</class><inputMap><map from="mzXML_File" to="mzXML_File" /><map from="Tandem_Param_File" to="Tandem_Param_File" /><map from="Log_File" to="Log_File" /><map from="FASTA_File" to="FASTA_File" /></inputMap><outputMap><map from="pepXML_Output" to="pepXML_Output" /></outputMap><configBean encoding="dataflow"><dataflow ref="19f9afea-461d-42a4-9e3c-b1beff044faa" /></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="FASTA_File" depth="0" /><port name="Log_File" depth="0" /><port name="Tandem_Param_File" depth="0" /><port name="mzXML_File" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor></processors><conditions /><datalinks><datalink><sink type="processor"><processor>PeptideProphet</processor><port>arguments</port></sink><source type="dataflow"><port>Prophet_Pars</port></source></datalink><datalink><sink type="processor"><processor>PeptideProphet</processor><port>log_file</port></sink><source type="dataflow"><port>Log_File</port></source></datalink><datalink><sink type="processor"><processor>PeptideProphet</processor><port>input_files</port></sink><source type="processor"><processor>Workflow_1a</processor><port>pepXML_Output</port></source></datalink><datalink><sink type="processor"><processor>Workflow_1a</processor><port>FASTA_File</port></sink><source type="dataflow"><port>FASTA_File</port></source></datalink><datalink><sink type="processor"><processor>Workflow_1a</processor><port>Log_File</port></sink><source type="dataflow"><port>Log_File</port></source></datalink><datalink><sink type="processor"><processor>Workflow_1a</processor><port>Tandem_Param_File</port></sink><source type="dataflow"><port>Tandem_Param_File</port></source></datalink><datalink><sink type="processor"><processor>Workflow_1a</processor><port>mzXML_File</port></sink><source type="dataflow"><port>mzXML_File</port></source></datalink><datalink><sink type="dataflow"><port>pepXML_Output</port></sink><source type="processor"><processor>PeptideProphet</processor><port>output_file</port></source></datalink></datalinks><annotations><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>ed84d9b6-1a6d-4f8d-a9c7-4da8d2b03192</identification>
      </annotationBean>
      <date>2011-04-06 16:28:27.542 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>8e0e9b2d-6420-4411-9f61-e7841aae2563</identification>
      </annotationBean>
      <date>2011-04-07 14:25:11.816 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>05ea30e7-2776-4795-8aed-0df2a2c8c512</identification>
      </annotationBean>
      <date>2011-04-07 16:39:21.195 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>2dc4297c-e078-4ae9-89cf-957b7a9de818</identification>
      </annotationBean>
      <date>2011-12-01 12:54:35.986 CET</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>36491e21-c712-4a5a-b562-241807763ed9</identification>
      </annotationBean>
      <date>2011-01-31 11:02:11.569 CET</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>d4430f80-5827-4fa3-83f3-0c58410ffc92</identification>
      </annotationBean>
      <date>2011-01-31 18:35:12.220 CET</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>f7de5cac-1926-4ec2-9838-47a53f5c04fd</identification>
      </annotationBean>
      <date>2011-04-12 16:43:35.130 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>ce45dc51-de9a-45a6-9d4d-3ca389bd6601</identification>
      </annotationBean>
      <date>2011-04-06 16:31:57.156 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>1520eabd-565d-4a01-a68d-0ac96f73ddf9</identification>
      </annotationBean>
      <date>2011-03-30 10:59:48.925 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>3ce3f027-e65e-4f23-8993-d50d45a0d198</identification>
      </annotationBean>
      <date>2011-01-31 10:56:42.353 CET</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>624593fc-452f-470c-adf7-4d7d8b6d6f0c</identification>
      </annotationBean>
      <date>2011-03-30 10:59:22.85 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>04d83187-2364-4930-ba2d-1eee4d3d5e6f</identification>
      </annotationBean>
      <date>2011-03-22 13:27:25.556 CET</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>3507c9f5-f5f2-4033-9f7c-2db5f50d88f1</identification>
      </annotationBean>
      <date>2011-01-31 11:07:39.185 CET</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>7d356e09-ab0f-49a0-b8b2-e04c79b4831c</identification>
      </annotationBean>
      <date>2011-03-01 11:43:55.657 CET</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>56d89322-2864-4bee-b71b-535a74078068</identification>
      </annotationBean>
      <date>2011-04-06 15:54:29.498 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>8615d8a1-e3af-4509-b708-daefe6d0e9a2</identification>
      </annotationBean>
      <date>2011-01-31 18:21:34.160 CET</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>7002c2b8-81bc-40aa-b029-fb216294ba2d</identification>
      </annotationBean>
      <date>2012-01-02 12:01:40.831 CET</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>b8bbef6f-374c-4d93-8033-29053e70f518</identification>
      </annotationBean>
      <date>2011-04-06 18:18:12.291 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>5d6ba88b-b3b6-45bb-bfca-9823451e4388</identification>
      </annotationBean>
      <date>2011-03-30 11:25:11.740 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>de000ea1-cff6-4679-b42e-9d315fa1db23</identification>
      </annotationBean>
      <date>2011-04-07 16:36:51.860 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>8aaf85b9-ca7b-48c1-8cf1-21f35a36e920</identification>
      </annotationBean>
      <date>2011-12-01 13:07:14.642 CET</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>bee38ae2-d96f-48d0-80e8-367349f4b8e1</identification>
      </annotationBean>
      <date>2011-03-02 15:12:56.636 CET</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>fc634334-f397-4f68-8119-a853925702b4</identification>
      </annotationBean>
      <date>2011-03-29 10:02:31.511 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2></annotations></dataflow><dataflow id="8b0bd9e6-efa7-4e0a-ba70-48275316a048" role="nested"><name>Workflow39</name><inputPorts><port><name>Raw_Data_Dir</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>Result_Dir</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>Log_File</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>Mode</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port></inputPorts><outputPorts><port><name>mzXML_Output</name><annotations /></port></outputPorts><processors><processor><name>CompassXport</name><inputPorts><port><name>log_file</name><depth>0</depth></port><port><name>result_dir</name><depth>0</depth></port><port><name>raw_data_dir</name><depth>0</depth></port><port><name>raw_flag</name><depth>0</depth></port></inputPorts><outputPorts><port><name>output_file</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="log_file" to="log_file" /><map from="raw_flag" to="raw_flag" /><map from="result_dir" to="result_dir" /><map from="raw_data_dir" to="raw_data_dir" /></inputMap><outputMap><map from="output_file" to="output_file" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>raw_data_dir</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>raw_flag</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>log_file</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>result_dir</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>output_file</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>/****************** Input descriptions ****************/
// input port: String raw_data_dir (depth 0)
// input port: String raw_flag (depth 0)
// input port: String log_file (depth 0)
// input port: String result_dir (depth 0)
// output port: String output_file (depth 0)


/****************** Class Declarations ****************/
class InProcStreamReader extends Thread
{
    private StringBuffer sb;
    public  InputStream is;
    
    InProcStreamReader(InputStream is) {
        this.is = is;
    }// InProcStreamReader(InputStream is) 
    
    public void run() {
        try {
            InputStreamReader isr = new InputStreamReader(is);
            sb = new StringBuffer();
            while ((c = isr.read()) != -1)
                sb.append((char) c);
        } catch (IOException ioe)
        {
          ioe.printStackTrace();  
        }/// catch
    }// run

    public String getOutput() { 
      return sb.toString();
    }// getOutput
}// InProcStreamReader


class FileExtFilter implements FileFilter {
  public FileExtFilter(String ext) {
    this.ext = ext.split(",");
    for (int i=0; i&lt;this.ext.length; i++)
      this.ext[i] = this.ext[i].trim();
  }// FileExtFilter(String ext)

  public boolean accept(File file) {
    for (int i=0; i&lt;this.ext.length; i++) {
      if (file.getName().endsWith(ext[i]))
        return true;
    }// for
    return false;
  }// boolean accept(File file)

  String[] ext = null;

}// class FileExtFilter implements FileFilter


/****************** Global variables ******************/
// Global variable for compassXport path
compassXportDir = "C:\\Program Files (x86)\\Bruker Daltonik\\CompassXport\\";


/****************** Global functions ******************/
// Generates the output file name based on the input directory
String genOutputFileName(String inputDir) {
  File inDir = new File(inputDir);
  int dotPos = inDir.getName().lastIndexOf(".");

  return (inDir.getName().substring(0, dotPos+1) + "mzXML");
}// String genOutputFileName(String inputFile) 

// Generates the output file name based on the input file
String findRawDataFile(String input_dir) {
  File inputDir = new File(input_dir);
  // Listing files according to the supported compassXport extensions
  File[] fileObjList = inputDir.listFiles(new FileExtFilter("yep,baf"));
  ArrayList filelist = new ArrayList();

  for (int i=0; i&lt;fileObjList.length; i++) {
    filelist.add(fileObjList[i].getAbsolutePath());
  }// for 

  // Prioritizing: firt yep, then baf, then fid
  for (int i=0; i&lt;filelist.size(); i++) {
    if (filelist.get(i).contains(".yep")) {
      return filelist.get(i);
    }
  }// for
  for (int i=0; i&lt;filelist.size(); i++) {
    if (filelist.get(i).contains(".baf"))
      return filelist.get(i);
  }// for
 
}// String genOutputFileName(String inputFile) 


/************** Main matter, input checking ************/
// Checking the input directory
if (raw_data_dir == void || raw_data_dir.equals("")) {
  throw new RuntimeException("The 'raw_data_dir' port cannot be null or empty.");
}
inputDir = new File(raw_data_dir);
if (!inputDir.exists()) {
  throw new RuntimeException("The 'raw_data_dir' parameter does not exist");
}// if

resultDir = new File(result_dir);
if (!resultDir.exists()) {
  throw new RuntimeException("The 'result_dir' parameter does not exist");
}// if

/************ Main matter, Running executable **********/
// Setting up the command line 
appArray = new ArrayList();

// Adding the command itself
appArray.add(compassXportDir + "CompassXport.exe");

// Adding the input file argument
appArray.add("-a");
appArray.add(findRawDataFile(raw_data_dir));

// Adding the output file argument
outputFile = new File(resultDir, genOutputFileName(raw_data_dir));
output_file = outputFile.getAbsolutePath();
appArray.add("-o");
appArray.add(output_file);

// Adding raw flag data
if (!(raw_flag == void || raw_flag.equals("")) &amp;&amp; !raw_flag.equals("0")) {
  appArray.add("-raw");
  appArray.add("1");
}// if

// Adding the output file mode
appArray.add("-mode");
appArray.add("0");

workdir = new File(compassXportDir);
launcher = new ProcessBuilder(appArray);
launcher.directory = workdir;
proc = launcher.start();

outputReader = new InProcStreamReader(proc.getInputStream());
outputReader.start();
                                    
// any error???
exitVal = proc.waitFor();
outputReader.join();

/************** Main matter, generating log ************/
fstream = new FileWriter(log_file, true);
out = new BufferedWriter(fstream);

if (!(log_file == void || log_file.equals(""))) {
  out.write("=============== CompassXport ==============="); 
  out.newLine();
  out.write(outputReader.getOutput()); 
  out.newLine();
  out.close();
}// if


</script>
  <dependencies />
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="log_file" depth="0" /><port name="result_dir" depth="0" /><port name="raw_data_dir" depth="0" /><port name="raw_flag" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor></processors><conditions /><datalinks><datalink><sink type="processor"><processor>CompassXport</processor><port>log_file</port></sink><source type="dataflow"><port>Log_File</port></source></datalink><datalink><sink type="processor"><processor>CompassXport</processor><port>result_dir</port></sink><source type="dataflow"><port>Result_Dir</port></source></datalink><datalink><sink type="processor"><processor>CompassXport</processor><port>raw_data_dir</port></sink><source type="dataflow"><port>Raw_Data_Dir</port></source></datalink><datalink><sink type="processor"><processor>CompassXport</processor><port>raw_flag</port></sink><source type="dataflow"><port>Mode</port></source></datalink><datalink><sink type="dataflow"><port>mzXML_Output</port></sink><source type="processor"><processor>CompassXport</processor><port>output_file</port></source></datalink></datalinks><annotations><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>8b0bd9e6-efa7-4e0a-ba70-48275316a048</identification>
      </annotationBean>
      <date>2011-04-12 17:21:03.557 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>1e6e3390-b67e-401b-9891-37a7611791aa</identification>
      </annotationBean>
      <date>2011-03-31 17:52:21.216 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2></annotations></dataflow><dataflow id="f46c7767-32be-4981-a430-f1aa790ba7c3" role="nested"><name>Workflow39</name><inputPorts><port><name>Raw_Data_Dir</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>Result_Dir</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>Log_File</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>Mode</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port></inputPorts><outputPorts><port><name>mzXML_Output</name><annotations /></port></outputPorts><processors><processor><name>CompassXport</name><inputPorts><port><name>log_file</name><depth>0</depth></port><port><name>result_dir</name><depth>0</depth></port><port><name>raw_data_dir</name><depth>0</depth></port><port><name>raw_flag</name><depth>0</depth></port></inputPorts><outputPorts><port><name>output_file</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="log_file" to="log_file" /><map from="raw_flag" to="raw_flag" /><map from="raw_data_dir" to="raw_data_dir" /><map from="result_dir" to="result_dir" /></inputMap><outputMap><map from="output_file" to="output_file" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>raw_data_dir</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>raw_flag</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>log_file</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>result_dir</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>output_file</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>/****************** Input descriptions ****************/
// input port: String raw_data_dir (depth 0)
// input port: String raw_flag (depth 0)
// input port: String log_file (depth 0)
// input port: String result_dir (depth 0)
// output port: String output_file (depth 0)


/****************** Class Declarations ****************/
class InProcStreamReader extends Thread
{
    private StringBuffer sb;
    public  InputStream is;
    
    InProcStreamReader(InputStream is) {
        this.is = is;
    }// InProcStreamReader(InputStream is) 
    
    public void run() {
        try {
            InputStreamReader isr = new InputStreamReader(is);
            sb = new StringBuffer();
            while ((c = isr.read()) != -1)
                sb.append((char) c);
        } catch (IOException ioe)
        {
          ioe.printStackTrace();  
        }/// catch
    }// run

    public String getOutput() { 
      return sb.toString();
    }// getOutput
}// InProcStreamReader


class FileExtFilter implements FileFilter {
  public FileExtFilter(String ext) {
    this.ext = ext.split(",");
    for (int i=0; i&lt;this.ext.length; i++)
      this.ext[i] = this.ext[i].trim();
  }// FileExtFilter(String ext)

  public boolean accept(File file) {
    for (int i=0; i&lt;this.ext.length; i++) {
      if (file.getName().endsWith(ext[i]))
        return true;
    }// for
    return false;
  }// boolean accept(File file)

  String[] ext = null;

}// class FileExtFilter implements FileFilter


/****************** Global variables ******************/
// Global variable for compassXport path
compassXportDir = "C:\\Program Files (x86)\\Bruker Daltonik\\CompassXport\\";


/****************** Global functions ******************/
// Generates the output file name based on the input directory
String genOutputFileName(String inputDir) {
  File inDir = new File(inputDir);
  int dotPos = inDir.getName().lastIndexOf(".");

  return (inDir.getName().substring(0, dotPos+1) + "mzXML");
}// String genOutputFileName(String inputFile) 

// Generates the output file name based on the input file
String findRawDataFile(String input_dir) {
  File inputDir = new File(input_dir);
  // Listing files according to the supported compassXport extensions
  File[] fileObjList = inputDir.listFiles(new FileExtFilter("yep,baf"));
  ArrayList filelist = new ArrayList();

  for (int i=0; i&lt;fileObjList.length; i++) {
    filelist.add(fileObjList[i].getAbsolutePath());
  }// for 

  // Prioritizing: firt yep, then baf, then fid
  for (int i=0; i&lt;filelist.size(); i++) {
    if (filelist.get(i).contains(".yep")) {
      return filelist.get(i);
    }
  }// for
  for (int i=0; i&lt;filelist.size(); i++) {
    if (filelist.get(i).contains(".baf"))
      return filelist.get(i);
  }// for
 
}// String genOutputFileName(String inputFile) 


/************** Main matter, input checking ************/
// Checking the input directory
if (raw_data_dir == void || raw_data_dir.equals("")) {
  throw new RuntimeException("The 'raw_data_dir' port cannot be null or empty.");
}
inputDir = new File(raw_data_dir);
if (!inputDir.exists()) {
  throw new RuntimeException("The 'raw_data_dir' parameter does not exist");
}// if

resultDir = new File(result_dir);
if (!resultDir.exists()) {
  throw new RuntimeException("The 'result_dir' parameter does not exist");
}// if

/************ Main matter, Running executable **********/
// Setting up the command line 
appArray = new ArrayList();

// Adding the command itself
appArray.add(compassXportDir + "CompassXport.exe");

// Adding the input file argument
appArray.add("-a");
appArray.add(findRawDataFile(raw_data_dir));

// Adding the output file argument
outputFile = new File(resultDir, genOutputFileName(raw_data_dir));
output_file = outputFile.getAbsolutePath();
appArray.add("-o");
appArray.add(output_file);

// Adding raw flag data
if (!(raw_flag == void || raw_flag.equals("")) &amp;&amp; !raw_flag.equals("0")) {
  appArray.add("-raw");
  appArray.add("1");
}// if

// Adding the output file mode
appArray.add("-mode");
appArray.add("0");

workdir = new File(compassXportDir);
launcher = new ProcessBuilder(appArray);
launcher.directory = workdir;
proc = launcher.start();

outputReader = new InProcStreamReader(proc.getInputStream());
outputReader.start();
                                    
// any error???
exitVal = proc.waitFor();
outputReader.join();

/************** Main matter, generating log ************/
fstream = new FileWriter(log_file, true);
out = new BufferedWriter(fstream);

if (!(log_file == void || log_file.equals(""))) {
  out.write("=============== CompassXport ==============="); 
  out.newLine();
  out.write(outputReader.getOutput()); 
  out.newLine();
  out.close();
}// if


</script>
  <dependencies />
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="log_file" depth="0" /><port name="result_dir" depth="0" /><port name="raw_data_dir" depth="0" /><port name="raw_flag" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor></processors><conditions /><datalinks><datalink><sink type="processor"><processor>CompassXport</processor><port>log_file</port></sink><source type="dataflow"><port>Log_File</port></source></datalink><datalink><sink type="processor"><processor>CompassXport</processor><port>result_dir</port></sink><source type="dataflow"><port>Result_Dir</port></source></datalink><datalink><sink type="processor"><processor>CompassXport</processor><port>raw_data_dir</port></sink><source type="dataflow"><port>Raw_Data_Dir</port></source></datalink><datalink><sink type="processor"><processor>CompassXport</processor><port>raw_flag</port></sink><source type="dataflow"><port>Mode</port></source></datalink><datalink><sink type="dataflow"><port>mzXML_Output</port></sink><source type="processor"><processor>CompassXport</processor><port>output_file</port></source></datalink></datalinks><annotations><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>f46c7767-32be-4981-a430-f1aa790ba7c3</identification>
      </annotationBean>
      <date>2011-04-12 17:21:20.243 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>90f4b6da-2ed0-4faa-b614-58e19578c85c</identification>
      </annotationBean>
      <date>2011-04-06 16:49:31.619 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>1e6e3390-b67e-401b-9891-37a7611791aa</identification>
      </annotationBean>
      <date>2011-03-31 17:52:21.216 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>a476eb7b-fc48-4ae3-ad55-9a74c5cbfbb5</identification>
      </annotationBean>
      <date>2011-04-06 16:44:50.867 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2></annotations></dataflow><dataflow id="b8b346e0-813e-42d3-aad9-25179375ed6d" role="nested"><name>Workflow49</name><inputPorts><port><name>Log_File</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>msHybrid_Pars</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>pepAlign_Pars</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>pepXML_Input</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>FT_mzXML_Input</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>IT_mzXML_Input</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port></inputPorts><outputPorts><port><name>Warped_pepXML_Output</name><annotations /></port><port><name>Hybrid_IT_mzXML_Output</name><annotations /></port></outputPorts><processors><processor><name>pepAlign</name><inputPorts><port><name>log_file</name><depth>0</depth></port><port><name>arguments</name><depth>0</depth></port><port><name>mzXML_file</name><depth>0</depth></port><port><name>pepXML_file</name><depth>0</depth></port></inputPorts><outputPorts><port><name>plf_output</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="pepXML_file" to="pepXML_file" /><map from="arguments" to="arguments" /><map from="log_file" to="log_file" /><map from="mzXML_file" to="mzXML_file" /></inputMap><outputMap><map from="plf_output" to="plf_output" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>mzXML_file</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>pepXML_file</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>arguments</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>log_file</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>plf_output</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>/****************** Input descriptions ****************/
// input port: String mzXML_file (depth 0)
// input port: String pepXML_file (depth 0)
// input port: String arguments (depth 0)
// input port: String log_file (depth 0)
// output port: String plf_output (depth 0)


/****************** Class Declarations ****************/
class InProcStreamReader extends Thread
{
    private StringBuffer sb;
    public  InputStream is;
    
    InProcStreamReader(InputStream is) {
        this.is = is;
    }// InProcStreamReader(InputStream is) 
    
    public void run() {
        try {
            InputStreamReader isr = new InputStreamReader(is);
            sb = new StringBuffer();
            while ((c = isr.read()) != -1)
                sb.append((char) c);
        } catch (IOException ioe)
        {
          ioe.printStackTrace();  
        }/// catch
    }// run

    public String getOutput() { 
      return sb.toString();
    }// getOutput
}// InProcStreamReader


/****************** Global variables ******************/
// Global variable for the tools path
installDir = "C:\\Users\\nmpalmblad\\MCP_Workflows\\MCP_Workflows\\";


/****************** Global functions ******************/
// Generates the output file name based on the input directory
String genOutputFileName(String inputFile) {
  int dotPos = inputFile.lastIndexOf(".");
  return (inputFile.substring(0, dotPos));
}// String genOutputFileName(String inputFile) 


/************** Main matter, input checking ************/
// Checking the input directory
if (mzXML_file == void || mzXML_file.equals("")) {
  throw new RuntimeException("The 'mzXML_file' port cannot be null or empty.");
} else if (pepXML_file == void || pepXML_file.equals("")) {
  throw new RuntimeException("The 'pepXML_file' port cannot be null or empty.");
}// else if

/************ Main matter, Running executable **********/
// Setting up the command line 
appArray = new ArrayList();

// Adding the command itself
appArray.add(installDir + "Tools\\pepAlign\\pepAlign.exe");

// Adding the input arguments
appArray.add("-m" + mzXML_file);
appArray.add("-p" + pepXML_file);

// Adding the output file argument
// Setting the output file
tmpout = genOutputFileName(pepXML_file);
appArray.add("-o" + tmpout);

// Checking other arguments
if (arguments != void &amp;&amp; !arguments.equals("")) {
  // Filtering the attribute string list
  st = new StringTokenizer(arguments, " "); 
  while (st.hasMoreTokens()) {  
    appArray.add(st.nextToken()); 
  }// while
}// if

workdir = new File(installDir);
launcher = new ProcessBuilder(appArray);
launcher.directory = workdir;
proc = launcher.start();

outputReader = new InProcStreamReader(proc.getInputStream());
outputReader.start();
                                    
// any error???
exitVal = proc.waitFor();
outputReader.join();

/************** Main matter, generating log ************/
fstream = new FileWriter(log_file, true);
out = new BufferedWriter(fstream);

if (!(log_file == void || log_file.equals(""))) {
  out.write("=============== pepAlign ==============="); 
  out.newLine();
  out.write("Parameters: ");
  for (i=0; i&lt;appArray.size(); i++)
    out.write(appArray.get(i).toString());
  out.newLine();
  out.write("Output:");
  out.newLine();
  out.write(outputReader.getOutput()); 
  out.newLine();
  out.close();
}// if

// final step, assigning the output
if (exitVal == 0)
  plf_output = tmpout + ".plf";
else
  plf_output = NULL;</script>
  <dependencies />
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="log_file" depth="0" /><port name="arguments" depth="0" /><port name="mzXML_file" depth="0" /><port name="pepXML_file" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>pepWarp</name><inputPorts><port><name>plf_file</name><depth>0</depth></port><port><name>log_file</name><depth>0</depth></port><port><name>mzXML_file</name><depth>0</depth></port><port><name>pepXML_file</name><depth>0</depth></port></inputPorts><outputPorts><port><name>pepXML_output</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="pepXML_file" to="pepXML_file" /><map from="log_file" to="log_file" /><map from="plf_file" to="plf_file" /><map from="mzXML_file" to="mzXML_file" /></inputMap><outputMap><map from="pepXML_output" to="pepXML_output" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>mzXML_file</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>pepXML_file</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>plf_file</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>log_file</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>pepXML_output</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>/****************** Input descriptions ****************/
// input port: String mzXML_file (depth 0)
// input port: String pepXML_file (depth 0)
// input port: String plf_file (depth 0)
// input port: String log_file (depth 0)
// output port: String pepXML_output (depth 0)


/****************** Class Declarations ****************/
class InProcStreamReader extends Thread
{
    private StringBuffer sb;
    public  InputStream is;
    
    InProcStreamReader(InputStream is) {
        this.is = is;
    }// InProcStreamReader(InputStream is) 
    
    public void run() {
        try {
            InputStreamReader isr = new InputStreamReader(is);
            sb = new StringBuffer();
            while ((c = isr.read()) != -1)
                sb.append((char) c);
        } catch (IOException ioe)
        {
          ioe.printStackTrace();  
        }/// catch
    }// run

    public String getOutput() { 
      return sb.toString();
    }// getOutput
}// InProcStreamReader


/****************** Global variables ******************/
// Global variable for tools path
installDir = "C:\\Users\\nmpalmblad\\MCP_Workflows\\MCP_Workflows\\";


/****************** Global functions ******************/
// Generates the output file name based on the input directory
String genOutputFileName(String inputFile) {
  dotPos = inputFile.lastIndexOf(".");
  dotPos =inputFile.substring(0, dotPos).lastIndexOf(".");
  return (inputFile.substring(0, dotPos) + "W.pep.xml");
}// String genOutputFileName(String inputFile) 


/************** Main matter, input checking ************/
// Checking the input directory
if (mzXML_file == void || mzXML_file.equals("")) {
  throw new RuntimeException("The 'mzXML_file' port cannot be null or empty.");
} else if (pepXML_file == void || pepXML_file.equals("")) {
  throw new RuntimeException("The 'pepXML_file' port cannot be null or empty.");
}// else if

/************ Main matter, Running executable **********/
// Setting up the command line 
appArray = new ArrayList();

appArray.add(installDir + "Tools\\pepWarp\\pepWarp.exe");

// Adding the input arguments
appArray.add("-m" + mzXML_file);
appArray.add("-p" + pepXML_file);
appArray.add("-f" + plf_file);

// Adding the output file argument
tmpout = genOutputFileName(pepXML_file);
appArray.add("-o" + tmpout);

workdir = new File(installDir);
launcher = new ProcessBuilder(appArray);
launcher.directory = workdir;
proc = launcher.start();

outputReader = new InProcStreamReader(proc.getInputStream());
outputReader.start();
                                    
// any error???
exitVal = proc.waitFor();
outputReader.join();

/************** Main matter, generating log ************/
fstream = new FileWriter(log_file, true);
out = new BufferedWriter(fstream);

if (!(log_file == void || log_file.equals(""))) {
  out.write("=============== pepWarp ==============="); 
  out.newLine();
  out.write("Parameters: ");
  for (i=0; i&lt;appArray.size(); i++)
    out.write(appArray.get(i).toString());
  out.newLine();
  out.write("Output:");
  out.newLine();
  out.write(outputReader.getOutput()); 
  out.newLine();
  out.close();
}// if

// final step, assigning the output
if (exitVal == 0)
  pepXML_output = tmpout;
else
  pepXML_output = NULL;</script>
  <dependencies />
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="plf_file" depth="0" /><port name="log_file" depth="0" /><port name="mzXML_file" depth="0" /><port name="pepXML_file" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>msHybrid</name><inputPorts><port><name>plf_file</name><depth>0</depth></port><port><name>log_file</name><depth>0</depth></port><port><name>arguments</name><depth>0</depth></port><port><name>IT_mzXML_file</name><depth>0</depth></port><port><name>FT_mzXML_file</name><depth>0</depth></port></inputPorts><outputPorts><port><name>mzXML_output</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="arguments" to="arguments" /><map from="log_file" to="log_file" /><map from="plf_file" to="plf_file" /><map from="IT_mzXML_file" to="IT_mzXML_file" /><map from="FT_mzXML_file" to="FT_mzXML_file" /></inputMap><outputMap><map from="mzXML_output" to="mzXML_output" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>IT_mzXML_file</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>FT_mzXML_file</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>plf_file</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>log_file</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>arguments</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>mzXML_output</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>/****************** Input descriptions ****************/
// input port: String IT_mzXML_file (depth 0)
// input port: String FT_mzXML_file (depth 0)
// input port: String plf_file (depth 0)
// input port: String log_file (depth 0)
// input port: String arguments (depth 0)
// output port: String mzXML_output (depth 0)


/****************** Class Declarations ****************/
class InProcStreamReader extends Thread
{
    private StringBuffer sb;
    public  InputStream is;
    
    InProcStreamReader(InputStream is) {
        this.is = is;
    }// InProcStreamReader(InputStream is) 
    
    public void run() {
        try {
            InputStreamReader isr = new InputStreamReader(is);
            sb = new StringBuffer();
            while ((c = isr.read()) != -1)
                sb.append((char) c);
        } catch (IOException ioe)
        {
          ioe.printStackTrace();  
        }/// catch
    }// run

    public String getOutput() { 
      return sb.toString();
    }// getOutput
}// InProcStreamReader


/****************** Global variables ******************/
// Global variable for tools path
installDir = "C:\\Users\\nmpalmblad\\MCP_Workflows\\MCP_Workflows\\";


/****************** Global functions ******************/
// Generates the output file name based on the input directory
String genOutputFileName(String inputFile) {
  int dotPos = inputFile.lastIndexOf(".");
  return (inputFile.substring(0, dotPos) + "H.mzXML");
}// String genOutputFileName(String inputFile) 


/************** Main matter, input checking ************/
// Checking the input directory
if (IT_mzXML_file == void || IT_mzXML_file.equals("")) {
  throw new RuntimeException("The 'IT_mzXML_file' port cannot be null or empty.");
} else if (FT_mzXML_file == void || FT_mzXML_file.equals("")) {
  throw new RuntimeException("The 'FT_mzXML_file' port cannot be null or empty.");
} else if (plf_file == void || plf_file.equals("")) {
  throw new RuntimeException("The 'plf_file' port cannot be null or empty.");
}// else if

/************ Main matter, Running executable **********/
// Setting up the command line 
appArray = new ArrayList();

// Adding the command itself
appArray.add(installDir + "Tools\\msHybrid\\msHybrid.exe");

// Adding the input arguments
appArray.add("-i" + IT_mzXML_file);
appArray.add("-f" + FT_mzXML_file);
appArray.add("-p" + plf_file);

// Setting the output file
tmpout = genOutputFileName(IT_mzXML_file);
appArray.add("-o" + tmpout);

// Checking other arguments
if (arguments != void &amp;&amp; !arguments.equals("")) {
  // Filtering the attribute string list
  StringTokenizer st = new StringTokenizer(arguments, " "); 
  while (st.hasMoreTokens()) {  
    appArray.add(st.nextToken()); 
  }// while
}// if

workdir = new File(installDir);
launcher = new ProcessBuilder(appArray);
launcher.directory = workdir;
proc = launcher.start();

outputReader = new InProcStreamReader(proc.getInputStream());
outputReader.start();
                                    
// any error???
exitVal = proc.waitFor();
outputReader.join();

/************** Main matter, generating log ************/
fstream = new FileWriter(log_file, true);
out = new BufferedWriter(fstream);

if (!(log_file == void || log_file.equals(""))) {
  out.write("=============== msHybrid ==============="); 
  out.newLine();
  out.write("Parameters: ");
  for (i=0; i&lt;appArray.size(); i++)
    out.write(appArray.get(i).toString());
  out.newLine();
  out.write("Output:");
  out.newLine();
  out.write(outputReader.getOutput()); 
  out.newLine();
  out.close();
}// if

// final step, assigning the output
if (exitVal == 0)
  mzXML_output = tmpout;
else
  mzXML_output = NULL;
</script>
  <dependencies />
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="plf_file" depth="0" /><port name="log_file" depth="0" /><port name="arguments" depth="0" /><port name="IT_mzXML_file" depth="0" /><port name="FT_mzXML_file" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor></processors><conditions /><datalinks><datalink><sink type="processor"><processor>pepAlign</processor><port>log_file</port></sink><source type="dataflow"><port>Log_File</port></source></datalink><datalink><sink type="processor"><processor>pepAlign</processor><port>arguments</port></sink><source type="dataflow"><port>pepAlign_Pars</port></source></datalink><datalink><sink type="processor"><processor>pepAlign</processor><port>mzXML_file</port></sink><source type="dataflow"><port>FT_mzXML_Input</port></source></datalink><datalink><sink type="processor"><processor>pepAlign</processor><port>pepXML_file</port></sink><source type="dataflow"><port>pepXML_Input</port></source></datalink><datalink><sink type="processor"><processor>pepWarp</processor><port>plf_file</port></sink><source type="processor"><processor>pepAlign</processor><port>plf_output</port></source></datalink><datalink><sink type="processor"><processor>pepWarp</processor><port>log_file</port></sink><source type="dataflow"><port>Log_File</port></source></datalink><datalink><sink type="processor"><processor>pepWarp</processor><port>mzXML_file</port></sink><source type="dataflow"><port>IT_mzXML_Input</port></source></datalink><datalink><sink type="processor"><processor>pepWarp</processor><port>pepXML_file</port></sink><source type="dataflow"><port>pepXML_Input</port></source></datalink><datalink><sink type="processor"><processor>msHybrid</processor><port>plf_file</port></sink><source type="processor"><processor>pepAlign</processor><port>plf_output</port></source></datalink><datalink><sink type="processor"><processor>msHybrid</processor><port>log_file</port></sink><source type="dataflow"><port>Log_File</port></source></datalink><datalink><sink type="processor"><processor>msHybrid</processor><port>arguments</port></sink><source type="dataflow"><port>msHybrid_Pars</port></source></datalink><datalink><sink type="processor"><processor>msHybrid</processor><port>IT_mzXML_file</port></sink><source type="dataflow"><port>IT_mzXML_Input</port></source></datalink><datalink><sink type="processor"><processor>msHybrid</processor><port>FT_mzXML_file</port></sink><source type="dataflow"><port>FT_mzXML_Input</port></source></datalink><datalink><sink type="dataflow"><port>Warped_pepXML_Output</port></sink><source type="processor"><processor>pepWarp</processor><port>pepXML_output</port></source></datalink><datalink><sink type="dataflow"><port>Hybrid_IT_mzXML_Output</port></sink><source type="processor"><processor>msHybrid</processor><port>mzXML_output</port></source></datalink></datalinks><annotations><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>b8b346e0-813e-42d3-aad9-25179375ed6d</identification>
      </annotationBean>
      <date>2011-04-12 17:13:34.19 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>a2b88812-f370-419e-ba2c-1540befc26b8</identification>
      </annotationBean>
      <date>2011-03-30 20:55:31.253 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>9edddba7-38e0-4e54-8f4e-965cb53c0d53</identification>
      </annotationBean>
      <date>2011-03-22 16:41:00.166 CET</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>b662c34a-48a2-4f28-bd2c-800d593210a6</identification>
      </annotationBean>
      <date>2011-04-06 16:26:14.727 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2></annotations></dataflow><dataflow id="fe8cd703-1b1e-48a1-b219-5e0e1ae85409" role="nested"><name>Workflow1</name><inputPorts><port><name>FT_mzXML_File</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>Log_File</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>IT_mzXML_File</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>FASTA_File</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>Tandem_Param_File</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>Prophet_Pars</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>pepAlign_Pars</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>msHybrid_Pars</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port></inputPorts><outputPorts><port><name>Hybrid_IT_mzXML_File</name><annotations /></port><port><name>Warped_pepXML_File</name><annotations /></port></outputPorts><processors><processor><name>Workflow_1</name><inputPorts><port><name>Log_File</name><depth>0</depth></port><port><name>FASTA_File</name><depth>0</depth></port><port><name>Prophet_Pars</name><depth>0</depth></port><port><name>Tandem_Param_File</name><depth>0</depth></port><port><name>mzXML_File</name><depth>0</depth></port></inputPorts><outputPorts><port><name>pepXML_Output</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>dataflow-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.dataflow.DataflowActivity</class><inputMap><map from="Prophet_Pars" to="Prophet_Pars" /><map from="mzXML_File" to="mzXML_File" /><map from="Tandem_Param_File" to="Tandem_Param_File" /><map from="Log_File" to="Log_File" /><map from="FASTA_File" to="FASTA_File" /></inputMap><outputMap><map from="pepXML_Output" to="pepXML_Output" /></outputMap><configBean encoding="dataflow"><dataflow ref="7002c2b8-81bc-40aa-b029-fb216294ba2d" /></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="Log_File" depth="0" /><port name="FASTA_File" depth="0" /><port name="Prophet_Pars" depth="0" /><port name="Tandem_Param_File" depth="0" /><port name="mzXML_File" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>Workflow_2a</name><inputPorts><port><name>Log_File</name><depth>0</depth></port><port><name>pepAlign_Pars</name><depth>0</depth></port><port><name>msHybrid_Pars</name><depth>0</depth></port><port><name>IT_mzXML_Input</name><depth>0</depth></port><port><name>pepXML_Input</name><depth>0</depth></port><port><name>FT_mzXML_Input</name><depth>0</depth></port></inputPorts><outputPorts><port><name>Hybrid_IT_mzXML_Output</name><depth>0</depth><granularDepth>0</granularDepth></port><port><name>Warped_pepXML_Output</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>dataflow-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.dataflow.DataflowActivity</class><inputMap><map from="msHybrid_Pars" to="msHybrid_Pars" /><map from="IT_mzXML_Input" to="IT_mzXML_Input" /><map from="FT_mzXML_Input" to="FT_mzXML_Input" /><map from="Log_File" to="Log_File" /><map from="pepXML_Input" to="pepXML_Input" /><map from="pepAlign_Pars" to="pepAlign_Pars" /></inputMap><outputMap><map from="Hybrid_IT_mzXML_Output" to="Hybrid_IT_mzXML_Output" /><map from="Warped_pepXML_Output" to="Warped_pepXML_Output" /></outputMap><configBean encoding="dataflow"><dataflow ref="b8b346e0-813e-42d3-aad9-25179375ed6d" /></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="Log_File" depth="0" /><port name="msHybrid_Pars" depth="0" /><port name="pepAlign_Pars" depth="0" /><dot><port name="pepXML_Input" depth="0" /><port name="IT_mzXML_Input" depth="0" /></dot><port name="FT_mzXML_Input" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor></processors><conditions /><datalinks><datalink><sink type="processor"><processor>Workflow_1</processor><port>Log_File</port></sink><source type="dataflow"><port>Log_File</port></source></datalink><datalink><sink type="processor"><processor>Workflow_1</processor><port>FASTA_File</port></sink><source type="dataflow"><port>FASTA_File</port></source></datalink><datalink><sink type="processor"><processor>Workflow_1</processor><port>Prophet_Pars</port></sink><source type="dataflow"><port>Prophet_Pars</port></source></datalink><datalink><sink type="processor"><processor>Workflow_1</processor><port>Tandem_Param_File</port></sink><source type="dataflow"><port>Tandem_Param_File</port></source></datalink><datalink><sink type="processor"><processor>Workflow_1</processor><port>mzXML_File</port></sink><source type="dataflow"><port>IT_mzXML_File</port></source></datalink><datalink><sink type="processor"><processor>Workflow_2a</processor><port>Log_File</port></sink><source type="dataflow"><port>Log_File</port></source></datalink><datalink><sink type="processor"><processor>Workflow_2a</processor><port>pepAlign_Pars</port></sink><source type="dataflow"><port>pepAlign_Pars</port></source></datalink><datalink><sink type="processor"><processor>Workflow_2a</processor><port>msHybrid_Pars</port></sink><source type="dataflow"><port>msHybrid_Pars</port></source></datalink><datalink><sink type="processor"><processor>Workflow_2a</processor><port>IT_mzXML_Input</port></sink><source type="dataflow"><port>IT_mzXML_File</port></source></datalink><datalink><sink type="processor"><processor>Workflow_2a</processor><port>pepXML_Input</port></sink><source type="processor"><processor>Workflow_1</processor><port>pepXML_Output</port></source></datalink><datalink><sink type="processor"><processor>Workflow_2a</processor><port>FT_mzXML_Input</port></sink><source type="dataflow"><port>FT_mzXML_File</port></source></datalink><datalink><sink type="dataflow"><port>Hybrid_IT_mzXML_File</port></sink><source type="processor"><processor>Workflow_2a</processor><port>Hybrid_IT_mzXML_Output</port></source></datalink><datalink><sink type="dataflow"><port>Warped_pepXML_File</port></sink><source type="processor"><processor>Workflow_2a</processor><port>Warped_pepXML_Output</port></source></datalink></datalinks><annotations><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>d1b5ead8-aca1-46d3-ab93-8805f87bbddc</identification>
      </annotationBean>
      <date>2011-04-06 18:18:13.940 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>277265d4-e02e-4623-a7bb-ab4c31cdaf44</identification>
      </annotationBean>
      <date>2011-01-31 18:24:31.627 CET</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>480b7bd4-880e-47d8-90e6-9141c0176830</identification>
      </annotationBean>
      <date>2011-03-30 11:24:36.536 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>0ffcddce-7abc-47cf-88fc-863d8586e37e</identification>
      </annotationBean>
      <date>2011-03-02 15:15:11.461 CET</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>8c981033-8bb0-4c64-9205-06825222fd91</identification>
      </annotationBean>
      <date>2011-03-02 14:17:58.3 CET</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>e5606b0b-0e3c-46f3-8881-338599cc9a9f</identification>
      </annotationBean>
      <date>2011-04-12 17:13:59.437 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>a5952bb6-5601-4452-97ae-2e38b0714327</identification>
      </annotationBean>
      <date>2011-03-02 14:17:28.269 CET</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>3fcf6a66-1d66-4bf8-bdf4-60c5f89fffd3</identification>
      </annotationBean>
      <date>2011-02-14 13:19:48.246 CET</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>1a69ef77-2d11-4a79-b5f4-025d67a2dcad</identification>
      </annotationBean>
      <date>2011-12-01 13:07:58.538 CET</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>ed6568dc-4b14-4a16-bddd-6d0c3c35ce1f</identification>
      </annotationBean>
      <date>2011-03-30 11:30:23.39 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>25f6114d-e1d8-47db-b649-158eacaa6286</identification>
      </annotationBean>
      <date>2011-03-02 15:50:11.203 CET</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>887a8697-be86-47d3-b68f-36f7101e779a</identification>
      </annotationBean>
      <date>2011-03-30 11:21:54.218 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>e3683b10-b410-4a9a-a636-03f22450e6f8</identification>
      </annotationBean>
      <date>2011-01-31 13:20:09.263 CET</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>169190a1-6972-4b7b-9d3b-10b91dca1a92</identification>
      </annotationBean>
      <date>2011-04-06 15:54:38.214 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>d5f8eef1-1151-4102-8390-ccb689e8461d</identification>
      </annotationBean>
      <date>2011-04-06 16:26:32.966 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>86b507f9-8305-4d67-8fdf-8bdc634f4b82</identification>
      </annotationBean>
      <date>2011-04-07 14:26:45.964 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>11c23ec1-21bf-47d8-a541-3a014c5fd977</identification>
      </annotationBean>
      <date>2011-03-30 11:08:47.41 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>ec6e0aa1-f2f2-4c08-9f7e-d9b3f762fef0</identification>
      </annotationBean>
      <date>2011-03-03 18:17:00.94 CET</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>ad9bd1ec-20b3-41dc-881d-22873c2bde47</identification>
      </annotationBean>
      <date>2011-03-30 20:40:07.865 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>5eac5aa8-fa9c-4c54-b78c-af0bf1abfb60</identification>
      </annotationBean>
      <date>2011-03-22 16:44:23.304 CET</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>4775591d-c963-4802-9744-c747d699d9dc</identification>
      </annotationBean>
      <date>2011-04-06 16:31:58.898 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>a993eb6f-46c4-40c8-8b46-3a332279d7bd</identification>
      </annotationBean>
      <date>2011-03-30 20:55:36.476 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>8779418d-6b45-475a-b873-6478002f66cb</identification>
      </annotationBean>
      <date>2011-03-30 11:11:37.226 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>ec186f25-4750-4f62-aeb7-00942e73b976</identification>
      </annotationBean>
      <date>2011-03-22 16:56:37.243 CET</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>5f1c87cb-b6bf-403c-b92c-f3008e923727</identification>
      </annotationBean>
      <date>2011-04-07 16:41:23.579 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>a7e7921c-2632-4260-8c9b-9f0fddbb08c2</identification>
      </annotationBean>
      <date>2011-03-29 10:02:54.79 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>fe8cd703-1b1e-48a1-b219-5e0e1ae85409</identification>
      </annotationBean>
      <date>2012-01-02 12:01:42.327 CET</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>64a3cf51-6f1d-403b-a304-897bcf26e5ef</identification>
      </annotationBean>
      <date>2011-03-02 15:41:11.168 CET</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>6d7d69d6-aef5-45ce-88e1-88fe3e7a3a57</identification>
      </annotationBean>
      <date>2011-03-30 20:42:16.970 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>1bb1886d-19dc-45fc-a25f-252c9fbde774</identification>
      </annotationBean>
      <date>2011-03-22 13:30:24.84 CET</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>35d9bc81-665f-4610-a52c-c19f8322d059</identification>
      </annotationBean>
      <date>2011-03-30 11:25:48.246 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>e7415006-a8e8-430a-acbd-01b56a41242a</identification>
      </annotationBean>
      <date>2011-01-31 15:48:13.239 CET</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2></annotations></dataflow><dataflow id="358c1cf3-c331-414f-bf98-4b9390f76106" role="nested"><name>Workflow209</name><inputPorts><port><name>FT_mzXML_File</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>Tandem_Param_File</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>FASTA_File</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>IT_mzXML_Files</name><depth>1</depth><granularDepth>1</granularDepth><annotations /></port><port><name>Prophet_Pars</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>Log_File</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>pepAlign_Pars</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>msHybrid_Pars</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>msRecal_Pars</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port><port><name>Loop_cnt</name><depth>0</depth><granularDepth>0</granularDepth><annotations /></port></inputPorts><outputPorts><port><name>IT_mzXML_Files</name><annotations /></port><port><name>FT_mzXML_File</name><annotations /></port><port><name>Loop_cnt</name><annotations /></port></outputPorts><processors><processor><name>Workflow_2</name><inputPorts><port><name>FT_mzXML_File</name><depth>0</depth></port><port><name>Tandem_Param_File</name><depth>0</depth></port><port><name>FASTA_File</name><depth>0</depth></port><port><name>Prophet_Pars</name><depth>0</depth></port><port><name>Log_File</name><depth>0</depth></port><port><name>pepAlign_Pars</name><depth>0</depth></port><port><name>msHybrid_Pars</name><depth>0</depth></port><port><name>IT_mzXML_File</name><depth>0</depth></port></inputPorts><outputPorts><port><name>Warped_pepXML_File</name><depth>0</depth><granularDepth>0</granularDepth></port><port><name>Hybrid_IT_mzXML_File</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>dataflow-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.dataflow.DataflowActivity</class><inputMap><map from="Prophet_Pars" to="Prophet_Pars" /><map from="msHybrid_Pars" to="msHybrid_Pars" /><map from="Tandem_Param_File" to="Tandem_Param_File" /><map from="Log_File" to="Log_File" /><map from="IT_mzXML_File" to="IT_mzXML_File" /><map from="pepAlign_Pars" to="pepAlign_Pars" /><map from="FT_mzXML_File" to="FT_mzXML_File" /><map from="FASTA_File" to="FASTA_File" /></inputMap><outputMap><map from="Warped_pepXML_File" to="Warped_pepXML_File" /><map from="Hybrid_IT_mzXML_File" to="Hybrid_IT_mzXML_File" /></outputMap><configBean encoding="dataflow"><dataflow ref="fe8cd703-1b1e-48a1-b219-5e0e1ae85409" /></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="FT_mzXML_File" depth="0" /><port name="Tandem_Param_File" depth="0" /><port name="FASTA_File" depth="0" /><port name="Prophet_Pars" depth="0" /><port name="Log_File" depth="0" /><port name="pepAlign_Pars" depth="0" /><port name="msHybrid_Pars" depth="0" /><port name="IT_mzXML_File" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>msRecal</name><inputPorts><port><name>arguments</name><depth>0</depth></port><port><name>log_file</name><depth>0</depth></port><port><name>pepXML_files</name><depth>1</depth></port><port><name>mzXML_file</name><depth>0</depth></port></inputPorts><outputPorts><port><name>mzXML_output</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="arguments" to="arguments" /><map from="log_file" to="log_file" /><map from="pepXML_files" to="pepXML_files" /><map from="mzXML_file" to="mzXML_file" /></inputMap><outputMap><map from="mzXML_output" to="mzXML_output" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>mzXML_file</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>pepXML_files</name>
      <depth>1</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>arguments</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>log_file</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>mzXML_output</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>/****************** Input descriptions ****************/
// input port: String mzXML_file (depth 0)
// input port: String pepXML_files (depth 1)
// input port: String log_file (depth 0)
// input port: String arguments (depth 0)
// output port: String mzXML_output (depth 0)


/****************** Class Declarations ****************/
class InProcStreamReader extends Thread
{
    private StringBuffer sb;
    public  InputStream is;
    
    InProcStreamReader(InputStream is) {
        this.is = is;
    }// InProcStreamReader(InputStream is) 
    
    public void run() {
        try {
            InputStreamReader isr = new InputStreamReader(is);
            sb = new StringBuffer();
            while ((c = isr.read()) != -1)
                sb.append((char) c);
        } catch (IOException ioe)
        {
          ioe.printStackTrace();  
        }/// catch
    }// run

    public String getOutput() { 
      return sb.toString();
    }// getOutput
}// InProcStreamReader


/****************** Global variables ******************/
// Global variable for tools path
installDir = "C:\\Users\\nmpalmblad\\MCP_Workflows\\MCP_Workflows\\";


/****************** Global functions ******************/
// Generates the output file name based on the input directory
String genOutputFileName(String inputFile) {
  int dotPos = inputFile.lastIndexOf(".");
  return (inputFile.substring(0, dotPos) + "_RC.mzXML");
}// String genOutputFileName(String inputFile) 


/************** Main matter, input checking ************/
// Checking the input directory
if (mzXML_file == void || mzXML_file.equals("")) {
  throw new RuntimeException("The 'mzXML_file' port cannot be null or empty.");
} else if (pepXML_files == void || pepXML_files.size() == 0) {
  throw new RuntimeException("The 'pepXML_files' port cannot be null or empty.");
}

/************ Main matter, Running executable **********/
// Setting up the command line 
appArray = new ArrayList();

// Adding the command itself
appArray.add(installDir + "Tools\\msRecal\\msRecal.exe");

// Adding the input arguments
appArray.add("-m" + mzXML_file);

for(i=0; i&lt;pepXML_files.size(); i++)
  appArray.add("-p" + pepXML_files.get(i));

// Setting the output file
tmpout = genOutputFileName(mzXML_file);
appArray.add("-o" + tmpout);

// Checking other arguments
if (arguments != void &amp;&amp; !arguments.equals("")) {
  // Filtering the attribute string list
  StringTokenizer st = new StringTokenizer(arguments, " "); 
  while (st.hasMoreTokens()) {  
    appArray.add(st.nextToken()); 
  }// while
}// if

workdir = new File(installDir);
launcher = new ProcessBuilder(appArray);
launcher.directory = workdir;
proc = launcher.start();

outputReader = new InProcStreamReader(proc.getInputStream());
outputReader.start();
                                    
// any error???
exitVal = proc.waitFor();
outputReader.join();

/************** Main matter, generating log ************/
fstream = new FileWriter(log_file, true);
out = new BufferedWriter(fstream);

if (!(log_file == void || log_file.equals(""))) {
  out.write("=============== msRecal ==============="); 
  out.newLine();
  out.write("Parameters: ");
  for (i=0; i&lt;appArray.size(); i++)
    out.write(appArray.get(i).toString());
  out.newLine();
  out.write("Output:");
  out.newLine();
  out.write(outputReader.getOutput()); 
  out.newLine();
  out.close();
}// if

// final step, assigning the output
if (exitVal == 0)
  mzXML_output = tmpout;
else
  mzXML_output = NULL;
</script>
  <dependencies />
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="arguments" depth="0" /><port name="log_file" depth="0" /><port name="pepXML_files" depth="1" /><port name="mzXML_file" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>Loop_Decrementer</name><inputPorts><port><name>in_num</name><depth>0</depth></port></inputPorts><outputPorts><port><name>out_num</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="in_num" to="in_num" /></inputMap><outputMap><map from="out_num" to="out_num" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>in_num</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>out_num</name>
      <depth>0</depth>
      <mimeTypes />
      <granularDepth>0</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>// decreases loop val +1
// input_port: in_num
// output_port: out_num
aInt = Integer.parseInt(in_num);
aInt--;    
out_num = aInt.toString();
  </script>
  <dependencies />
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="in_num" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>Echo_List</name><inputPorts><port><name>inputlist</name><depth>1</depth></port></inputPorts><outputPorts><port><name>outputlist</name><depth>1</depth><granularDepth>1</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>localworker-activity</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.activities.localworker.LocalworkerActivity</class><inputMap><map from="inputlist" to="inputlist" /></inputMap><outputMap><map from="outputlist" to="outputlist" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean xmlns="">
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <name>inputlist</name>
      <depth>1</depth>
      <mimeTypes>
        <string>l('')</string>
      </mimeTypes>
      <handledReferenceSchemes />
      <translatedElementType>[B</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <name>outputlist</name>
      <depth>1</depth>
      <mimeTypes>
        <string>l('')</string>
      </mimeTypes>
      <granularDepth>1</granularDepth>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <script>outputlist = inputlist;</script>
  <dependencies />
  <localworkerName>org.embl.ebi.escience.scuflworkers.java.EchoList</localworkerName>
</net.sf.taverna.t2.activities.localworker.LocalworkerActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.3</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="inputlist" depth="1" /></cross></strategy></iteration></iterationStrategyStack></processor></processors><conditions /><datalinks><datalink><sink type="processor"><processor>Workflow_2</processor><port>FT_mzXML_File</port></sink><source type="dataflow"><port>FT_mzXML_File</port></source></datalink><datalink><sink type="processor"><processor>Workflow_2</processor><port>Tandem_Param_File</port></sink><source type="dataflow"><port>Tandem_Param_File</port></source></datalink><datalink><sink type="processor"><processor>Workflow_2</processor><port>FASTA_File</port></sink><source type="dataflow"><port>FASTA_File</port></source></datalink><datalink><sink type="processor"><processor>Workflow_2</processor><port>Prophet_Pars</port></sink><source type="dataflow"><port>Prophet_Pars</port></source></datalink><datalink><sink type="processor"><processor>Workflow_2</processor><port>Log_File</port></sink><source type="dataflow"><port>Log_File</port></source></datalink><datalink><sink type="processor"><processor>Workflow_2</processor><port>pepAlign_Pars</port></sink><source type="dataflow"><port>pepAlign_Pars</port></source></datalink><datalink><sink type="processor"><processor>Workflow_2</processor><port>msHybrid_Pars</port></sink><source type="dataflow"><port>msHybrid_Pars</port></source></datalink><datalink><sink type="processor"><processor>Workflow_2</processor><port>IT_mzXML_File</port></sink><source type="dataflow"><port>IT_mzXML_Files</port></source></datalink><datalink><sink type="processor"><processor>msRecal</processor><port>arguments</port></sink><source type="dataflow"><port>msRecal_Pars</port></source></datalink><datalink><sink type="processor"><processor>msRecal</processor><port>log_file</port></sink><source type="dataflow"><port>Log_File</port></source></datalink><datalink><sink type="processor"><processor>msRecal</processor><port>pepXML_files</port></sink><source type="processor"><processor>Workflow_2</processor><port>Warped_pepXML_File</port></source></datalink><datalink><sink type="processor"><processor>msRecal</processor><port>mzXML_file</port></sink><source type="dataflow"><port>FT_mzXML_File</port></source></datalink><datalink><sink type="processor"><processor>Loop_Decrementer</processor><port>in_num</port></sink><source type="dataflow"><port>Loop_cnt</port></source></datalink><datalink><sink type="processor"><processor>Echo_List</processor><port>inputlist</port></sink><source type="processor"><processor>Workflow_2</processor><port>Hybrid_IT_mzXML_File</port></source></datalink><datalink><sink type="dataflow"><port>IT_mzXML_Files</port></sink><source type="processor"><processor>Echo_List</processor><port>outputlist</port></source></datalink><datalink><sink type="dataflow"><port>FT_mzXML_File</port></sink><source type="processor"><processor>msRecal</processor><port>mzXML_output</port></source></datalink><datalink><sink type="dataflow"><port>Loop_cnt</port></sink><source type="processor"><processor>Loop_Decrementer</processor><port>out_num</port></source></datalink></datalinks><annotations><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>c7a847f8-eb19-47af-949a-50a30fd9fe7a</identification>
      </annotationBean>
      <date>2011-04-07 16:45:15.928 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>89595838-f477-472a-a9d4-4e11d644cf80</identification>
      </annotationBean>
      <date>2011-04-12 17:19:23.58 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>358c1cf3-c331-414f-bf98-4b9390f76106</identification>
      </annotationBean>
      <date>2012-01-02 12:01:44.687 CET</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>f8e005db-736c-4b6e-9223-4b0c1f8e7859</identification>
      </annotationBean>
      <date>2011-04-06 15:54:49.904 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>1a143a98-9926-4e91-a054-d1cd9089e32f</identification>
      </annotationBean>
      <date>2011-04-07 14:29:17.323 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>91dd78de-07de-4297-b952-05b827020cd4</identification>
      </annotationBean>
      <date>2011-04-06 18:18:15.764 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>dca0eb3a-b76f-4b18-8203-694d40af11cd</identification>
      </annotationBean>
      <date>2011-03-30 20:43:42.525 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>8b7463e1-d9a6-47f1-b584-9bea948fbb98</identification>
      </annotationBean>
      <date>2011-03-30 11:31:08.281 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>4ff6fbb9-83ee-4d0c-829b-31c214c69164</identification>
      </annotationBean>
      <date>2011-04-07 14:27:21.760 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>b17e0668-0e8c-4840-a77b-22a5c04dbb5e</identification>
      </annotationBean>
      <date>2011-03-30 20:55:43.999 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>75cd2181-b685-410e-90c0-9965a0cfeac6</identification>
      </annotationBean>
      <date>2011-04-06 16:32:00.836 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>ed75966f-9c49-4afc-984b-23c71540a0c7</identification>
      </annotationBean>
      <date>2011-03-30 11:49:06.64 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>d6b5dab8-b95e-4c21-806d-78c0bfc4226f</identification>
      </annotationBean>
      <date>2011-03-30 21:07:03.535 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>deabdf01-7890-444e-a272-5a9a5def3633</identification>
      </annotationBean>
      <date>2011-04-06 16:20:38.169 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>516adae0-eb5e-4599-8d19-86d8dbe30572</identification>
      </annotationBean>
      <date>2011-04-06 15:52:25.659 CEST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2><annotation_chain_2_2 encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.IdentificationAssertion">
        <identification>054f7ebb-e37b-497e-a6ab-9d3d5d402539</identification>
      </annotationBean>
      <date>2011-12-01 13:09:21.455 CET</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain_2_2></annotations></dataflow></workflow>