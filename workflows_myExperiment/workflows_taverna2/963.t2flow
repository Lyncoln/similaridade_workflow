<workflow xmlns="http://taverna.sf.net/2008/xml/t2flow" version="1" producedBy="taverna-2.1-beta-2"><dataflow id="050978fe-442c-4a82-b7a5-bc61a083cb56" role="top"><name>Workflow28</name><inputPorts><port><name>EXP_ID</name><depth>0</depth><granularDepth>0</granularDepth><annotations><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.FreeTextDescription">
        <text>The id of the experiment in NCI caArray database. See https://array.nci.nih.gov/caarray/.
Returns a evenly </text>
      </annotationBean>
      <date>2009-11-19 13:28:13.428 CST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.FreeTextDescription">
        <text>The id of the experiment in NCI caArray database. See https://array.nci.nih.gov/caarray/.
Returns a evenly divided gene expression data set with corresponding class information. They ca be later used as training and test data set in many classification algorithms.</text>
      </annotationBean>
      <date>2009-11-19 13:29:31.879 CST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.ExampleValue">
        <text>95</text>
      </annotationBean>
      <date>2009-11-19 13:27:39.92 CST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.FreeTextDescription">
        <text>The id of the experiment in NCI caArray database. See https://array.nci.nih.gov/caarray/</text>
      </annotationBean>
      <date>2009-11-19 13:27:34.627 CST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.FreeTextDescription">
        <text>The id of the experiment in NCI caArray database.</text>
      </annotationBean>
      <date>2009-11-19 13:26:54.437 CST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.FreeTextDescription">
        <text>The id of the experiment in NCI caArray database. See https://array.nci.nih.gov/caarray/.
</text>
      </annotationBean>
      <date>2009-11-19 13:36:41.19 CST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain></annotations></port></inputPorts><outputPorts><port><name>testClass</name></port><port><name>trainingClass</name></port><port><name>trainingData</name></port><port><name>testData</name></port></outputPorts><processors><processor><name>searchForHybridizations</name><inputPorts><port><name>parameters</name><depth>0</depth></port></inputPorts><outputPorts><port><name>parameters</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>wsdl-activity</artifact><version>0.8</version></raven><class>net.sf.taverna.t2.activities.wsdl.WSDLActivity</class><inputMap><map from="parameters" to="parameters" /></inputMap><outputMap><map from="parameters" to="parameters" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.wsdl.WSDLActivityConfigurationBean xmlns="">
  <wsdl>http://array.nci.nih.gov/wsrf/services/cagrid/CaArraySvc_v1_0?wsdl</wsdl>
  <operation>searchForHybridizations</operation>
</net.sf.taverna.t2.activities.wsdl.WSDLActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>0.8</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>0.8</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>0.8</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>0.8</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>0.8</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="parameters" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>Beanshell</name><inputPorts><port><name>expid</name><depth>0</depth></port></inputPorts><outputPorts><port><name>searchHyb</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>0.8</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="expid" to="expid" /></inputMap><outputMap><map from="searchHyb" to="searchHyb" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <script>searchHyb = "&lt;SearchForHybridizationsRequest xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://grid.v1_0.external.services.caarray.nci.nih.gov/CaArraySvc_v1_0\"&gt;&lt;criteria&gt;&lt;ns1:HybridizationSearchCriteria xmlns:ns1=\"gme://External.caArray.caBIG/1.0/gov.nih.nci.caarray.external.query\"&gt;&lt;ns1:experiment id=\"URN:LSID:caarray.nci.nih.gov:gov.nih.nci.caarray.external.v1_0.experiment.Experiment:"+expid+"\"/&gt;&lt;ns1:names/&gt;&lt;ns1:biomaterials/&gt;&lt;/ns1:HybridizationSearchCriteria&gt;&lt;/criteria&gt;&lt;limitOffset&gt;&lt;ns2:LimitOffset xsi:nil=\"true\" xmlns:ns2=\"gme://External.caArray.caBIG/1.0/gov.nih.nci.caarray.external.query\"/&gt;&lt;/limitOffset&gt;&lt;/SearchForHybridizationsRequest&gt;";</script>
  <dependencies />
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>expid</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>0</granularDepth>
      <name>searchHyb</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>0.8</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>0.8</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>0.8</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>0.8</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>0.8</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="expid" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>Beanshell2</name><inputPorts><port><name>i</name><depth>0</depth></port></inputPorts><outputPorts><port><name>o</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>0.8</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="i" to="i" /></inputMap><outputMap><map from="o" to="o" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <script>import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.io.IOException;
import java.io.StringReader;
import java.io.StringWriter;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

try{
DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
		docBuilderFactory.setNamespaceAware(true);
        DocumentBuilder docBuilder;
docBuilder = docBuilderFactory.newDocumentBuilder();

   Document doc2 = docBuilder.parse( new InputSource(new StringReader(i)));
			    
				
				Element el = doc2.getDocumentElement();
			   
			XPath xpath = XPathFactory.newInstance().newXPath();
			
			String findHybridizationExpression = 
			"//*[local-name()='AbstractCaArrayEntity' and namespace-uri()='gme://External.caArray.caBIG/1.0/gov.nih.nci.caarray.external.sample']/@id";
			//id="URN:LSID:caarray.nci.nih.gov:gov.nih.nci.caarray.external.v1_0.sample.Hybridization:8388"
			NodeList  nodes = (NodeList) xpath.evaluate(findHybridizationExpression, el, XPathConstants.NODESET);
			System.out.println(nodes.getLength());
			
			StringBuffer cql = new StringBuffer("&lt;dataSetRequest&gt;&lt;ns1:DataSetRequest xmlns:ns1=\"gme://External.caArray.caBIG/1.0/gov.nih.nci.caarray.external.query\"&gt;&lt;ns1:quantitationTypes&gt;&lt;ns2:CaArrayEntityReference id=\"URN:LSID:caarray.nci.nih.gov:gov.nih.nci.caarray.external.v1_0.data.QuantitationType:5\" xmlns:ns2=\"gme://External.caArray.caBIG/1.0/gov.nih.nci.caarray.external\"/&gt;&lt;/ns1:quantitationTypes&gt;&lt;ns1:hybridizations&gt;");
			for (int i=0;i&lt;nodes.getLength();i++){
				Node n = nodes.item(i);
				//System.out.println(n.getTextContent());
				
				cql.append("&lt;ns4:CaArrayEntityReference id=\""+ n.getTextContent() + "\" xmlns:ns4=\"gme://External.caArray.caBIG/1.0/gov.nih.nci.caarray.external\"/&gt;");		
			}
			cql.append("&lt;/ns1:hybridizations&gt;&lt;ns1:dataFiles/&gt;&lt;/ns1:DataSetRequest&gt;&lt;/dataSetRequest&gt;");
			o = cql.toString();

			


		
		    	
		} catch (ParserConfigurationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SAXException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (XPathExpressionException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

</script>
  <dependencies />
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>i</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>0</granularDepth>
      <name>result</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>0</granularDepth>
      <name>o</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>0.8</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>0.8</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>0.8</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>0.8</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>0.8</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="i" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>getDataSet</name><inputPorts><port><name>parameters</name><depth>0</depth></port></inputPorts><outputPorts><port><name>parameters</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>wsdl-activity</artifact><version>0.8</version></raven><class>net.sf.taverna.t2.activities.wsdl.WSDLActivity</class><inputMap><map from="parameters" to="parameters" /></inputMap><outputMap><map from="parameters" to="parameters" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.wsdl.WSDLActivityConfigurationBean xmlns="">
  <wsdl>http://array.nci.nih.gov/wsrf/services/cagrid/CaArraySvc_v1_0?wsdl</wsdl>
  <operation>getDataSet</operation>
</net.sf.taverna.t2.activities.wsdl.WSDLActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>0.8</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>0.8</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>0.8</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>0.8</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>0.8</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="parameters" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>getDataSet_input</name><inputPorts><port><name>dataSetRequest</name><depth>0</depth></port></inputPorts><outputPorts><port><name>output</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>wsdl-activity</artifact><version>0.8</version></raven><class>net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLInputSplitterActivity</class><inputMap><map from="dataSetRequest" to="dataSetRequest" /></inputMap><outputMap><map from="output" to="output" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLSplitterConfigurationBean xmlns="">
  <wrappedTypeXML>&lt;s:extensions xmlns:s="http://org.embl.ebi.escience/xscufl/0.1alpha"&gt;&lt;s:complextype optional="false" unbounded="false" typename="GetDataSetRequest" name="parameters" qname="{http://grid.v1_0.external.services.caarray.nci.nih.gov/CaArraySvc_v1_0}GetDataSetRequest"&gt;&lt;s:elements&gt;&lt;s:complextype optional="false" unbounded="false" typename="&amp;gt;&amp;gt;GetDataSetRequest&amp;gt;dataSetRequest" name="dataSetRequest" qname="{http://grid.v1_0.external.services.caarray.nci.nih.gov/CaArraySvc_v1_0}&amp;gt;GetDataSetRequest&amp;gt;dataSetRequest"&gt;&lt;s:elements&gt;&lt;s:complextype optional="false" unbounded="false" typename="DataSetRequest" name="DataSetRequest" qname="{gme://External.caArray.caBIG/1.0/gov.nih.nci.caarray.external.query}&amp;gt;&amp;gt;GetDataSetRequest&amp;gt;dataSetRequest&amp;gt;DataSetRequest"&gt;&lt;s:elements&gt;&lt;s:arraytype optional="false" unbounded="false" wrapped="false" typename="&amp;gt;DataSetRequest&amp;gt;quantitationTypes" name="quantitationTypes" qname="{gme://External.caArray.caBIG/1.0/gov.nih.nci.caarray.external.query}DataSetRequest&amp;gt;quantitationTypes"&gt;&lt;s:elementtype&gt;&lt;s:complextype optional="false" unbounded="false" typename="CaArrayEntityReference" name="" qname="{gme://External.caArray.caBIG/1.0/gov.nih.nci.caarray.external}CaArrayEntityReference"&gt;&lt;s:elements /&gt;&lt;/s:complextype&gt;&lt;/s:elementtype&gt;&lt;/s:arraytype&gt;&lt;s:arraytype optional="false" unbounded="false" wrapped="false" typename="&amp;gt;DataSetRequest&amp;gt;hybridizations" name="hybridizations" qname="{gme://External.caArray.caBIG/1.0/gov.nih.nci.caarray.external.query}DataSetRequest&amp;gt;hybridizations"&gt;&lt;s:elementtype&gt;&lt;s:complextype id="{gme://External.caArray.caBIG/1.0/gov.nih.nci.caarray.external}CaArrayEntityReference" optional="false" unbounded="false" typename="CaArrayEntityReference" name="" /&gt;&lt;/s:elementtype&gt;&lt;/s:arraytype&gt;&lt;s:arraytype optional="false" unbounded="false" wrapped="false" typename="&amp;gt;DataSetRequest&amp;gt;dataFiles" name="dataFiles" qname="{gme://External.caArray.caBIG/1.0/gov.nih.nci.caarray.external.query}DataSetRequest&amp;gt;dataFiles"&gt;&lt;s:elementtype&gt;&lt;s:complextype id="{gme://External.caArray.caBIG/1.0/gov.nih.nci.caarray.external}CaArrayEntityReference" optional="false" unbounded="false" typename="CaArrayEntityReference" name="" /&gt;&lt;/s:elementtype&gt;&lt;/s:arraytype&gt;&lt;/s:elements&gt;&lt;/s:complextype&gt;&lt;/s:elements&gt;&lt;/s:complextype&gt;&lt;/s:elements&gt;&lt;/s:complextype&gt;&lt;/s:extensions&gt;</wrappedTypeXML>
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <allowsLiteralValues>false</allowsLiteralValues>
      <name>dataSetRequest</name>
      <depth>0</depth>
      <mimeTypes class="java.util.Collections$SingletonList">
        <element class="string">'text/xml'</element>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>0</granularDepth>
      <name>output</name>
      <depth>0</depth>
      <mimeTypes class="java.util.Collections$SingletonList">
        <element class="string">'text/xml'</element>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLSplitterConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>0.8</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>0.8</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>0.8</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>0.8</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>0.8</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="dataSetRequest" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>Beanshell3</name><inputPorts><port><name>i</name><depth>0</depth></port></inputPorts><outputPorts><port><name>testClass</name><depth>0</depth><granularDepth>0</granularDepth></port><port><name>trainingClass</name><depth>0</depth><granularDepth>0</granularDepth></port><port><name>trainingDataString</name><depth>0</depth><granularDepth>0</granularDepth></port><port><name>testDataString</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>0.8</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="i" to="i" /></inputMap><outputMap><map from="trainingClass" to="trainingClass" /><map from="testClass" to="testClass" /><map from="trainingDataString" to="trainingDataString" /><map from="testDataString" to="testDataString" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <script>import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.zip.GZIPInputStream;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import java.util.zip.GZIPInputStream;

public  byte[] doubleArrayToBytes(double [][] doubles)
{
	if(null == doubles || 0 == doubles.length)
		return null;
	int numRows = doubles.length;
	int numColumns = doubles[0].length;
	ByteArrayOutputStream bos = new ByteArrayOutputStream();
	DataOutputStream dos = new DataOutputStream(bos);
	try
	{
		for(int i = 0; i &lt; numRows; i++)
		{
			for(int j = 0; j &lt; numColumns; j++)
				dos.writeDouble(doubles[i][j]);

		}

	}
	catch(IOException e)
	{
		e.printStackTrace(System.err);
		throw new RuntimeException((new StringBuilder()).append("Error converting double array to byte array: ").append(e).toString());
	}
	return bos.toByteArray();
}

public float [] getFloatArray(String columnString){	
	//trim the string
	columnString = columnString.trim();
	int columnSize = 0;
	for(int i=0;i&lt;columnString.length();i++){
		if(columnString.charAt(i)==' '){
			columnSize++;				
		}			
	}	
	columnSize++;
	String[] array = columnString.split(" ");
	float [] columnArray = new float[columnSize];
	for(int i=0;i&lt;columnSize;i++){
		columnArray[i] = Float.valueOf(array[i]);
		
	}
	return columnArray;
}
	

///////////////////////////////////////////////////////////////////////////////
result = "";
int sampleLength = 0;
int sampleNo = 0;
		
try{

	DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
	docBuilderFactory.setNamespaceAware(true);
	DocumentBuilder docBuilder;
	docBuilder = docBuilderFactory.newDocumentBuilder();
	//parse data column
	Document doc = docBuilder.parse( new InputSource(new StringReader(i)));	
	//Document doc = docBuilder.parse( new File(dataFile));	
	Element el = doc.getDocumentElement();   
	XPath xpath = XPathFactory.newInstance().newXPath();
	String findDataColumn = 
		"//*[local-name()='values' and namespace-uri()='gme://External.caArray.caBIG/1.0/gov.nih.nci.caarray.external.v1_0.data']";

	String findDesignElements = 
	"//*[local-name()='DesignElement' and namespace-uri()='gme://External.caArray.caBIG/1.0/gov.nih.nci.caarray.external.data']/@name";
	NodeList  designElementsNodes = (NodeList) xpath.evaluate(findDesignElements, el, XPathConstants.NODESET);
	NodeList  dataNodes = (NodeList) xpath.evaluate(findDataColumn, el, XPathConstants.NODESET);
	//get class information: DLBCL or FL
	String findFactorValue = 
		"//*[local-name()='term' and namespace-uri()='gme://External.caArray.caBIG/1.0/gov.nih.nci.caarray.external.value']/@value";
	NodeList  termNodes = (NodeList) xpath.evaluate(findFactorValue, el, XPathConstants.NODESET);
	sampleLength = designElementsNodes.getLength();
	sampleNo = dataNodes.getLength();
	System.out.println(sampleNo);
	//77*7129
	float [][] dataColumnValue = new float [dataNodes.getLength()][designElementsNodes.getLength()];
	for(int i=0;i&lt;dataNodes.getLength();i++){
		dataColumnValue[i] = getFloatArray(dataNodes.item(i).getTextContent());
	}
	
		///////////////////////////////////////////////////////////////////////////////////////////////////////


		/////////////////////////////////prepare data for SVM
		
		//read a double (int?) [][] from .gct file
		//concert [][] into byte []
		//base64 encode
		//
		int length = dataColumnValue[0].length;
		System.out.println(length);
		double [][] trainingMicroArrayData  = new double[length][];
		double [][] testMicroArrayData  = new double[length][];
		int trainingLength;//39
		int testLength;//38
		if(dataColumnValue.length%2==1){
		trainingLength=dataColumnValue.length/2+1;
		}
		else {
		trainingLength=dataColumnValue.length/2;
		}
		testLength=dataColumnValue.length/2;
		for(int i=0;i&lt;dataColumnValue[0].length;i++){
		trainingMicroArrayData[i] = new double[trainingLength];
		testMicroArrayData[i] =  new double[testLength];
		}

		for(int i=0;i&lt;dataColumnValue.length;i++){
			if(i%2==0){//to training
				for(int j=0;j&lt;dataColumnValue[i].length;j++){
					trainingMicroArrayData[j][i/2] = (double)dataColumnValue[i][j];			
				}
			}
			else{//to test
				for(int j=0;j&lt;dataColumnValue[i].length;j++){
					testMicroArrayData[j][i/2] = (double)dataColumnValue[i][j];	
					}
			}
			
		}
		//termNodes.getLength() is odd
		int [] trainingType = new int[trainingLength];
		int [] testType =new int[testLength];
		String type0 = termNodes.item(0).getTextContent();
		for (int i=0;i&lt;termNodes.getLength();i++){
			Node n = termNodes.item(i);
			String ntype = n.getTextContent();
			int itype = ntype.equals(type0)?0:1;
			if(i%2==0){
				trainingType[i/2]= itype;
			}
			else {
				testType[i/2] = itype; 
				
			}
		}

		
	    byte [] trainingMicroArrayByte = doubleArrayToBytes(trainingMicroArrayData);
	    byte [] testMicroArrayByte = doubleArrayToBytes(testMicroArrayData);
	    sun.misc.BASE64Encoder base64Encoder = new sun.misc.BASE64Encoder();
	    String trainingMicroArrayBase64String = base64Encoder.encode(trainingMicroArrayByte);
	    String testMicroArrayBase64String = base64Encoder.encode(testMicroArrayByte);
	    //System.out.println(microArrayBase64String);
	    
	    //construct classmembership elements
	    //training
	    StringBuffer trainingClassMembershipXMLString = new StringBuffer ("&lt;ns1:ClassMembership xmlns:ns1=\"gme://GenePattern.caBIG/1/gridExtensions\"&gt;");
	    trainingClassMembershipXMLString.append("&lt;classNames xmlns=\"\"&gt;DLBCL&lt;/classNames&gt;&lt;classNames xmlns=\"\"&gt;FL&lt;/classNames&gt;");
	    trainingClassMembershipXMLString.append("&lt;numSamples xmlns=\"\"&gt;"+trainingType.length+"&lt;/numSamples&gt;");
	    for(int i=0;i&lt;trainingType.length;i++){
	    	trainingClassMembershipXMLString.append("&lt;sampleClasses xmlns=\"\"&gt;"+trainingType[i]+"&lt;/sampleClasses&gt;");
	    }
	    for(int i=0;i&lt;trainingType.length;i++){
	    	trainingClassMembershipXMLString.append("&lt;sampleNames xmlns=\"\"&gt;trainingSample_"+i+"&lt;/sampleNames&gt;");
	    }
	    trainingClassMembershipXMLString.append("&lt;/ns1:ClassMembership&gt;");
	    //System.out.println(trainingClassMembershipXMLString);
	    //test
	    StringBuffer testClassMembershipXMLString = new StringBuffer ("&lt;ns1:ClassMembership xmlns:ns1=\"gme://GenePattern.caBIG/1/gridExtensions\"&gt;");
	    testClassMembershipXMLString.append("&lt;classNames xmlns=\"\"&gt;DLBCL&lt;/classNames&gt;&lt;classNames xmlns=\"\"&gt;FL&lt;/classNames&gt;");
	    testClassMembershipXMLString.append("&lt;numSamples xmlns=\"\"&gt;"+testType.length+"&lt;/numSamples&gt;");
	    for(int i=0;i&lt;testType.length;i++){
	    	testClassMembershipXMLString.append("&lt;sampleClasses xmlns=\"\"&gt;"+testType[i]+"&lt;/sampleClasses&gt;");
	    }
	    for(int i=0;i&lt;testType.length;i++){
	    	testClassMembershipXMLString.append("&lt;sampleNames xmlns=\"\"&gt;testSample_"+i+"&lt;/sampleNames&gt;");
	    }
	    testClassMembershipXMLString.append("&lt;/ns1:ClassMembership&gt;");
	    //System.out.println(testClassMembershipXMLString);
	    
	     //construct Data elements
	    //training data-----------------------------------------------------------------
	    StringBuffer trainingDataXMLString = new StringBuffer ("&lt;ns3:Data xmlns:ns3=\"gme://RProteomics.caBIG/2.0/edu.duke.cabig.rproteomics.model.statml\"" +
	    		" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;");
	   //&lt;data&gt; contains four &lt;list&gt;:
	    // 1 add the base64value
	    trainingDataXMLString.append("&lt;ns3:list&gt;&lt;ns3:name&gt;data&lt;/ns3:name&gt;&lt;ns3:type xsi:nil=\"true\"/&gt;&lt;ns3:length xsi:nil=\"true\"/&gt;&lt;ns3:array&gt;&lt;ns3:dimensions&gt;"
	    		+trainingMicroArrayData.length+","+trainingMicroArrayData[0].length+
	    		"&lt;/ns3:dimensions&gt;&lt;ns3:name&gt;data&lt;/ns3:name&gt;&lt;ns3:type&gt;double&lt;/ns3:type&gt;&lt;ns3:base64Value&gt;"+
	    		trainingMicroArrayBase64String+ "&lt;/ns3:base64Value&gt;&lt;/ns3:array&gt;&lt;/ns3:list&gt;");
	    //2 add markerNames
	    trainingDataXMLString.append("&lt;ns3:list&gt;&lt;ns3:name&gt;markerNames&lt;/ns3:name&gt;&lt;ns3:type xsi:nil=\"true\"/&gt;&lt;ns3:length xsi:nil=\"true\"/&gt;");
	    for(int i=0;i&lt;trainingMicroArrayData.length;i++){
	    	trainingDataXMLString.append("&lt;ns3:scalar&gt;&lt;ns3:name&gt;markerNames&lt;/ns3:name&gt;&lt;ns3:type&gt;string&lt;/ns3:type&gt;&lt;ns3:value&gt;Gene_"+i+"&lt;/ns3:value&gt;&lt;/ns3:scalar&gt;");
	    	
	    }
	    trainingDataXMLString.append("&lt;/ns3:list&gt;");
	      //3 add markerDescriptions
	    trainingDataXMLString.append("&lt;ns3:list&gt;&lt;ns3:name&gt;markerDescriptions&lt;/ns3:name&gt;&lt;ns3:type xsi:nil=\"true\"/&gt;&lt;ns3:length xsi:nil=\"true\"/&gt;");
	    for(int i=0;i&lt;trainingMicroArrayData.length;i++){
	    	trainingDataXMLString.append("&lt;ns3:scalar&gt;&lt;ns3:name&gt;markerDescriptions&lt;/ns3:name&gt;&lt;ns3:type&gt;string&lt;/ns3:type&gt;&lt;ns3:value&gt;Gene_"+i+"&lt;/ns3:value&gt;&lt;/ns3:scalar&gt;");    	
	    }
	    trainingDataXMLString.append("&lt;/ns3:list&gt;");
	    
	    
	    //4 add sampleNames
	    trainingDataXMLString.append("&lt;ns3:list&gt;&lt;ns3:name&gt;sampleNames&lt;/ns3:name&gt;&lt;ns3:type xsi:nil=\"true\"/&gt;&lt;ns3:length xsi:nil=\"true\"/&gt;");
	    for(int i=0;i&lt;trainingMicroArrayData[0].length;i++){
	    	trainingDataXMLString.append("&lt;ns3:scalar&gt;&lt;ns3:name&gt;sampleNames&lt;/ns3:name&gt;&lt;ns3:type&gt;string&lt;/ns3:type&gt;&lt;ns3:value&gt;trainingSample_"+i+"&lt;/ns3:value&gt;&lt;/ns3:scalar&gt;");    	
	    }
	    trainingDataXMLString.append("&lt;/ns3:list&gt;");	    
	    trainingDataXMLString.append("&lt;/ns3:Data&gt;");
	   
	    //test data-----------------------------------------------------------------	 
	    StringBuffer testDataXMLString = new StringBuffer ("&lt;ns3:Data xmlns:ns3=\"gme://RProteomics.caBIG/2.0/edu.duke.cabig.rproteomics.model.statml\"" +
		" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;");
	    //&lt;data&gt; contains four &lt;list&gt;:
	    // 1 add the base64value
	    testDataXMLString.append("&lt;ns3:list&gt;&lt;ns3:name&gt;data&lt;/ns3:name&gt;&lt;ns3:type xsi:nil=\"true\"/&gt;&lt;ns3:length xsi:nil=\"true\"/&gt;&lt;ns3:array&gt;&lt;ns3:dimensions&gt;"
		+testMicroArrayData.length+","+testMicroArrayData[0].length+
		"&lt;/ns3:dimensions&gt;&lt;ns3:name&gt;data&lt;/ns3:name&gt;&lt;ns3:type&gt;double&lt;/ns3:type&gt;&lt;ns3:base64Value&gt;"+
		testMicroArrayBase64String+ "&lt;/ns3:base64Value&gt;&lt;/ns3:array&gt;&lt;/ns3:list&gt;");
	    
	    //2 add markerNames
	    testDataXMLString.append("&lt;ns3:list&gt;&lt;ns3:name&gt;markerNames&lt;/ns3:name&gt;&lt;ns3:type xsi:nil=\"true\"/&gt;&lt;ns3:length xsi:nil=\"true\"/&gt;");
	    for(int i=0;i&lt;testMicroArrayData.length;i++){
	    	testDataXMLString.append("&lt;ns3:scalar&gt;&lt;ns3:name&gt;markerNames&lt;/ns3:name&gt;&lt;ns3:type&gt;string&lt;/ns3:type&gt;&lt;ns3:value&gt;Gene_"+i+"&lt;/ns3:value&gt;&lt;/ns3:scalar&gt;");
	    	}
	    testDataXMLString.append("&lt;/ns3:list&gt;");
	    //3 add markerDescriptions
	    testDataXMLString.append("&lt;ns3:list&gt;&lt;ns3:name&gt;markerDescriptions&lt;/ns3:name&gt;&lt;ns3:type xsi:nil=\"true\"/&gt;&lt;ns3:length xsi:nil=\"true\"/&gt;");
	    for(int i=0;i&lt;testMicroArrayData.length;i++){
	    	testDataXMLString.append("&lt;ns3:scalar&gt;&lt;ns3:name&gt;markerDescriptions&lt;/ns3:name&gt;&lt;ns3:type&gt;string&lt;/ns3:type&gt;&lt;ns3:value&gt;Gene_");
	    	testDataXMLString.append(i);
	    	testDataXMLString.append("&lt;/ns3:value&gt;&lt;/ns3:scalar&gt;");    	
	    }
	    testDataXMLString.append("&lt;/ns3:list&gt;");
	    //4 add sampleNames
	    testDataXMLString.append("&lt;ns3:list&gt;&lt;ns3:name&gt;sampleNames&lt;/ns3:name&gt;&lt;ns3:type xsi:nil=\"true\"/&gt;&lt;ns3:length xsi:nil=\"true\"/&gt;");
	    for(int i=0;i&lt;testMicroArrayData[0].length;i++){
	    	testDataXMLString.append("&lt;ns3:scalar&gt;&lt;ns3:name&gt;sampleNames&lt;/ns3:name&gt;&lt;ns3:type&gt;string&lt;/ns3:type&gt;&lt;ns3:value&gt;testSample_"+i+"&lt;/ns3:value&gt;&lt;/ns3:scalar&gt;");    	
	    }
	    testDataXMLString.append("&lt;/ns3:list&gt;");	    
	    testDataXMLString.append("&lt;/ns3:Data&gt;");
	    //System.out.println(testDataXMLString);
		trainingClass = trainingClassMembershipXMLString.toString();
		testClass = testClassMembershipXMLString.toString();
   		trainingDataString = trainingDataXMLString.toString();
		testDataString = testDataXMLString.toString();
		
	} catch (IOException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	} catch (XPathExpressionException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	} catch (SAXException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	} catch (ParserConfigurationException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
				
			///////////////////////////////////////////////////	</script>
  <dependencies />
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>i</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>0</granularDepth>
      <name>testClass</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>0</granularDepth>
      <name>trainingClass</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>0</granularDepth>
      <name>testDataString</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>0</granularDepth>
      <name>trainingDataString</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>0.8</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>0.8</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>0.8</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>0.8</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.0</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>0</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>0.8</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="i" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor></processors><conditions /><datalinks><datalink><sink type="processor"><processor>searchForHybridizations</processor><port>parameters</port></sink><source type="processor"><processor>Beanshell</processor><port>searchHyb</port></source></datalink><datalink><sink type="processor"><processor>Beanshell</processor><port>expid</port></sink><source type="dataflow"><port>EXP_ID</port></source></datalink><datalink><sink type="processor"><processor>Beanshell2</processor><port>i</port></sink><source type="processor"><processor>searchForHybridizations</processor><port>parameters</port></source></datalink><datalink><sink type="processor"><processor>getDataSet</processor><port>parameters</port></sink><source type="processor"><processor>getDataSet_input</processor><port>output</port></source></datalink><datalink><sink type="processor"><processor>getDataSet_input</processor><port>dataSetRequest</port></sink><source type="processor"><processor>Beanshell2</processor><port>o</port></source></datalink><datalink><sink type="processor"><processor>Beanshell3</processor><port>i</port></sink><source type="processor"><processor>getDataSet</processor><port>parameters</port></source></datalink><datalink><sink type="dataflow"><port>testClass</port></sink><source type="processor"><processor>Beanshell3</processor><port>testClass</port></source></datalink><datalink><sink type="dataflow"><port>trainingClass</port></sink><source type="processor"><processor>Beanshell3</processor><port>trainingClass</port></source></datalink><datalink><sink type="dataflow"><port>trainingData</port></sink><source type="processor"><processor>Beanshell3</processor><port>trainingDataString</port></source></datalink><datalink><sink type="dataflow"><port>testData</port></sink><source type="processor"><processor>Beanshell3</processor><port>testDataString</port></source></datalink></datalinks><annotations><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.FreeTextDescription">
        <text>Query all the gene expression data in a caArray experiment. Returns a evenly divided gene expression data set with corresponding class information. They ca be later used as training and test data set in many classification algorithms.</text>
      </annotationBean>
      <date>2009-11-19 13:37:23.833 CST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.DescriptiveTitle">
        <text>caArray data retrieving</text>
      </annotationBean>
      <date>2009-11-19 13:34:46.258 CST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.Author">
        <text>Wei Tan
University of Chicago and Argonne National Lab</text>
      </annotationBean>
      <date>2009-11-19 13:34:33.486 CST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.FreeTextDescription">
        <text>Query all the gene expression data in a caArray experiment. Returns a evenly divided gene expression data set with corresponding class information. They can be later used as training and test data set in many classification algorithms.</text>
      </annotationBean>
      <date>2009-11-23 11:59:17.690 CST</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain></annotations></dataflow></workflow>